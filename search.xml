<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>国际标准保留端口列表</title>
      <link href="/posts/9ec26053/"/>
      <url>/posts/9ec26053/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml">Service Name and Transport Protocol Port Number Registry</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> rfc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次docker占用过大导致磁盘爆炸的问题</title>
      <link href="/posts/cee56102/"/>
      <url>/posts/cee56102/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>通过告警发现磁盘被占满</p><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><p>通过命令行工具 <code>ncdu</code> 发现这个文件过大 <code>/var/lib/docker/containers/92ca12ee784ccd5dc44c367046d72f6c0cae4668e50fae613567dc0f4de024a3/92ca12ee784ccd5dc44c367046d72f6c0cae4668e50fae613567dc0f4de024a3-json.log</code>‘</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls -lh /var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span>/<span class="title">containers</span>/92<span class="title">ca12ee784ccd5dc44c367046d72f6c0cae4668e50fae613567dc0f4de024a3</span>/92<span class="title">ca12ee784ccd5dc44c367046d72f6c0cae4668e50fae613567dc0f4de024a3</span>-<span class="title">json</span>.<span class="title">log</span></span></span><br><span class="line"></span><br><span class="line">-rw-r----- <span class="number">1</span> root root <span class="number">15</span>G Jul <span class="number">15</span> <span class="number">22</span>:<span class="number">37</span> /var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span>/<span class="title">containers</span>/92<span class="title">ca12ee784ccd5dc44c367046d72f6c0cae4668e50fae613567dc0f4de024a3</span>/92<span class="title">ca12ee784ccd5dc44c367046d72f6c0cae4668e50fae613567dc0f4de024a3</span>-<span class="title">json</span>.<span class="title">log</span></span></span><br></pre></td></tr></table></figure><p>检查后发现是一个日志文件，占据了 15G 之多.</p><p>使用命令 <code>cat /dev/null &gt; /var/lib/docker/containers/92ca12ee784ccd5dc44c367046d72f6c0cae4668e50fae613567dc0f4de024a3/92ca12ee784ccd5dc44c367046d72f6c0cae4668e50fae613567dc0f4de024a3-json.log</code> 将其清理，因为这个文件如果被一直占用的话直接使用<code>rm</code>是不会释放磁盘空间的。因此直接使用 <code>/dev/null</code> 覆盖文件即可实现立即释放空间的作用</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打工人必备！实现JS控制的SVG渐变图标，让你的页面更加生动有趣</title>
      <link href="/posts/8aed9be/"/>
      <url>/posts/8aed9be/</url>
      
        <content type="html"><![CDATA[<p>在我们开发界面时，有时候渐变的图像会相比固定颜色的图形更加富有层次感与有趣。熟悉css的同学都知道，我们可以通过样式让背景呈现一个线性的渐变图片，比如这样:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.simple-linear</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(blue, pink);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/misc/231012/1.png"></p><p>也可以通过裁剪背景颜色到文本的方式实现文本颜色渐变</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.text-gradient</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, orange, purple);</span><br><span class="line">  <span class="attribute">-webkit-background-clip</span>: text;</span><br><span class="line">  <span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/misc/231012/2.png"></p><p>这些解决方案都是网络上随便都能搜到的，那么现在背景渐变有了，文本渐变有了，看上去我们似乎可以实现各种渐变了，但是我们还差一个非常常见的元素没有办法做到渐变，那就是svg图标。</p><p>目前网络上所能找到的所有关于svg渐变颜色的方案都是需要通过svg本身的配置来实现的。举个例子:</p><p>比如这样:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg</span><br><span class="line">  class=&quot;svg-gradient&quot;</span><br><span class="line">  xmlns=&quot;http://www.w3.org/2000/svg&quot;</span><br><span class="line">  width=&quot;24&quot;</span><br><span class="line">  height=&quot;24&quot;</span><br><span class="line">  viewBox=&quot;0 0 24 24&quot;</span><br><span class="line">&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">defs</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">y2</span>=<span class="string">&quot;0&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;1&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;1&quot;</span> <span class="attr">x1</span>=<span class="string">&quot;1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;svg_1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">stop-color</span>=<span class="string">&quot;#ff0000&quot;</span> <span class="attr">offset</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">stop-color</span>=<span class="string">&quot;#ffff00&quot;</span> <span class="attr">offset</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line">  &lt;path</span><br><span class="line">    d=&quot;M12 2a9 9 0 0 0-9 9v11l3-3l3 3l3-3l3 3l3-3l3 3V11a9 9 0 0 0-9-9M9 8a2 2 0 0 1 2 2a2 2 0 0 1-2 2a2 2 0 0 1-2-2a2 2 0 0 1 2-2m6 0a2 2 0 0 1 2 2a2 2 0 0 1-2 2a2 2 0 0 1-2-2a2 2 0 0 1 2-2Z&quot;</span><br><span class="line">    fill=&quot;url(#svg_1)&quot;</span><br><span class="line">  /&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/misc/231012/3.png"></p><p>这看上去很美好，因为我们我们只需要把这段svg代码复制到我们的项目中，然后需要的时候引用一下就好了。</p><p>当然是可以，但是在实际开发中我们往往会遇到更加复杂的挑战。比如我们用的图标是在一个图标库组件中，我们没有办法去直接修改（比如 <code>react-icons</code> ）。比如我们需要让图标在渐变色(选中状态)和单色(未选中状态)之间来回切换。</p><p>难道我要准备两个一样的仅仅颜色不一样的图标因为状态来选择使用哪个图标么？这很丑陋，且难以维护。</p><p>想象一下我们是如何使用单色图标的？仅仅配置 <code>color=#&lt;hex-color&gt;</code> 即可实现不同颜色的切换。为什么渐变色图标不能有类似方式？</p><p>我搜索了网络上所有的资料，但是我没有找到我想要的方法，因此我决定自己探索。</p><p>一个很少有人会注意到的事实是，<code>&lt;defs&gt;</code> 标签的定义作用域不是父级的svg节点而是整个文档流。因此我们可以跨多个svg声明共用一个svg定义。然后只需要通过固定的id就可以了。</p><p>具体方案如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.svg-gradient</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">fill</span>: <span class="selector-tag">url</span>(<span class="selector-id">#my-gradient</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;0&quot;</span> <span class="attr">height</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">defs</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">y2</span>=<span class="string">&quot;0&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;1&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;1&quot;</span> <span class="attr">x1</span>=<span class="string">&quot;1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;my-gradient&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">stop-color</span>=<span class="string">&quot;#ff0000&quot;</span> <span class="attr">offset</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">stop-color</span>=<span class="string">&quot;#ffff00&quot;</span> <span class="attr">offset</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;svg</span><br><span class="line">  class=&quot;svg-gradient&quot;</span><br><span class="line">  xmlns=&quot;http://www.w3.org/2000/svg&quot;</span><br><span class="line">  width=&quot;24&quot;</span><br><span class="line">  height=&quot;24&quot;</span><br><span class="line">  viewBox=&quot;0 0 24 24&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;path</span><br><span class="line">    d=&quot;M12 2a9 9 0 0 0-9 9v11l3-3l3 3l3-3l3 3l3-3l3 3V11a9 9 0 0 0-9-9M9 8a2 2 0 0 1 2 2a2 2 0 0 1-2 2a2 2 0 0 1-2-2a2 2 0 0 1 2-2m6 0a2 2 0 0 1 2 2a2 2 0 0 1-2 2a2 2 0 0 1-2-2a2 2 0 0 1 2-2Z&quot;</span><br><span class="line">  /&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只需要我们把第一个表示颜色定义的svg放在全局预先加载，然后给定义的渐变色起一个有意义的名字，然后我们就可以在任意地方直接在svg的样式上告知需要采用的fill颜色即可 <code>fill: url(#my-gradient);</code></p><p>颜色的切换就变成了 <code>fill</code> 属性的切换，这样就和单色图标一样了。</p><p>需要注意的是需要给用于声明的svg的宽高设为0，不然浏览器会给一个默认的宽高，会影响整体的布局。</p><p>最终看下成品效果:</p><p><img src="/images/misc/231012/4.gif"></p>]]></content>
      
      
      
        <tags>
            
            <tag> svg </tag>
            
            <tag> gradient </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你可能不需要微前端，但你一定会需要微内核</title>
      <link href="/posts/cecd0a5c/"/>
      <url>/posts/cecd0a5c/</url>
      
        <content type="html"><![CDATA[<h2 id="先聊聊微前端"><a href="#先聊聊微前端" class="headerlink" title="先聊聊微前端"></a>先聊聊微前端</h2><p>阿里巴巴的一篇 <a href="https://juejin.cn/post/7185070739064619068">为iframe正名，你可能并不需要微前端</a> 又将社区的风向一转，当初大力推销微前端概念的阿里巴巴又主动跳出来说微前端未必好用。</p><p>虽然不知道阿里巴巴内部发生了什么，但是同样作为一名在工作中深度使用微前端框架的前端码农来说，我想我也逐步触及了微前端的限制。</p><p>微前端，简单来说就是把原来iframe实现的隔离机制用js实现了一遍。其背景是为了解决多个团队同时修改一套系统可能带来的项目管理问题，</p><p>而微前端的好处在于，iframe的隔离是完全隔离，而微前端是一个可控的隔离。即在某些情况下可以分享一些内容。</p><p>微前端的架构往往是由一个基座项目为中心，加上若干个子项目组成。而子项目与子项目之间有一些内容是可以共享的，比如说组件库，公共依赖，缓存管理，权限管理等。这是微前端给我们带来的好处与优势。而曾经的iframe方案则很难做到这一点。</p><p>至于iframe方案和微前端的方案的优劣在此不再赘述，但是我想带大家了解一下更容易被我们忽略的东西</p><h2 id="什么是微内核"><a href="#什么是微内核" class="headerlink" title="什么是微内核"></a>什么是微内核</h2><p>在了解了什么是微前端后，我想向大家介绍一下微内核的概念。</p><p>什么是微内核？即以一个核心服务为中心，然后将所有的业务当做一个可插拔的插件。</p><p><img src="/images/misc/230524/1.png"></p><p>这种架构是不是非常眼熟？没错我们经常用的 <code>vscode</code> 也是这样的微内核框架，<code>vscode</code> 的核心就是一个文本编辑器，然后配套上一个拓展中心用于加载插件。</p><p>而像是主题、语言支持、格式化工具以及各种第三方工具面板，都是一个个独立的外部插件。正是因为完整的插件生态造成了 <code>vscode</code> 的成功。而 <code>vscode</code> 的插件系统就是一种微内核架构。</p><p>而回过头想想，微前端又何尝不是一种特殊的微内核解决方案呢？微前端无非是基于路由的、限定同时只能加载一个子应用(插件)，具备沙盒机制的微内核框架。</p><h2 id="微内核架构可以给我们带来什么"><a href="#微内核架构可以给我们带来什么" class="headerlink" title="微内核架构可以给我们带来什么"></a>微内核架构可以给我们带来什么</h2><p>在谈论微内核架构时，我们得先抛开一切上下文。聊聊微内核架构的设计理念。</p><blockquote><p>将系统的实现，与系统的基本操作规则区分开来。它实现的方式是将核心功能模块化，划分成几个独立的进程，各自运行，这些进程被称为服务。所有的服务进程，都运行在不同的地址空间。</p></blockquote><blockquote><p>让服务各自独立，可以减少系统之间的耦合度，易于实现与除错，也可以增进可移植性。它可以避免单一组件失效，而造成整个系统崩溃，内核只需要重启这个组件，不至于影响其他服务器的功能，使系统稳定度增加。同时业务功能可以视需要，抽换或新增某些服务进程，使功能更有弹性。</p></blockquote><blockquote><p>就代码数量来看，一般来说，因为功能简化，核心系统使用的代码比集成式系统更少。更少的代码意味更少的潜藏程序bug。</p></blockquote><p>在长期使用微前端的过程中我们也能发现其好处，业务代码再怎么发生改变，也不会影响整体系统的稳定性。而相比于微前端，微内核的设计抽象度会更加复杂一点，相对的，两者的交流也会更加频繁一点，自由度也会更加高。</p><p>相比于微前端固定位置，共享部分依赖的简单场景来说，微内核的核心系统会更加复杂一点。我们依旧是以 <code>vscode</code> 为例， <code>vscode</code> 需要抽象化他的核心系统，可以支持各种插件的功能，比如为系统的各个内容、token做标记，以支持各类主题的接入。为各种语言服务做抽象层，以兼容不同语言的需求等等。</p><p>这也是为什么这类做插件系统的应用很少。因为虽然大家都知道插件系统能够带来各种各样的好处，但是因为设计的复杂性导致愿意去做的人比较少。当然，这个复杂度是针对核心系统的，对于插件的开发者来说并不会感知到，而是可以直接使用成熟的核心系统提供的能力快速进行开发。相信开发过 <code>vscode</code> 的同学都不需要了解内核系统是怎么运作的。</p><p>当然，在日常的使用我们也有用到微内核的概念。常见的例子就是各类orm支持不同的数据库，然后我们通过一个适配层将通用的orm根据不同的数据库实现进行适配。</p><p>再比如飞书文档支持各类第三方内容块，而这些第三方内容块就是一个个插件。只需要统一的协议来约定交互行为即可。</p><p>所以为什么我说我们需要微内核架构呢？微内核架构更多的是一种设计思路，很多时候我们愿意去写集成式的应用，往往随着代码的迭代整个系统的复杂度越来越高、越来越难以维护。变成一个巨石应用，也往往被后来的维护者称为屎山代码。而如果我们前期就做好一定的抽象，那么随着时间而增加的代码复杂度的增长幅度也会逐渐趋于稳定。</p><p><img src="/images/misc/230524/2.png"></p><h2 id="那么有什么实现微内核架构的库呢"><a href="#那么有什么实现微内核架构的库呢" class="headerlink" title="那么有什么实现微内核架构的库呢"></a>那么有什么实现微内核架构的库呢</h2><p>当然有。</p><p>mini-star(<a href="https://ministar.moonrailgun.com/">https://ministar.moonrailgun.com/</a>) 就是一个可以满足想要构建微内核架构的库。</p><p><code>mini-star</code> 只做一个微内核库该做的事情，即插件构建、加载、与依赖共享。</p><p>相比于微前端的基于路由的、同时只能运行一个子应用的限制，<code>mini-star</code> 并没有对开发者做任何的限制，也就是说并没有做任何预设的场景限制。如微前端因为其限制更多的还是用在后台应用上，而作为微内核库的 <code>mini-star</code> 则可以用在任何场景。</p><p><code>mini-star</code> 提供了运行时加载器(runtime), 插件编译器(bundler) 和命令行工具(cli)。从全链路支持插件系统的开发。</p><h3 id="编译生态"><a href="#编译生态" class="headerlink" title="编译生态"></a>编译生态</h3><p><code>mini-star</code> 的编译器依托于 <code>Rollup</code> 。因此可以直接复用现成的rollup生态对代码做优化。当然 <code>mini-star</code> 已经内置了一部分常用的编译插件，开箱即用。</p><h3 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h3><p><code>mini-star</code> 的内核加载系统约定了插件和加载器运行时的规则，在运行时统一采用了类amd加载策略，因此依赖是可以收集以及被感知的，一个插件编译产物的结构如下:</p><p>源文件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源文件:</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@capital/any&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// some logic</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译后的文件:</span></span><br><span class="line">definePlugin(<span class="string">&#x27;@plugins/foo&#x27;</span>, [<span class="string">&#x27;@capital/any&#x27;</span>], (<span class="function"><span class="keyword">function</span> (<span class="params">any</span>) </span>&#123;</span><br><span class="line"><span class="comment">// some logic</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>因此， <code>mini-star</code> 支持依赖懒加载，而如 <code>qiankun</code>、 <code>garfish</code> 这种使用webpack的external机制进行共享的微前端框架是不支持的。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">regSharedModule(</span><br><span class="line">  <span class="string">&#x27;@capital/any&#x27;</span>,</span><br><span class="line">  () =&gt; <span class="keyword">import</span>(<span class="string">&#x27;./any&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>更多的可以访问 <code>mini-star</code> 官网了解更多: <a href="https://ministar.moonrailgun.com/">https://ministar.moonrailgun.com/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 微前端 </tag>
            
            <tag> 微内核 </tag>
            
            <tag> mini-star </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用 webpack-stats-viewer 分析 react-virtualized 摇树优化失效问题</title>
      <link href="/posts/8a830324/"/>
      <url>/posts/8a830324/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在项目性能优化过程中，发现 react-virtualized 依赖过重，经过初步分析是因为react-virtualized 虽然只是引用了部分功能，但是实际打包的时候将所有的代码都打包导入了。</p><p>我们起一个新的项目看一下。</p><p>在入口文件我们仅仅使用导入一个List功能。然后仅仅是打印一下，看看结果。</p><p><img src="/images/webpack/react-virtualized/1.png" alt="1.png"></p><p><img src="/images/webpack/react-virtualized/2.png" alt="2.png"></p><p>可以看到，通过<code>webpack-bundle-analyzer</code> 的分析，我们可以看到 <code>react-virtualized</code> 这个包被完全打包打进了产出中，尽管没有用到里面任何的东西。</p><p>了解 esmodule 这种打包方式的都应该知道摇树优化(Tree Shaking)。当我们通过 esmodule 的方式引入一个支持 esmodule 的包时，不被使用的包会被移除，以减少最终产物的体积。在<code>react-virtualized</code> 的路径中，我们可以很明显的发现我们引入的代码文件都是在 es 目录下的，这意味着这个包是支持 esmodule 的，尽管我们只用了 <code>react-virtualized</code> 这个包，其他不相关的代码依旧被打包进去了。</p><p>很显然，在 <code>react-virtualized</code> 这个库中，我们的摇树优化失效了。通过 <code>webpack-bundle-analyzer</code> 我们可以很轻易的看出这一点，然而更加深入的信息我们就不得而知了。</p><h2 id="排查问题"><a href="#排查问题" class="headerlink" title="排查问题"></a>排查问题</h2><p>为了解决问题，我们需要知道为什么会发生这样的事情，因此接下来我们要用到一个新的工具 —— <code>webpack-stats-viewer-plugin</code></p><p>使用方式如下:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D webpack-stats-viewer-plugin</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/react-virtualized/3.png" alt="3.png"></p><p>在每次 webpack 打包后，都会在输出目录生成一份打包报告。我们可以直接点开生成的报告看一下。大概内容是这样的:</p><p><img src="/images/webpack/react-virtualized/4.png" alt="4.png"></p><p>相比于比较注重美观的网格树来说，列表的显示更加直白与清晰。列表中的每个项都是一个独立的chunk, 列表显示了这个chunk打包出来的文件名，大小，以及chunk间的引用关系(父 chunks, 子 chunks, 和 同级chunks)。因为本例非常简单所以只有一个chunk，在这里我们要对单个chunk进行分析，在之前我们看到了 <code>react-virtualized</code> 已经被全部打进去了，所以我们要找到 <code>react-virtualized</code> 摇树优化失效的原因。这里我们点开 <code>modules</code> 功能看一下</p><p><img src="/images/webpack/react-virtualized/5.png" alt="5.png"></p><p>在弹出的popup中我们可以看到这个chunk包含的完整的模块列表，我们随便点开一个 <code>react-virtualized</code> 的模块</p><p><img src="/images/webpack/react-virtualized/6.png" alt="6.png"></p><p>我们可以详细的看到一个模块的引用路径，引用原因，以及导入原因，以及一些优化建议。</p><p>需要注意的是黄色警告的内容，提示 <code>No export used, maybe has side effect</code> 。这就是我们主要要解决的问题，虽然这个模块提供了esmodule，但是却依旧会把所有的内容打包进去(尽管没有任何代码被引用)。</p><p>我们看一下这个文件, 在建议中提示我们第一行有副作用，我们进去看一下</p><p><img src="/images/webpack/react-virtualized/7.png" alt="7.png"></p><p>在这里的第一行是个默认导出，我们继续跳转进去看一下</p><p>按照工具给出的提示，我们可以看到这个变量声明是具有副作用的</p><p><img src="/images/webpack/react-virtualized/8.png" alt="8.png"></p><p><img src="/images/webpack/react-virtualized/9.png" alt="9.png"></p><p>看起来是因为一个 <code>/*#**PURE***/</code> 标记无法处理连续的赋值操作导致编译的时候失效。</p><p>另一方面我们可以很明显发现有一些编译时注入的代码，</p><p><img src="/images/webpack/react-virtualized/10.png" alt="10.png"></p><p>这些代码是编译时babel注入的polyfill，而当我们跳转过去看一下会发现这些内容不能满足esmodule的要求，require语法在摇树优化时会因为无法被正确的处理，为了确保整体代码不会出问题，因此webpack会把require所包含的内容一起打进去。</p><p><img src="/images/webpack/react-virtualized/11.png" alt="11.png"></p><p>两方原因造成了<code>react-virtualized</code> 没有被使用的代码在引入时都被打包进去了，而类似的原因在这个库中到处都是。</p><p>这也难怪这个包的es 不生效了。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>解决方法很简单，就是直接通过es的引入方式来引入, 如:</p><p><img src="/images/webpack/react-virtualized/12.png" alt="12.png"></p><p><img src="/images/webpack/react-virtualized/13.png" alt="13.png"></p><p><img src="/images/webpack/react-virtualized/14.png" alt="14.png"></p><p>此时我们再看打包后的内容就干净了很多。</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>演示项目: <a href="https://stackblitz.com/edit/github-rx5vpd">https://stackblitz.com/edit/github-rx5vpd</a></p><p>webpack-stats-viewer: <a href="https://github.com/moonrailgun/webpack-stats-viewer">https://github.com/moonrailgun/webpack-stats-viewer</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> webpack-stats-viewer </tag>
            
            <tag> react-virtualized </tag>
            
            <tag> 性能优化 </tag>
            
            <tag> 摇树优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Query 简明设计哲学入门指北</title>
      <link href="/posts/6c6ef04/"/>
      <url>/posts/6c6ef04/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/react-query/1.png"></p><blockquote><p>Github <a href="https://github.com/TanStack/query">https://github.com/TanStack/query</a> 33k star</p><p>官方文档 <a href="https://react-query-v3.tanstack.com/">https://react-query-v3.tanstack.com/</a></p></blockquote><h2 id="0x00-首先，为什么我们需要React-Query"><a href="#0x00-首先，为什么我们需要React-Query" class="headerlink" title="0x00 首先，为什么我们需要React Query"></a>0x00 首先，为什么我们需要React Query</h2><p>顾名思义，React Query 是一个请求库，但是这个命名并不准确，因为这个请求库本身并不处理请求 —— 他本身不会以任何方式向外发起任何请求。相比请求库，他更像是一个请求缓存层。</p><p>一个简单的使用大概是这样的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">const</span> &#123; isLoading, error, data &#125; = useQuery(<span class="string">&#x27;repoData&#x27;</span>, <span class="function">() =&gt;</span></span><br><span class="line">     fetch(<span class="string">&#x27;https://api.github.com/repos/tannerlinsley/react-query&#x27;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span></span><br><span class="line">       res.json()</span><br><span class="line">     )</span><br><span class="line">   )</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (isLoading) <span class="keyword">return</span> <span class="string">&#x27;Loading...&#x27;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (error) <span class="keyword">return</span> <span class="string">&#x27;An error has occurred: &#x27;</span> + error.message</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> (</span><br><span class="line">     &lt;div&gt;</span><br><span class="line">       &lt;h1&gt;&#123;data.name&#125;&lt;/h1&gt;</span><br><span class="line">       &lt;p&gt;&#123;data.description&#125;&lt;/p&gt;</span><br><span class="line">       &lt;strong&gt;👀 &#123;data.subscribers_count&#125;&lt;/strong&gt;&#123;<span class="string">&#x27; &#x27;</span>&#125;</span><br><span class="line">       &lt;strong&gt;✨ &#123;data.stargazers_count&#125;&lt;/strong&gt;&#123;<span class="string">&#x27; &#x27;</span>&#125;</span><br><span class="line">       &lt;strong&gt;🍴 &#123;data.forks_count&#125;&lt;/strong&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">   )</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>相比于一般的在组件中发起请求，React Query通过 <code>useQuery</code> 帮我们自然而然的生成了一个请求中间层。</p><p>原始:</p><p><img src="/images/react-query/2.png"></p><p>使用React Query后:</p><p><img src="/images/react-query/3.png"></p><p>而从单个请求来看的话，似乎增加了这一层以后没有任何的收益</p><p>那么我们拓展一下呢?</p><p><img src="/images/react-query/4.png"></p><p>可以看到，通过一个中间的缓存层，我们可以把相同的组件同时发出的多个同样的请求合并成一个发送给服务端，这样对于服务端来说请求压力会减少很多。</p><p>但是，我们完全可以把相同的请求放在同一个地方，然后把结果传递给使用的组件，那么是不是就完全不需要面对这种情况了呢？</p><p>是的，我们在大部分时间做的就是这样的方式，很少会出现相同的请求发送很多遍的情况。但是这也是我要说的React Query通过中间层带给我们的最大的意义 —— 解耦。</p><p>想象一下，我们有以下这样的组件:</p><p><img src="/images/react-query/5.png"></p><p>分别代表了用户信息组件，用户简单信息列表项，以及他们组合的产物。他们都需要获取最新的用户信息，用的是同样的接口。我们分别叫他们组件A，组件B和组件C吧。</p><p>当我们单独处理组件A和组件B时，我们只需要在组件挂载阶段去获取远程的数据即可。这非常容易，但如何我们将他们组件使用以后，一些问题就会出现了：我们不可能让他发起两次同样的请求，按照我们之前的做法，我们就需要在组件B渲染的阶段把数据拿到，然后在组件A弹出的时候将组件B获取到的数据传递进去。</p><p>这很容易，但是这也带来了上下文。即组件A既有自己获取数据的逻辑，又有根据上下文获取数据的逻辑。这种方式的数据管理是复杂的，难以维护的。</p><p>而通过React Query带来的缓存层，我们就无需关心请求的细节，每个组件都可以只关心自己的事情而无需关心上下文。所有的请求将会由一个统一的缓冲层来帮助我们统一管理请求数据。</p><h2 id="0x01-数据活性"><a href="#0x01-数据活性" class="headerlink" title="0x01 数据活性"></a>0x01 数据活性</h2><p>大家都知道，数据是有时效性的。在我们的HTTP协议中带来了一个新鲜度的概念，即在每次请求中标注一下一个请求的时效性，就类似食品的保质期一样。相比于缓存，我更加喜欢用数据活性这个概念，因为数据是有生命周期的。</p><p>在时效性有效的范围内，我们可以认为请求的资源是“新鲜的”，那么我们就可以在下次发送网络请求的时候不再向远程发送请求，而是使用本地记录的上一条结果。而如果请求的时间过了时效范围，那么这个请求将会被标记为“陈旧的”，那么再发起新的请求以后，就会真实的向服务器发送网络请求。这就是我们一般意义上的缓存。</p><p>而在<code>service worker</code>中, 有一种新的网络缓存管理概念，名为: <code>Stale-while-revalidate</code></p><p>其意义上在于，在<code>service worker</code>代理网络请求的时候，为了确保用户每次都能非常快速的加载页面，sw会第一时间去从本地缓存中拿取数据返回给页面，但是同时在后台发送真实的网络请求去获取最新的内容并更新本地缓存。这样用户不会第一时间拿到最新的数据，而是以最快的速度打开页面，而在后台请求以确保下次的内容更新。</p><p><img src="/images/react-query/6.png"></p><blockquote><p>更多详细说明: <a href="https://developer.chrome.com/docs/workbox/caching-strategies-overview/#stale-while-revalidate">https://developer.chrome.com/docs/workbox/caching-strategies-overview/#stale-while-revalidate</a></p></blockquote><p>而<code>React Query</code> 在这方面做的更加好，相比于<code>Promise</code>的一次性的数据获取，<code>hooks</code>带来了允许主动发起的多次数据更新。这意味着<code>React Query</code>能做到更加复杂的数据更新策略。</p><p><img src="/images/react-query/7.png"></p><p>上图则是<code>React Query</code>在进行“陈旧”数据的处理方式，如果一条请求被标记为“陈旧”而不是“过期”，那么在 <code>hooks</code> 中，<code>React Query</code>会第一时间将旧的数据返回给前端，与此同时再向服务器发送网络请求，当网络请求的结果回来后，通过<code>hooks</code> 再一次更新数据。</p><p>对于标记的“陈旧”与“过期”的概念，就是在请求的时候定义的“slateTime” 与 “cacheTime”，区别就在于如果之前请求过，是否要第一时间返回到前端，然后二次更新最新的数据，还是选择直接等着网络的返回。可以看得出非常精确了。</p><p>同时，如果一个组件挂载后很长时间不更新，但是新的组件被更新数据以后，旧的组件也会同样更新保持数据一致性，用户在管理数据方面就没有任何压力了。</p><h2 id="0x02-不仅仅是-react-与-query"><a href="#0x02-不仅仅是-react-与-query" class="headerlink" title="0x02 不仅仅是 react 与 query"></a>0x02 不仅仅是 react 与 query</h2><p>坦白的讲，<code>React Query</code>的名字起的并不好。在我上面的讲述中大家可以发现，React Query做的其实并不是query的事情而是cache的事情，我们可以在其中管理任何的异步操作，比如一个高CPU的算法，比如一个与web worker的通讯结果。</p><p>另一方面，<code>React Query</code> 与 <code>React</code> 的关系在于他通过 react hooks 实现的数据响应式更新。然而其实什么方式并不重要，如果我们做一些抽象是不是能够作用到任何的数据驱动的框架中呢？事实上新版的<code>React Query</code> 也是这么做的。</p><p><img src="/images/react-query/8.png"></p><p>可以看到在新的结构中，拆分了内核包与各种框架的适配层。</p><p>这就是为什么我说他的名字起的并不好，具有很强的误导性。react query，即跟react无关，又与query没有直接关系。只能说历史原因难以修改，这也是为什么我在平时的工作中一直强调尽可能的减少技术负债，因为有的技术负债一旦背上可能就永远摆脱不掉了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> React Query </tag>
            
            <tag> 状态管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小即是美 —— 简约而不简单的状态管理工具zustand</title>
      <link href="/posts/14043fbf/"/>
      <url>/posts/14043fbf/</url>
      
        <content type="html"><![CDATA[<p>我用过或了解过前端业界大部分流行的状态管理库。他们有的很复杂，有的很简单。有的用了一些深度改造的手段来优化细节，有的则是平铺直叙的告诉所有使用者发生了变化。在技术方案诡异多变与层出不穷的当下，只有一个状态管理库让我深深着迷，她极度精简到让我觉得不能再简单了，但是她也足够完备到应对任何场景。而我就一直在追究这样的一个宛如艺术品一样的状态管理库，经过一段时间的使用，我很确定她就是我的梦中情库。</p><p>她的名字叫 <code>zustand</code></p><p>Github: <a href="https://github.com/pmndrs/zustand">https://github.com/pmndrs/zustand</a></p><h2 id="极简定义"><a href="#极简定义" class="headerlink" title="极简定义"></a>极简定义</h2><p>我们先看看其他业界的状态管理库的使用方式:</p><p>以比较主流的<code>redux</code>和<code>mobx</code>为例, 这里直接复制了官网的最小示例。</p><p><strong>redux(@reduxjs/toolkit)</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSlice, configureStore &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counterSlice = createSlice(&#123;</span><br><span class="line">  name: <span class="string">&quot;counter&quot;</span>,</span><br><span class="line">  initialState: &#123;</span><br><span class="line">    value: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  reducers: &#123;</span><br><span class="line">    incremented: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.value += <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    decremented: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.value -= <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; incremented, decremented &#125; = counterSlice.actions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = configureStore(&#123;</span><br><span class="line">  reducer: counterSlice.reducer,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">store.subscribe(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(store.getState()));</span><br><span class="line">store.dispatch(incremented());</span><br><span class="line">store.dispatch(incremented());</span><br><span class="line">store.dispatch(decremented());</span><br></pre></td></tr></table></figure><p><strong>mobx</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; makeAutoObservable &#125; <span class="keyword">from</span> <span class="string">&quot;mobx&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; observer &#125; <span class="keyword">from</span> <span class="string">&quot;mobx-react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timer</span> </span>&#123;</span><br><span class="line">  secondsPassed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    makeAutoObservable(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">increase</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.secondsPassed += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">reset</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.secondsPassed = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myTimer = <span class="keyword">new</span> Timer();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Build a &quot;user interface&quot; that uses the observable state.</span></span><br><span class="line"><span class="keyword">const</span> TimerView = observer(<span class="function">(<span class="params">&#123; timer &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;button onClick=&#123;<span class="function">() =&gt;</span> timer.reset()&#125;&gt;</span><br><span class="line">    Seconds passed: &#123;timer.secondsPassed&#125;</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">TimerView</span> <span class="attr">timer</span>=<span class="string">&#123;myTimer&#125;</span> /&gt;</span></span>, <span class="built_in">document</span>.body);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update the &#x27;Seconds passed: X&#x27; text every second.</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  myTimer.increase();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>在 <code>redux</code> 中，我们需要先构建 <code>reducer</code> 来记录如何处理状态，然后根据<code>reducer</code>构建一个<code>store</code>。取值是通过<code>store</code>来获取，修改则需要通过 基于<code>reducer</code>一一对应的<code>action</code>来修改。<br>这样就确保了数据流永远是单向流动的: 即 <code>UI -&gt; action -&gt; reducer -&gt; state -&gt; UI</code> 这样的过程。其响应式的实现就是在执行<code>action -&gt; reducer</code>的过程中收集到了变化，然后通知所有订阅这个<code>store</code>的所有人。然后订阅者再通过名为<code>selector</code>的函数来比对变更决定自身是否要更新。</p><p>如:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  useSelector(<span class="function"><span class="params">state</span> =&gt;</span> state.count.value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再来看看另一派的实现: <code>mobx</code> 定义了一个 <code>class</code> 作为存储数据的<code>store</code>, 而对于数据的任何修改都是用一种类似原生的方式 —— 直接赋值来实现的。即既可以直接访问<code>store</code>中修改里面的值也可以通过调用<code>store</code>暴露出的方法来修改数据。而数据的取值也是直接通过最简单的数据访问来实现的。<br>看上去非常美好，但是这是通过一些”黑魔法”来实现的，当执行<code>makeAutoObservable(this)</code>的那一刻，原来的成员变量已经不是原来的数据了，已经变成了由<code>mobx</code>包裹了一层实现的 <strong>可观察对象</strong>, 即这些对象的赋值与取值都不是原来的含义了。这也就是为什么<code>mobx</code>可以实现<code>reactive</code>响应式的原因。</p><p>这时候我们再来看看<code>zustand</code>是怎么做的:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> create <span class="keyword">from</span> <span class="string">&#x27;zustand&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useBearStore = create(<span class="function">(<span class="params">set</span>) =&gt;</span> (&#123;</span><br><span class="line">  bears: <span class="number">0</span>,</span><br><span class="line">  increasePopulation: <span class="function">() =&gt;</span> set(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123; <span class="attr">bears</span>: state.bears + <span class="number">1</span> &#125;)),</span><br><span class="line">  removeAllBears: <span class="function">() =&gt;</span> set(&#123; <span class="attr">bears</span>: <span class="number">0</span> &#125;),</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BearCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> bears = useBearStore(<span class="function">(<span class="params">state</span>) =&gt;</span> state.bears)</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;bears&#125; around here ...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Controls</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> increasePopulation = useBearStore(<span class="function">(<span class="params">state</span>) =&gt;</span> state.increasePopulation)</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increasePopulation&#125;</span>&gt;</span>one up<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是的，只需要简单的一个对象就定义了一个<code>store</code>，不需要特意去区分是<code>state</code>还是<code>action</code>, 也不需要特意去构造一个 <code>class</code> 来做的非常臃肿。<code>zustand</code> 就是用最简单的设计去做一些事情，甚至其核心代码只有<code>500</code>行不到。</p><blockquote><p>redux本身最核心的代码只有200行左右，但是如果要在react中使用需要加上<code>redux-react</code>和<code>@reduxjs/toolkit</code> 就远远超过了</p></blockquote><p>另外可以注意到的是，<code>zustand</code>天生设计了一种场景就是<code>react</code>环境。其他”有野心”的状态管理库往往是从 <code>vanilla</code> 环境(纯js环境)开始设计，然后增加了对<code>react</code>的支持，可能后续还会增加其他框架的支持。但是<code>zustand</code>则不是，天生支持了<code>react</code>环境，然后基于<code>react</code>环境再衍生出<code>vanilla</code>环境的支持。</p><p>那么很多人就会好奇，既然都支持<code>vanilla</code>和<code>react</code>，那么从哪个环境开始设计有什么区别么？</p><p>答案是有的，从不同的环境开始会从底层设计上就带来很大的偏差，最后落地到使用方来说就是基本使用需要调用的代码、运行时以及复杂度的差异。在我过去的开发经验告诉我这样是正确的，我几乎没有看见过哪个库能同时在多个框架中都能如鱼得水的。不同的框架会有不同的生态，而哪些特有的生态则是最贴合的，如<code>redux</code>之于<code>react</code>，<code>pinia</code>之于<code>vue</code>, <code>rxjs</code>之于<code>Angular</code>。很少有哪个库能够在多个环境中”讨好”的。因此<code>zustand</code>就一种非常聪明的做法，专注于一点非常重要。</p><p>那么回到<code>zustand</code>的基本使用，我们可以看到<code>zustand</code>通过<code>create</code>导出的是一个 <code>react hook</code>, 通过这个<code>hook</code> 我们可以直接拿到store里面的<code>state</code>和<code>action</code>，非常类似于<code>redux</code>的<code>useSelector</code>。不同的是不需要<code>dispatch</code>来推送<code>action</code>, 也没有任何模板代码，数据类型天生区分了<code>state</code>和<code>action</code>, 只需要最简单的调用即可。</p><p>相比于<code>mobx</code>, 也没有什么”黑魔法”, 简单而不容易出错。而且也不像<code>mobx</code>会因为依赖<code>class</code>实现的<code>store</code>而引入天然的问题(比如作为数据store不应该有生命周期，而<code>class</code>的<code>constructor</code>天生就成为了生命周期的一种)</p><blockquote><p>人的恐惧往往来自未知，<code>mobx</code> 的对象就是这样的一个黑盒。这就是我不怎么喜欢 <code>mobx</code>的原因</p></blockquote><h2 id="那么，怎么应用到所有场景呢"><a href="#那么，怎么应用到所有场景呢" class="headerlink" title="那么，怎么应用到所有场景呢"></a>那么，怎么应用到所有场景呢</h2><p><code>zustand</code>是一种非常简单的实现，简单到让人觉得是不是总有一些场合是无法覆盖到的。而这就是我觉得<code>zustand</code>是一件艺术品的原因。因为他总有巧妙的方式来不失优雅的适配任何我想要的场景。</p><h3 id="在纯js中调用-可以"><a href="#在纯js中调用-可以" class="headerlink" title="在纯js中调用? 可以"></a>在纯js中调用? 可以</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useBearStore.getState()</span><br></pre></td></tr></table></figure><p>通过<code>getState</code>方式就可以获取最新的状态，在使用的过程中需要注意这是一个函数，目的是在运行时中获取到最新的值。里面的数据不是<code>reactive</code>的。</p><h3 id="想要有作用域-可以"><a href="#想要有作用域-可以" class="headerlink" title="想要有作用域? 可以"></a>想要有作用域? 可以</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createContext, useContext &#125; from &#39;react&#39;</span><br><span class="line">import &#123; createStore, useStore &#125; from &#39;zustand&#39;</span><br><span class="line"></span><br><span class="line">const store &#x3D; createStore(...) &#x2F;&#x2F; vanilla store without hooks</span><br><span class="line"></span><br><span class="line">const StoreContext &#x3D; createContext()</span><br><span class="line"></span><br><span class="line">const App &#x3D; () &#x3D;&gt; (</span><br><span class="line">  &lt;StoreContext.Provider value&#x3D;&#123;store&#125;&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;&#x2F;StoreContext.Provider&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">const Component &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const store &#x3D; useContext(StoreContext)</span><br><span class="line">  const slice &#x3D; useStore(store, selector)</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>与原生 <code>react</code> 的 <code>Context</code>结合就能实现作用域的效果。并且进一步将<code>store</code>的创建合并到组件中，也能获得组件相关的生命周期。</p><h3 id="想要在不同的store中相互调用？可以"><a href="#想要在不同的store中相互调用？可以" class="headerlink" title="想要在不同的store中相互调用？可以"></a>想要在不同的store中相互调用？可以</h3><p>通过<code>useBearStore.getState()</code> 就能实现<code>store</code>间相互调用。当然需要注意管理好<code>store</code>间的依赖关系。</p><h3 id="想要中间件-没问题"><a href="#想要中间件-没问题" class="headerlink" title="想要中间件? 没问题"></a>想要中间件? 没问题</h3><p><code>zustand</code> 的库自带了一些中间件，其实现也非常简单。参考<code>zustand/middleware</code>的实现可以学习如何制作<code>zustand</code>的中间件。</p><h3 id="想要处理异步action？没问题"><a href="#想要处理异步action？没问题" class="headerlink" title="想要处理异步action？没问题"></a>想要处理异步action？没问题</h3><p>在<code>redux</code>早期，想要做异步<code>action</code>是非常头疼的事情，而<code>rtk</code>出来后会稍微好一点，但是也很麻烦。而在<code>zustand</code>，可以非常简单</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> useFishStore = create(<span class="function">(<span class="params">set</span>) =&gt;</span> (&#123;</span><br><span class="line">  fishies: &#123;&#125;,</span><br><span class="line">  fetch: <span class="keyword">async</span> (pond) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(pond)</span><br><span class="line">    set(&#123; <span class="attr">fishies</span>: <span class="keyword">await</span> response.json() &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h2 id="不足与思考"><a href="#不足与思考" class="headerlink" title="不足与思考"></a>不足与思考</h2><p>再好的设计如果不加限制也会出现 <code>shit code</code>。想要把 <code>zustand</code> 这样小巧而精美的库用好而不是用坏需要一定的技术管理能力。盲目的去使用新的技术并不一定能给技术团队带来一些收益，但是可以带来新的思考。</p><p>另一方面，<code>zustand</code> 是一种全局<code>store</code>的设计，不能说这种设计不好，但是也意味着带来了一种比较经典的技术难题，即依赖管理。当项目中出现相互依赖的时候，如何管理，怎么确保在后续的维护中不构成污染，在调试时不会引入噪音。这是我认为所有的<code>全局store</code>都会面临的问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> typescript </tag>
            
            <tag> 状态管理 </tag>
            
            <tag> zustand </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈论从把多项目合并成一个项目中获得的收益</title>
      <link href="/posts/2674f04a/"/>
      <url>/posts/2674f04a/</url>
      
        <content type="html"><![CDATA[<p>在开源社区流行着这样两种项目管理的方式:</p><ul><li>多repo仓库管理 (multirepos)</li><li>单repo仓库但是多包管理 (monorepos)</li></ul><p>在很早的时候, 我的项目 <a href="https://github.com/msgbyte/tailchat">tailchat</a> 是一个典型的多repo管理的项目。</p><p>我创建了一个组织，组织下有多个<code>tailchat</code>相关的项目:</p><ul><li>tailchat</li><li>tailchat-server</li><li>tailchat-website</li><li>tailchat-cli</li><li>tailchat-rss-bot</li><li>tailchat-archive</li><li>tailchat-docs</li><li>tailchat-meeting</li><li>…</li></ul><p>多repo的好处在于绝对的隔离，独立的发布机制，独立的仓库上下文(issues/prs)。但是我在长期的时候中逐步发现了多repo管理上的问题，以至于我抽出了时间将其合并成了一个项目。</p><p>接下来我会说说我遇到的问题。</p><h2 id="多repo遇到的问题"><a href="#多repo遇到的问题" class="headerlink" title="多repo遇到的问题"></a>多repo遇到的问题</h2><h3 id="精力上的分散"><a href="#精力上的分散" class="headerlink" title="精力上的分散"></a>精力上的分散</h3><p>多repo意味着要同时管理多个项目，一些边缘的repo甚至会长久的失去维护。对于开源项目来说失去维护意味着死亡。而开源项目也往往会意味着管理人员精力上的分散，不论是企业支持的开源项目来说还是个人支持的开源项目来说。</p><p>比如<code>react</code>社区知名的UI组件库 <code>antd</code>。作为一个热门库来说它一直保留着非常高的活跃度，也不缺少维护人员。但是他的基础库<code>rc-xxx</code>却很少有人去处理pr。因为摊子铺的很大，十几个小的组件库分成不同的repo，就意味着开发组的成员很难分配精力在这些改动并不频繁的仓库上面。</p><h3 id="发版与分发上的割裂"><a href="#发版与分发上的割裂" class="headerlink" title="发版与分发上的割裂"></a>发版与分发上的割裂</h3><p>以最基本的前后端分库来看(<code>client</code>/<code>server</code>)，两个repo意味着两套发版流程(当然可以说通过第三方平台把他们组合在一起，这个我们暂且不讨论)。同时意味着你不得不打两个tag，发两个release，以及跑两个CICD流程。如果你有一个website项目(文档)。你不适合放在任意一个<code>client</code>/<code>server</code> 仓库。这不得不造成你必须再创建第三个项目。</p><p>这三个项目从逻辑上来看确实是没有任何关系，但是在业务上来看却是耦合在一起的！这三者的同步就意味着需要花费维护者额外的精力，也意味着风险。</p><h4 id="产物困难"><a href="#产物困难" class="headerlink" title="产物困难"></a>产物困难</h4><p>另外就是项目的产物，多repo意味着多产物。多产物也意味着用户需要更多的上下文，对于不了解或者不愿意了解的用户来说这就是额外的错误可能以及精力成本。额外的入门门槛会极大的打击用户的使用信心。</p><p>一个简单的例子就是，作为用户更加希望只需要部署一个应用就能完成一切。而一个需要 <strong>前端+后端</strong> 的项目意味着额外的学习成本，不友好。</p><h3 id="基本配置不通用"><a href="#基本配置不通用" class="headerlink" title="基本配置不通用"></a>基本配置不通用</h3><p>多repo的管理机制还有一个常见的问题就是项目的配置没有办法通用。比如 <code>Tailchat</code> 项目是使用 <code>typescript</code> 来进行开发的，还需要一些自动化工具比如代码格式化，代码检查，git hooks等。那么一个项目需要配套: <code>tsconfig.json</code>, <code>commitlint</code>, <code>prettier</code>, <code>eslint</code>, <code>lintstage</code>, <code>editorconfig</code>…</p><p>多个项目就要配多套配置。如果改了一处需要把所有的项目都改一遍。想想就简直是一场噩梦！</p><p>当然可以产出一套工具专门管理相关的配置，但是这也意味着额外的精力成本，同时也引出了另一个问题，那就是改动的滞后性 —— 改动的配置没有办法立即产生效果，必须提交代码到这个工具的仓库 -&gt; 发布 -&gt; 同步到所有相关的仓库中。</p><p>如果说我们花了太多的时间在这种事情上，那我可以认为，这个项目的<strong>DX</strong>(Developer Experience) 是失败的。</p><h3 id="贡献的积极性"><a href="#贡献的积极性" class="headerlink" title="贡献的积极性"></a>贡献的积极性</h3><p>另外一个比较隐晦的问题在于，对于开源项目来说，多个包往往也会打击潜在贡献者的贡献积极性，贡献者往往期望往主库去提交代码，而多库意味着贡献的分散化。</p><h2 id="使用-monorepos-结构后我获得的收益"><a href="#使用-monorepos-结构后我获得的收益" class="headerlink" title="使用 monorepos 结构后我获得的收益"></a>使用 monorepos 结构后我获得的收益</h2><p>自从将原来的项目结构修改为monorepo以后，写代码都舒服了很多。其中立即能够获得的收益包括但不限于:</p><ul><li>依赖缓存复用</li><li>一套配置所有项目受益</li><li>统一管理所有 action 和 action env</li><li>产物统一，只需要输出一个docker镜像<ul><li>用户也反馈部署更加方便了</li></ul></li><li>统一版本号，不会再出现前端一个版本后端一个版本的情况了</li><li>打开项目更加方便了，不需要打开多个repo</li><li>只需要关注一个项目的 github webhook 就可以订阅所有动态</li></ul><p>同时，其他一些可能的操作也变得有可能了，比如：</p><ul><li>编写脚本，从客户端与服务端的代码中收集信息自动生成文档。</li><li>客户端根据服务端代码自动生成网络请求代码</li><li>…</li></ul><p>当然，有受益就有付出，<code>monorepos</code> 目前给我带来的问题有:</p><ul><li><code>pnpm install</code>的时间更长了，因为需要安装/编译的内容更多了</li><li><code>docker build</code>的时间更长了，因为每次打包都需要同时编译前端和后端的项目，而不管有没有发生修改。</li><li><code>node_modules</code>的内容过多导致在<code>tree viewer</code>中翻页会比较困难。</li></ul><p>我觉得这些问题都是可以接受的，相比收益来说这点付出几乎可以说是忽略不计。当然这只能说是个人开发者或者小团队开发能够有很大收益的方式，对于大型团队来说，<code>monorepos</code>的方式会带来很高的沟通成本和管理成本。只能说存在即合理，作为开发人员我们需要找到适合自己的当前状况的最优解。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Tailchat </tag>
            
            <tag> 项目管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack 打包分析 —— 通过分析工具优化体积问题</title>
      <link href="/posts/15675e42/"/>
      <url>/posts/15675e42/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>众所周知现在前端代码的体积越来越大，虽然网速也上去了但是还是跟不上业务膨胀的速度。而<code>vite</code>还比较年轻，大部分的项目依旧还在使用<code>webpack</code>进行打包。</p><p>而另一方面<code>webpack</code>也确实在精细优化上有足够的优势。在对代码结构做深度分析与优化的时候也有非常不可替代的作用。</p><h2 id="开始优化"><a href="#开始优化" class="headerlink" title="开始优化"></a>开始优化</h2><p>而我的项目也非常久违的没有观察过打包内容了，因此我决定久违的看一眼。</p><p>在优化代码之前，我们需要找到问题。通过官方推荐的 <a href="https://github.com/webpack-contrib/webpack-bundle-analyzer">webpack-bundle-analyzer</a> 来输出打包体积图</p><p>用法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (process.env.ANALYSIS) &#123; <span class="comment">// 任意环境变量, 确保仅正常打包不输出分析报告</span></span><br><span class="line">  plugins.push(</span><br><span class="line">    <span class="keyword">new</span> BundleAnalyzerPlugin(&#123;</span><br><span class="line">      analyzerMode: <span class="string">&#x27;static&#x27;</span>, <span class="comment">// 将结果输出为html文件</span></span><br><span class="line">      openAnalyzer: <span class="literal">true</span>, <span class="comment">// 打包完成后打开页面</span></span><br><span class="line">    &#125;) <span class="keyword">as</span> any,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打包后自动打开网页展示如下内容:</p><p><img src="/images/webpack/1.png"></p><p>一眼就看到三个大块的包，其中 <code>all.json</code> 和 <code>twitter.json</code> 两个包都是懒加载的，可以理解，但是为什么 <code>vendors</code> 中的 <code>lodash.js</code> 这么大？我一眼看出你小子不对劲！</p><p><img src="/images/webpack/2.png"></p><p>放大看一眼，好家伙，一个包占用500多KB, 比<code>antd</code>还要高。而且 <code>lodash</code> 中并不是所有的函数都会被使用的，不应该整个包被打进来。</p><p>我们用 <a href="https://github.com/moonrailgun/webpack-stats-viewer">webpack-stats-viewer-plugin</a> 来对其进行进一步分析</p><p>用法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (process.env.ANALYSIS) &#123; <span class="comment">// 任意环境变量, 确保仅正常打包不输出分析报告</span></span><br><span class="line">  plugins.push(</span><br><span class="line">    <span class="keyword">new</span> BundleAnalyzerPlugin(&#123;</span><br><span class="line">      analyzerMode: <span class="string">&#x27;static&#x27;</span>, <span class="comment">// 将结果输出为html文件</span></span><br><span class="line">      openAnalyzer: <span class="literal">true</span>, <span class="comment">// 打包完成后打开页面</span></span><br><span class="line">    &#125;) <span class="keyword">as</span> any,</span><br><span class="line">    <span class="keyword">new</span> WebpackStatsViewerPlugin(&#123;</span><br><span class="line">      open: <span class="literal">true</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到异常的那个 <code>chunk</code></p><p><img src="/images/webpack/3.png"></p><p>点开右侧的 <code>modules</code> 中找到 <code>lodash</code></p><p><img src="/images/webpack/4.png"></p><p>通过 <a href="https://github.com/moonrailgun/webpack-stats-viewer">webpack-stats-viewer-plugin</a> 的进一步分析我们可以很清晰的看到这个包是被 <code>react-fastify-form</code> 引入的。</p><p>我们看一下源码:</p><p><img src="/images/webpack/5.png"></p><p>果然，在代码中其他地方都是使用 <code>lodash/xxxx</code> 引入的，而在划线这行却直接把整个包引入了进来(可能是因为)，而<code>lodash</code>这个包本身不支持<code>esmodule</code>, 因此导致lodash整个包被打入，白白多占了500多KB的依赖。要知道总共也就2MB!</p><p>那么找到原因就好修了，直接修改源码 -&gt; 重新发布 -&gt; 更新依赖一气呵成。</p><h2 id="验收成果"><a href="#验收成果" class="headerlink" title="验收成果"></a>验收成果</h2><p>最后让我们看一下修复好的成果：</p><p><img src="/images/webpack/6.png"></p><p>瞬间少了一大块体积。可见能够利用好工具可以帮助我们更好的对 <code>webpack</code> 的产物进行优化。</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> webpack </tag>
            
            <tag> 代码优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>元编程快速入门</title>
      <link href="/posts/8aa07df9/"/>
      <url>/posts/8aa07df9/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是元编程-Metaprogramming"><a href="#什么是元编程-Metaprogramming" class="headerlink" title="什么是元编程(Metaprogramming)"></a>什么是元编程(Metaprogramming)</h2><p>一言以蔽之，元编程就是通过代码实现代码的一种方式。</p><p>在一般情况下，我们写的代码是直接对应的业务逻辑的。在一定程度上可以说是”所见即所得”的。这种代码是最符合直觉的。但是在某些情况下，正常的代码会显得不是非常高效。因此我们需要通过用代码来生成代码的方式来开发，这就是我们所说的元编程。</p><p>为了更好的理解元编程，我们来用一个非常简单的例子来说明一下元编程:</p><p>我们需要生成一些假的电话号码，用一般的代码可能会是这样实现的:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mobilePool = [<span class="string">&quot;18012345678&quot;</span>, <span class="string">&quot;18112345678&quot;</span>, <span class="string">&quot;18812345678&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomMobileNum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> len = mobilePool.length;</span><br><span class="line">  <span class="keyword">return</span> mobilePool[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * len)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不论这个函数如何调用，都是从一个有限池(代码)中获取的某一项内容。但是实际上这种方式是比较受限的，因此以元编程的思想来说，我们可能会写出这样的代码:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mobilePrefix = [<span class="string">&quot;180&quot;</span>, <span class="string">&quot;181&quot;</span>, <span class="string">&quot;188&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomMobileNum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> len = mobilePrefix.length;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    mobilePrefix[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * len)] +</span><br><span class="line">    <span class="built_in">Math</span>.random().toString().substr(<span class="number">2</span>, <span class="number">8</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即我们设定一个规则: 一个手机号是以 <code>180,181,188</code> 开始的, 然后后面跟上 8 位任意数字的，均视为一个合法的手机号。</p><p>其元信息为: <code>手机号是一个以固定3位开头加8位任意数字组合而成的11位数字</code>。</p><p>那么我们就可以根据这种固定的规则生成无限(相对手写)种可能的手机号码。</p><p>当然，相信大家都能写出代码。元编程也不是什么比较新鲜的东西，大家可能都写过类似的东西。元编程的思想对于我们来说也是一种必须掌握的编程能力。</p><h2 id="元编程能做什么"><a href="#元编程能做什么" class="headerlink" title="元编程能做什么"></a>元编程能做什么</h2><p>当然上面的 case 过于简单，甚至可能都不能算得上元编程。元编程的概念在很多比较底层、基础的场景是非常常见的概念。</p><p>比较常见的场景是:</p><ul><li>编程语言(比如 typescript, coffee)</li><li>框架语言(比如 jsx, vue-template 等)</li><li>低代码/无代码平台</li><li>后端 CRUD 框架(比如 graphql)</li><li>各类 linter, formatter, parser, transformer, generator.</li><li>…</li></ul><p>在平时开发中，我们常用的 <code>antd</code> 的 <code>Table/Column</code> 这种形式的代码也是一种元编程方式, 而 <code>Form</code> 则是普通的编程方式</p><h2 id="如何实现元编程"><a href="#如何实现元编程" class="headerlink" title="如何实现元编程"></a>如何实现元编程</h2><p>我们通过来写一个元编程的表单来简单说一下元编程的实现。</p><p>在普通的表单中，我们的组件可能是以下这样的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">      &lt;input name&#x3D;&quot;username&quot; required &#x2F;&gt;</span><br><span class="line">      &lt;input name&#x3D;&quot;password&quot; type&#x3D;&quot;password&quot; required &#x2F;&gt;</span><br><span class="line">      &lt;textarea name&#x3D;&quot;desc&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;button type&#x3D;&quot;submit&quot;&gt;Submit&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个简单的用户注册表单, 为了多样性我还增加了一个<code>desc</code>属性用于描述用户的记录。</p><p>好的，那么如果用元编程的思想去看待这个问题呢？我们把 “渲染” 和 “数据” 分开考虑:</p><ul><li>这个表单有以下字段:<ul><li>username</li><li>password</li><li>desc</li></ul></li><li>一个表单可能有以下类型:<ul><li>input</li><li>password</li><li>textarea</li></ul></li></ul><p>然后通过组装可以变成一个数据结构:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> meta = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">&quot;username&quot;</span>,</span><br><span class="line">    type: <span class="string">&quot;input&quot;</span>,</span><br><span class="line">    required: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">&quot;password&quot;</span>,</span><br><span class="line">    type: <span class="string">&quot;password&quot;</span>,</span><br><span class="line">    required: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">&quot;desc&quot;</span>,</span><br><span class="line">    type: <span class="string">&quot;textarea&quot;</span>,</span><br><span class="line">    required: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>这个就是一个元数据，用于表达想要去渲染的界面是怎么样的一个结构。</p><p>当然，仅仅有数据还是不够的。因此我们还需要一个通用的组件来将这个元数据转换成实际的渲染视图。</p><p>那么这个组件的接口应该是这样的</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;MetaForm meta=&#123;meta&#125; onSubmit=&#123;handleSubmit&#125; /&gt;</span><br></pre></td></tr></table></figure><p>这个组件接受一个<code>meta</code>对象用于”填充”内容，返回一个点击提交按钮的回调来告知外部</p><p>我们来实现一下:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MetaForm = <span class="function">(<span class="params">&#123; meta, onSubmit &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> formRef = useRef();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;form</span><br><span class="line">      ref=&#123;formRef&#125;</span><br><span class="line">      onSubmit=&#123;<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line"></span><br><span class="line">        onSubmit(</span><br><span class="line">          meta.reduce(</span><br><span class="line">            (obj, <span class="attr">item</span>: any) =&gt; (&#123;</span><br><span class="line">              ...obj,</span><br><span class="line">              [item.name]: e.currentTarget.elements[item.name].value,</span><br><span class="line">            &#125;),</span><br><span class="line">            &#123;&#125;</span><br><span class="line">          )</span><br><span class="line">        );</span><br><span class="line">      &#125;&#125;</span><br><span class="line">    &gt;</span><br><span class="line">      &#123;meta.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.type === <span class="string">&quot;input&quot;</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&#123;item.name&#125;</span> <span class="attr">required</span>=<span class="string">&#123;item.required&#125;</span> /&gt;</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (item.type === <span class="string">&quot;password&quot;</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> (</span><br><span class="line">            &lt;input name=&#123;item.name&#125; type=<span class="string">&quot;password&quot;</span> required=&#123;item.required&#125; /&gt;</span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (item.type === <span class="string">&quot;textarea&quot;</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&#123;item.name&#125;</span> <span class="attr">required</span>=<span class="string">&#123;item.required&#125;</span> /&gt;</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Unknown Type<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">      &#125;)&#125;</span><br><span class="line"></span><br><span class="line">      &lt;button type=<span class="string">&quot;submit&quot;</span>&gt;Submit&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以上就是一个非常简单的元编程的表单组件，后面想要的话还可以自定义<code>type</code>实现, 增加更多的属性, 增加校验规则等等。。而在一个完善的元编程的架构下，开发是非常迅速的。</p><p>作为开发，我们只要能够掌握元编程的思想，对我们对于开发的架构思想是非常有帮助的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> meta program </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k3s安装小记</title>
      <link href="/posts/32dfd7d0/"/>
      <url>/posts/32dfd7d0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://k3s.io/">官方网站</a></p><h2 id="外网访问k3s集群"><a href="#外网访问k3s集群" class="headerlink" title="外网访问k3s集群"></a>外网访问k3s集群</h2><p>可以通过 <code>/etc/rancher/k3s/k3s.yaml</code> 获取集群链接配置，将里面的内网ip改为公网ip即可</p><p>另外对于外网访问来说，需要在k3s中声明外网来源，以允许链接。可以在启动的默认配置中修改</p><p>参考:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">write-kubeconfig-mode:</span> <span class="string">&quot;0644&quot;</span></span><br><span class="line"><span class="attr">tls-san:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;foo.local&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>相关文档: <a href="https://docs.rancher.cn/docs/k3s/installation/install-options/_index/#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">https://docs.rancher.cn/docs/k3s/installation/install-options/_index/#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6</a></p></blockquote><p>修改完毕无需重启即可生效</p><h2 id="释放80和443端口"><a href="#释放80和443端口" class="headerlink" title="释放80和443端口"></a>释放80和443端口</h2><p><code>k3s</code>默认会安装<code>traefik</code>来替代<code>k8s</code>的<code>ingress</code>来代理流量，此时默认情况会占据系统的 <code>80</code> 和 <code>443</code> 端口。</p><blockquote><p>因为通过iptables来转发流量所以lsof不会找到该应用，因为接管80/443端口的是service而不是traefik这个pod</p></blockquote><p>如果不想被占用的话需要修改配置以释放这两个端口。</p><p>详情见这个 <a href="https://github.com/k3s-io/k3s/issues/2403">issue</a></p><p>在配置中禁用参考配置</p><p><code>/etc/rancher/k3s/k3s.yaml</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">disable:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">traefik</span></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://rancher.com/docs/k3s/latest/en/installation/install-options/server-config/">K3s Server Configuration Reference</a></li><li><a href="https://rancher.com/docs/k3s/latest/en/installation/install-options/agent-config/">K3s Agent Configuration Reference</a></li><li><a href="https://wener.me/notes/devops/kubernetes/distro/k3s-conf">一份民间的配置示例</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> k3s </tag>
            
            <tag> devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码快速定位工具 source-ref</title>
      <link href="/posts/da6d1d53/"/>
      <url>/posts/da6d1d53/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><code>source-ref</code> 是一款通过网页点击快速定位到源码的工具，用于解决从视觉上快速定位到所在源码具体位置。与现有的<code>devtools</code>(vue-devtools/react-developer-tools)的源码定位互补</p><ul><li>UI框架支持 <code>React</code>, <code>Vue</code>框架</li><li>打包工具支持 <code>webpack</code>,<code>rollup</code>, <code>vite</code></li><li>跳转方式支持 <code>vscode 打开</code>, <code>Github 打开</code></li></ul><p>官方网站: <a href="https://sourceref.moonrailgun.com/">https://sourceref.moonrailgun.com/</a><br>开源地址: <a href="https://github.com/moonrailgun/source-ref">https://github.com/moonrailgun/source-ref</a></p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><h3 id="定位到Github源码"><a href="#定位到Github源码" class="headerlink" title="定位到Github源码"></a>定位到Github源码</h3><p><img src="/images/sourceref/1.gif" alt="github"></p><h3 id="使用vscode打开源码"><a href="#使用vscode打开源码" class="headerlink" title="使用vscode打开源码"></a>使用vscode打开源码</h3><p><img src="/images/sourceref/2.gif" alt="vscode"></p><h2 id="快速接入"><a href="#快速接入" class="headerlink" title="快速接入"></a>快速接入</h2><p>以 <code>react + webpack</code> 为例:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="keyword">source</span>-<span class="keyword">ref</span>-runtime</span><br><span class="line">npm <span class="keyword">install</span> -D <span class="keyword">source</span>-<span class="keyword">ref</span>-loader</span><br></pre></td></tr></table></figure><p>在 <code>webpack.config.json</code> 中, 处理jsx文件的loader的最下面插入<code>source-ref-loader</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/.tsx?$/</span>,</span><br><span class="line">  exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">&#x27;esbuild-loader&#x27;</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        loader: <span class="string">&#x27;tsx&#x27;</span>,</span><br><span class="line">        target: <span class="string">&#x27;es2015&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">&#x27;source-ref-loader&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在入口文件处，插入:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">&#x27;source-ref-runtime&#x27;</span>).then(<span class="function">(<span class="params">&#123; start &#125;</span>) =&gt;</span> start())</span><br></pre></td></tr></table></figure><p>打开项目，Alt(option in mac) + LMB(鼠标左键点击) 即可弹出选择框</p><p>更多示例见官网: <a href="https://sourceref.moonrailgun.com/">https://sourceref.moonrailgun.com/</a></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="/images/sourceref/3.excalidraw.svg" alt="原理"></p><p>打包阶段:</p><ul><li>解析源码到AST, 找到组件节点的开头部分插入当前所在位置信息</li><li>将处理好的AST转换回原来的代码形式</li></ul><p>渲染阶段:</p><ul><li>优化提示路径, 减少长路径带来的视觉污染(在devtools)</li><li>快捷键点击DOM元素，弹出选择框。</li><li>点击选择节点，通过打开vscode注册的 <code>URI Scheme</code> 从网页打开一个文件并定位到具体行号和列号</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 源码定位 </tag>
            
            <tag> 产研效能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Garfish 源码解析 —— 一个微应用是如何被挂载的</title>
      <link href="/posts/a9d2669b/"/>
      <url>/posts/a9d2669b/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><code>Garfish</code> 是字节跳动 <code>web infra</code> 团队推出的一款微前端框架</p><blockquote><p>包含构建微前端系统时所需要的基本能力，任意前端框架均可使用。接入简单，可轻松将多个前端应用组合成内聚的单个产品</p></blockquote><p><img src="/images/garfish/1.excalidraw.svg" alt="微前端基本架构"></p><p>因为当前对 <code>Garfish</code> 的解读极少，而微前端又是现代前端领域相当重要的一环，因此写下本文，同时也是对学习源码的一个总结</p><p><em>本文基于 garfish#0d4cc0c82269bce8422b0e9105b7fe88c2efe42a 进行解读</em></p><h2 id="学习源码"><a href="#学习源码" class="headerlink" title="学习源码"></a>学习源码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/modern-js-dev/garfish.git</span><br><span class="line"><span class="built_in">cd</span> garfish</span><br><span class="line">pnpm install</span><br><span class="line">pnpm build</span><br><span class="line">pnpm dev</span><br></pre></td></tr></table></figure><p>然后打开<code>https://localhost:8090/</code> 即可看到演示项目</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="主应用"><a href="#主应用" class="headerlink" title="主应用"></a>主应用</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> GarfishInit = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Garfish.run(Config);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;garfish init error&#x27;</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中关键点是 <code>Config</code> 参数, 其所有参数都是可选的，一般比较重要的几个参数为:</p><ul><li><code>basename</code> 子应用的基础路径，默认值为 /，整个微前端应用的 basename。设置后该值为所有子应用的默认值，若子应用 AppInfo 中也提供了该值会替换全局的 basename 值</li><li><code>domGetter</code> 子应用挂载点。如<code>&#39;#submodule&#39;</code></li><li><code>apps</code> 需要主要参数如 <code>name</code>, <code>entry</code>, <code>activeWhen(路由地址)</code></li></ul><p>此函数运行之后，Garfish会自动进行路由劫持功能。根据路由变化</p><h3 id="子应用"><a href="#子应用" class="headerlink" title="子应用"></a>子应用</h3><p>以react17为例:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactBridge, AppInfo &#125; <span class="keyword">from</span> <span class="string">&#x27;@garfish/bridge-react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> provider = reactBridge(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#root&#x27;</span>, <span class="comment">// 此处的root是子应用自己声明的root</span></span><br><span class="line">  <span class="comment">// a promise that resolves with the react component. Wait for it to resolve before mounting</span></span><br><span class="line">  loadRootComponent: <span class="function">(<span class="params">appInfo: AppInfo</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="function">() =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">RootComponent</span> &#123;<span class="attr">...appInfo</span>&#125; /&gt;</span></span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  errorBoundary: <span class="function">(<span class="params">e: <span class="built_in">any</span></span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">ErrorBoundary</span> /&gt;</span></span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其中:</p><ul><li><code>RootComponent</code> 是子应用的主要逻辑</li><li><code>reactBridge</code> 是garfish导出的一个封装函数。大概的逻辑就是把react的一些特有写法映射到<code>garfish</code>的通用生命周期，包含<code>render</code>和<code>destroy</code></li></ul><h2 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h2><p>那么简单了解了一些garfish的基本使用方案，我们就来看看<code>garfish</code>在此过程中到底做了什么。</p><p>从<code>Garfish.run</code>开始:</p><p>garfish/packages/core/src/garfish.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">run</span>(<span class="params">options: interfaces.Options = &#123;&#125;</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.running) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重复运行检测</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">      warn(<span class="string">&#x27;Garfish is already running now, Cannot run Garfish repeatedly.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 全局化配置</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="built_in">this</span>.setOptions(options);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 载入插件</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">// Register plugins</span></span><br><span class="line">  options.plugins?.forEach(<span class="function">(<span class="params">plugin</span>) =&gt;</span> <span class="built_in">this</span>.usePlugin(plugin));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Put the lifecycle plugin at the end, so that you can get the changes of other plugins</span></span><br><span class="line">  <span class="built_in">this</span>.usePlugin(GarfishOptionsLife(<span class="built_in">this</span>.options, <span class="string">&#x27;global-lifecycle&#x27;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Emit hooks and register apps</span></span><br><span class="line">  <span class="built_in">this</span>.hooks.lifecycle.beforeBootstrap.emit(<span class="built_in">this</span>.options); <span class="comment">// 生命周期事件beforeBootstrap</span></span><br><span class="line">  <span class="built_in">this</span>.registerApp(<span class="built_in">this</span>.options.apps || []); <span class="comment">// 注册子应用</span></span><br><span class="line">  <span class="built_in">this</span>.running = <span class="literal">true</span>;</span><br><span class="line">  <span class="built_in">this</span>.hooks.lifecycle.bootstrap.emit(<span class="built_in">this</span>.options); <span class="comment">// bootstrap</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中移除插件等内容，最重要的是<code>registerApp</code>调用，用于将配置注册到实例中</p><blockquote><p>接下来的代码会移除无关紧要的代码，仅保留核心逻辑</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">registerApp</span>(<span class="params">list: interfaces.AppInfo | <span class="built_in">Array</span>&lt;interfaces.AppInfo&gt;</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(list)) list = [list];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> appInfo <span class="keyword">of</span> list) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.appInfos[appInfo.name]) &#123;</span><br><span class="line">      <span class="built_in">this</span>.appInfos[appInfo.name] = appInfo;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看上去仅仅是一些配置设定，那么所谓的路由绑定是从哪里发生的呢？这一切其实早就暗中进行了处理。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> &#123; interfaces &#125; <span class="keyword">from</span> <span class="string">&#x27;@garfish/core&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> Garfish &#125; <span class="keyword">from</span> <span class="string">&#x27;@garfish/core&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; GarfishInstance <span class="keyword">as</span> <span class="keyword">default</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./instance&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; defineCustomElements &#125; <span class="keyword">from</span> <span class="string">&#x27;./customElement&#x27;</span>;</span><br></pre></td></tr></table></figure><p>当调用 <code>import Garfish from &#39;garfish&#39;;</code>时, 使用的是默认创建好的全局Garfish实例。该逻辑简化版大概如下:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; GarfishRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;@garfish/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; GarfishBrowserVm &#125; <span class="keyword">from</span> <span class="string">&#x27;@garfish/browser-vm&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; GarfishBrowserSnapshot &#125; <span class="keyword">from</span> <span class="string">&#x27;@garfish/browser-snapshot&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize the Garfish, currently existing environment to allow only one instance (export to is for test)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createContext</span>(<span class="params"></span>): <span class="title">Garfish</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Existing garfish instance, direct return</span></span><br><span class="line">  <span class="keyword">if</span> (inBrowser() &amp;&amp; <span class="built_in">window</span>[<span class="string">&#x27;__GARFISH__&#x27;</span>] &amp;&amp; <span class="built_in">window</span>[<span class="string">&#x27;Garfish&#x27;</span>]) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>[<span class="string">&#x27;Garfish&#x27;</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> GarfishInstance = <span class="keyword">new</span> Garfish(&#123;</span><br><span class="line">    plugins: [GarfishRouter(), GarfishBrowserVm(), GarfishBrowserSnapshot()],</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">type</span> globalValue = <span class="built_in">boolean</span> | Garfish | Record&lt;<span class="built_in">string</span>, unknown&gt;;</span><br><span class="line">  <span class="keyword">const</span> set = <span class="function">(<span class="params"><span class="keyword">namespace</span>: <span class="built_in">string</span>, val: globalValue = GarfishInstance</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> 这里有一部分状态判定的逻辑，以及确保只读，这里是精简后的逻辑</span></span><br><span class="line">    <span class="built_in">window</span>[<span class="keyword">namespace</span>] = val;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  if (inBrowser()) &#123;</span><br><span class="line">    <span class="comment">// Global flag</span></span><br><span class="line">    set(<span class="string">&#x27;Garfish&#x27;</span>);</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(<span class="built_in">window</span>, <span class="string">&#x27;__GARFISH__&#x27;</span>, &#123;</span><br><span class="line">      get: <span class="function">() =&gt;</span> <span class="literal">true</span>,</span><br><span class="line">      configurable: __DEV__ ? <span class="literal">true</span> : <span class="literal">false</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> GarfishInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> GarfishInstance = createContext();</span><br></pre></td></tr></table></figure><p>其中核心逻辑为:</p><ul><li>如果本地已经有<code>Garfish</code>实例，则直接从本地拿。（浏览器环境用于子应用，也可以从这边看出<code>garfish</code>并不支持其他的js环境</li><li>创建Garfish实例，并安装插件:<ul><li><code>GarfishRouter</code> 路由劫持能力</li><li><code>GarfishBrowserVm</code> js运行时沙盒隔离</li><li><code>GarfishBrowserSnapshot</code> 浏览器状态快照</li></ul></li><li>在window上设置全局<code>Garfish</code>对象并标记<code>__GARFISH__</code>, 注意该变量为只读</li></ul><p>其中安全和样式隔离的逻辑我们暂且不看，先看其核心插件 <code>GarfishRouter</code> 的实现</p><h3 id="插件系统"><a href="#插件系统" class="headerlink" title="插件系统"></a>插件系统</h3><p><code>Garfish</code> 自己实现了一套插件协议，其本质是pubsub模型的变种(部分生命周期的emit阶段增加了异步操作的等待逻辑)。</p><p>我们以<code>Garfish</code>最核心的插件 <code>@garfish/router</code> 为学习例子，该代码的位置在: <code>garfish/packages/router/src/index.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">GarfishRouter</span>(<span class="params">_args?: Options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">Garfish: interfaces.Garfish</span>): <span class="title">interfaces</span>.<span class="title">Plugin</span> </span>&#123;</span><br><span class="line">    Garfish.apps = &#123;&#125;;</span><br><span class="line">    Garfish.router = router;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      name: <span class="string">&#x27;router&#x27;</span>,</span><br><span class="line">      version: __VERSION__,</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="title">bootstrap</span>(<span class="params">options: interfaces.Options</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> activeApp: <span class="literal">null</span> | <span class="built_in">string</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">const</span> unmounts: Record&lt;<span class="built_in">string</span>, <span class="built_in">Function</span>&gt; = &#123;&#125;;</span><br><span class="line">        <span class="keyword">const</span> &#123; basename &#125; = options;</span><br><span class="line">        <span class="keyword">const</span> &#123; autoRefreshApp = <span class="literal">true</span>, onNotMatchRouter = <span class="function">() =&gt;</span> <span class="literal">null</span> &#125; =</span><br><span class="line">          Garfish.options;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">active</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">          appInfo: interfaces.AppInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">          rootPath: <span class="built_in">string</span> = <span class="string">&#x27;/&#x27;</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        </span>) </span>&#123;</span><br><span class="line">          routerLog(<span class="string">`<span class="subst">$&#123;appInfo.name&#125;</span> active`</span>, &#123;</span><br><span class="line">            appInfo,</span><br><span class="line">            rootPath,</span><br><span class="line">            listening: RouterConfig.listening,</span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">          <span class="comment">// In the listening state, trigger the rendering of the application</span></span><br><span class="line">          <span class="keyword">if</span> (!RouterConfig.listening) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">const</span> &#123; name, cache = <span class="literal">true</span>, active &#125; = appInfo;</span><br><span class="line">          <span class="keyword">if</span> (active) <span class="keyword">return</span> active(appInfo, rootPath);</span><br><span class="line">          appInfo.rootPath = rootPath;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">const</span> currentApp = (activeApp = createKey());</span><br><span class="line">          <span class="keyword">const</span> app = <span class="keyword">await</span> Garfish.loadApp(appInfo.name, &#123;</span><br><span class="line">            basename: rootPath,</span><br><span class="line">            entry: appInfo.entry,</span><br><span class="line">            cache: <span class="literal">true</span>,</span><br><span class="line">            domGetter: appInfo.domGetter,</span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (app) &#123;</span><br><span class="line">            app.appInfo.basename = rootPath;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> call = <span class="keyword">async</span> (app: interfaces.App, <span class="attr">isRender</span>: <span class="built_in">boolean</span>) =&gt; &#123;</span><br><span class="line">              <span class="keyword">if</span> (!app) <span class="keyword">return</span>;</span><br><span class="line">              <span class="keyword">const</span> isDes = cache &amp;&amp; app.mounted;</span><br><span class="line">              <span class="keyword">if</span> (isRender) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">await</span> app[isDes ? <span class="string">&#x27;show&#x27;</span> : <span class="string">&#x27;mount&#x27;</span>]();</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> app[isDes ? <span class="string">&#x27;hide&#x27;</span> : <span class="string">&#x27;unmount&#x27;</span>]();</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            Garfish.apps[name] = app;</span><br><span class="line">            unmounts[name] = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">              <span class="comment">// Destroy the application during rendering and discard the application instance</span></span><br><span class="line">              <span class="keyword">if</span> (app.mounting) &#123;</span><br><span class="line">                <span class="keyword">delete</span> Garfish.cacheApps[name];</span><br><span class="line">              &#125;</span><br><span class="line">              call(app, <span class="literal">false</span>);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (currentApp === activeApp) &#123;</span><br><span class="line">              <span class="keyword">await</span> call(app, <span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">deactive</span>(<span class="params">appInfo: interfaces.AppInfo, rootPath: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">          routerLog(<span class="string">`<span class="subst">$&#123;appInfo.name&#125;</span> deactive`</span>, &#123;</span><br><span class="line">            appInfo,</span><br><span class="line">            rootPath,</span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">          activeApp = <span class="literal">null</span>;</span><br><span class="line">          <span class="keyword">const</span> &#123; name, deactive &#125; = appInfo;</span><br><span class="line">          <span class="keyword">if</span> (deactive) <span class="keyword">return</span> deactive(appInfo, rootPath);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">const</span> unmount = unmounts[name];</span><br><span class="line">          unmount &amp;&amp; unmount();</span><br><span class="line">          <span class="keyword">delete</span> Garfish.apps[name];</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Nested scene to remove the current application of nested data</span></span><br><span class="line">          <span class="comment">// To avoid the main application prior to application</span></span><br><span class="line">          <span class="keyword">const</span> needToDeleteApps = router.routerConfig.apps.filter(<span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (appInfo.rootPath === app.basename) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="keyword">if</span> (needToDeleteApps.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            needToDeleteApps.forEach(<span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">delete</span> Garfish.appInfos[app.name];</span><br><span class="line">              <span class="keyword">delete</span> Garfish.cacheApps[app.name];</span><br><span class="line">            &#125;);</span><br><span class="line">            router.setRouterConfig(&#123;</span><br><span class="line">              apps: router.routerConfig.apps.filter(<span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> !needToDeleteApps.some(</span><br><span class="line">                  (needDelete) =&gt; app.name === needDelete.name,</span><br><span class="line">                );</span><br><span class="line">              &#125;),</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> apps = <span class="built_in">Object</span>.values(Garfish.appInfos);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> appList = apps.filter(<span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (!app.basename) app.basename = basename;</span><br><span class="line">          <span class="keyword">return</span> !!app.activeWhen;</span><br><span class="line">        &#125;) <span class="keyword">as</span> <span class="built_in">Array</span>&lt;Required&lt;interfaces.AppInfo&gt;&gt;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> listenOptions = &#123;</span><br><span class="line">          basename,</span><br><span class="line">          active,</span><br><span class="line">          deactive,</span><br><span class="line">          autoRefreshApp,</span><br><span class="line">          notMatch: onNotMatchRouter,</span><br><span class="line">          apps: appList,</span><br><span class="line">          listening: <span class="literal">true</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">        routerLog(<span class="string">&#x27;listenRouterAndReDirect&#x27;</span>, listenOptions);</span><br><span class="line">        listenRouterAndReDirect(listenOptions);</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="title">registerApp</span>(<span class="params">appInfos</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> appList = <span class="built_in">Object</span>.values(appInfos);</span><br><span class="line">        <span class="comment">// @ts-ignore</span></span><br><span class="line">        router.registerRouter(appList.filter(<span class="function">(<span class="params">app</span>) =&gt;</span> !!app.activeWhen));</span><br><span class="line">        <span class="comment">// After completion of the registration application, trigger application mount</span></span><br><span class="line">        <span class="comment">// Has been running after adding routing to trigger the redirection</span></span><br><span class="line">        <span class="keyword">if</span> (!Garfish.running) <span class="keyword">return</span>;</span><br><span class="line">        routerLog(<span class="string">&#x27;registerApp initRedirect&#x27;</span>, appInfos);</span><br><span class="line">        initRedirect();</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个插件的结构形如 <code>(context: Garfish) =&gt; Plugin</code></p><p>其中 <code>Plugin</code> 类型为一个对象，包含各个阶段的生命周期以及<code>name</code>/<code>version</code>等插件信息描述属性。</p><p>以 <code>router</code> 插件为例，其作用在<code>bootstrap</code>和<code>registerApp</code>两个生命周期阶段</p><blockquote><p>生命周期定义可以在这里看到: garfish/packages/core/src/lifecycle.ts</p></blockquote><p>以 <code>Garfish.run</code> 视角来看，执行顺序为: <code>beforeBootstrap -&gt; beforeRegisterApp -&gt; registerApp -&gt; bootstrap -&gt; ...</code> 因此我们先看<code>registerApp</code>的逻辑。</p><h4 id="registerApp-阶段"><a href="#registerApp-阶段" class="headerlink" title="registerApp 阶段"></a>registerApp 阶段</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.hooks.lifecycle.registerApp.emit(currentAdds);</span><br></pre></td></tr></table></figure><p>Garfish 执行 <code>registerApp</code>函数 完毕后触发 <code>registerApp</code> 生命周期hook, 将当前注册的子应用列表发送到事件回调</p><p><em>garfish/packages/router/src/index.ts</em></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  name: <span class="string">&#x27;router&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">registerApp</span>(<span class="params">appInfos</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> appList = <span class="built_in">Object</span>.values(appInfos);</span><br><span class="line">    router.registerRouter(appList.filter(<span class="function">(<span class="params">app</span>) =&gt;</span> !!app.activeWhen));</span><br><span class="line">    <span class="comment">// After completion of the registration application, trigger application mount</span></span><br><span class="line">    <span class="comment">// Has been running after adding routing to trigger the redirection</span></span><br><span class="line">    <span class="keyword">if</span> (!Garfish.running) <span class="keyword">return</span>;</span><br><span class="line">    routerLog(<span class="string">&#x27;registerApp initRedirect&#x27;</span>, appInfos);</span><br><span class="line">    initRedirect();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插件接收到子应用列表, 将依次调用:</p><ul><li><code>router.registerRouter</code> 注册到路由列表，其中会把不存在<code>activeWhen</code>属性的子应用过滤</li><li><code>initRedirect</code> 初始化重定向逻辑</li></ul><p><em>garfish/packages/router/src/context.ts</em></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> RouterConfig: Options = &#123;</span><br><span class="line">  basename: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  current: &#123;</span><br><span class="line">    fullPath: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    matched: [],</span><br><span class="line">    query: &#123;&#125;,</span><br><span class="line">    state: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  apps: [],</span><br><span class="line">  beforeEach: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> next(),</span><br><span class="line">  afterEach: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> next(),</span><br><span class="line">  active: <span class="function">() =&gt;</span> <span class="built_in">Promise</span>.resolve(),</span><br><span class="line">  deactive: <span class="function">() =&gt;</span> <span class="built_in">Promise</span>.resolve(),</span><br><span class="line">  routerChange: <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">  autoRefreshApp: <span class="literal">true</span>,</span><br><span class="line">  listening: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> registerRouter = <span class="function">(<span class="params">Apps: <span class="built_in">Array</span>&lt;interfaces.AppInfo&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> unregisterApps = Apps.filter(</span><br><span class="line">    (app) =&gt; !RouterConfig.apps.some(<span class="function">(<span class="params">item</span>) =&gt;</span> app.name === item.name),</span><br><span class="line">  );</span><br><span class="line">  RouterConfig[apps] = RouterConfig.apps.concat(unregisterApps);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Router: RouterInterface = &#123;</span><br><span class="line">  registerRouter,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Router;</span><br></pre></td></tr></table></figure><p>在<code>registerRouter</code>阶段仅仅是将子应用注册</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> initRedirect = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  linkTo(&#123;</span><br><span class="line">    toRouterInfo: &#123;</span><br><span class="line">      fullPath: location.pathname,</span><br><span class="line">      path: getPath(RouterConfig.basename!),</span><br><span class="line">      query: parseQuery(location.search),</span><br><span class="line">      state: history.state,</span><br><span class="line">    &#125;,</span><br><span class="line">    fromRouterInfo: &#123;</span><br><span class="line">      fullPath: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      query: &#123;&#125;,</span><br><span class="line">      state: &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    eventType: <span class="string">&#x27;pushState&#x27;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在<code>initRedirect</code>阶段则是调用<code>linkTo</code>函数去实现一个跳转，这里具体细节比较复杂。可以简单理解为子应用版页面跳转</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重载指定路由</span></span><br><span class="line"><span class="comment">// 1. 当前的子应用需要销毁</span></span><br><span class="line"><span class="comment">// 2. 获取当前需要激活的应用</span></span><br><span class="line"><span class="comment">// 3. 获取新的需要激活应用</span></span><br><span class="line"><span class="comment">// 4. 触发函数beforeEach，在销毁所有应用之前触发</span></span><br><span class="line"><span class="comment">// 5. 触发需要销毁应用的deactive函数</span></span><br><span class="line"><span class="comment">// 6. 如果不需要激活应用，默认触发popstate应用组件view child更新</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> linkTo = <span class="keyword">async</span> (&#123;</span><br><span class="line">  toRouterInfo,</span><br><span class="line">  fromRouterInfo,</span><br><span class="line">  eventType,</span><br><span class="line">&#125;: &#123;</span><br><span class="line">  toRouterInfo: RouterInfo;</span><br><span class="line">  fromRouterInfo: RouterInfo;</span><br><span class="line">  eventType: keyof History | <span class="string">&#x27;popstate&#x27;</span>;</span><br><span class="line">&#125;) =&gt; <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="bootstrap-阶段"><a href="#bootstrap-阶段" class="headerlink" title="bootstrap 阶段"></a>bootstrap 阶段</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.hooks.lifecycle.bootstrap.emit(<span class="built_in">this</span>.options);</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  name: <span class="string">&#x27;router&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">bootstrap</span>(<span class="params">options: interfaces.Options</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> activeApp: <span class="literal">null</span> | <span class="built_in">string</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">const</span> unmounts: Record&lt;<span class="built_in">string</span>, <span class="built_in">Function</span>&gt; = &#123;&#125;;</span><br><span class="line">    <span class="keyword">const</span> &#123; basename &#125; = options;</span><br><span class="line">    <span class="keyword">const</span> &#123; autoRefreshApp = <span class="literal">true</span>, onNotMatchRouter = <span class="function">() =&gt;</span> <span class="literal">null</span> &#125; =</span><br><span class="line">      Garfish.options;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">active</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">      appInfo: interfaces.AppInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">      rootPath: <span class="built_in">string</span> = <span class="string">&#x27;/&#x27;</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    </span>) </span>&#123;</span><br><span class="line">      routerLog(<span class="string">`<span class="subst">$&#123;appInfo.name&#125;</span> active`</span>, &#123;</span><br><span class="line">        appInfo,</span><br><span class="line">        rootPath,</span><br><span class="line">        listening: RouterConfig.listening,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// In the listening state, trigger the rendering of the application</span></span><br><span class="line">      <span class="keyword">if</span> (!RouterConfig.listening) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> &#123; name, cache = <span class="literal">true</span>, active &#125; = appInfo;</span><br><span class="line">      <span class="keyword">if</span> (active) <span class="keyword">return</span> active(appInfo, rootPath);</span><br><span class="line">      appInfo.rootPath = rootPath;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> currentApp = (activeApp = createKey());</span><br><span class="line">      <span class="keyword">const</span> app = <span class="keyword">await</span> Garfish.loadApp(appInfo.name, &#123;</span><br><span class="line">        basename: rootPath,</span><br><span class="line">        entry: appInfo.entry,</span><br><span class="line">        cache: <span class="literal">true</span>,</span><br><span class="line">        domGetter: appInfo.domGetter,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (app) &#123;</span><br><span class="line">        app.appInfo.basename = rootPath;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> call = <span class="keyword">async</span> (app: interfaces.App, <span class="attr">isRender</span>: <span class="built_in">boolean</span>) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (!app) <span class="keyword">return</span>;</span><br><span class="line">          <span class="keyword">const</span> isDes = cache &amp;&amp; app.mounted;</span><br><span class="line">          <span class="keyword">if</span> (isRender) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">await</span> app[isDes ? <span class="string">&#x27;show&#x27;</span> : <span class="string">&#x27;mount&#x27;</span>]();</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> app[isDes ? <span class="string">&#x27;hide&#x27;</span> : <span class="string">&#x27;unmount&#x27;</span>]();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Garfish.apps[name] = app;</span><br><span class="line">        unmounts[name] = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// Destroy the application during rendering and discard the application instance</span></span><br><span class="line">          <span class="keyword">if</span> (app.mounting) &#123;</span><br><span class="line">            <span class="keyword">delete</span> Garfish.cacheApps[name];</span><br><span class="line">          &#125;</span><br><span class="line">          call(app, <span class="literal">false</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (currentApp === activeApp) &#123;</span><br><span class="line">          <span class="keyword">await</span> call(app, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">deactive</span>(<span class="params">appInfo: interfaces.AppInfo, rootPath: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">      routerLog(<span class="string">`<span class="subst">$&#123;appInfo.name&#125;</span> deactive`</span>, &#123;</span><br><span class="line">        appInfo,</span><br><span class="line">        rootPath,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      activeApp = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">const</span> &#123; name, deactive &#125; = appInfo;</span><br><span class="line">      <span class="keyword">if</span> (deactive) <span class="keyword">return</span> deactive(appInfo, rootPath);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> unmount = unmounts[name];</span><br><span class="line">      unmount &amp;&amp; unmount();</span><br><span class="line">      <span class="keyword">delete</span> Garfish.apps[name];</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Nested scene to remove the current application of nested data</span></span><br><span class="line">      <span class="comment">// To avoid the main application prior to application</span></span><br><span class="line">      <span class="keyword">const</span> needToDeleteApps = router.routerConfig.apps.filter(<span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (appInfo.rootPath === app.basename) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (needToDeleteApps.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        needToDeleteApps.forEach(<span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">delete</span> Garfish.appInfos[app.name];</span><br><span class="line">          <span class="keyword">delete</span> Garfish.cacheApps[app.name];</span><br><span class="line">        &#125;);</span><br><span class="line">        router.setRouterConfig(&#123;</span><br><span class="line">          apps: router.routerConfig.apps.filter(<span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> !needToDeleteApps.some(</span><br><span class="line">              (needDelete) =&gt; app.name === needDelete.name,</span><br><span class="line">            );</span><br><span class="line">          &#125;),</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> apps = <span class="built_in">Object</span>.values(Garfish.appInfos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> appList = apps.filter(<span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!app.basename) app.basename = basename;</span><br><span class="line">      <span class="keyword">return</span> !!app.activeWhen;</span><br><span class="line">    &#125;) <span class="keyword">as</span> <span class="built_in">Array</span>&lt;Required&lt;interfaces.AppInfo&gt;&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> listenOptions = &#123;</span><br><span class="line">      basename,</span><br><span class="line">      active,</span><br><span class="line">      deactive,</span><br><span class="line">      autoRefreshApp,</span><br><span class="line">      notMatch: onNotMatchRouter,</span><br><span class="line">      apps: appList,</span><br><span class="line">      listening: <span class="literal">true</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    routerLog(<span class="string">&#x27;listenRouterAndReDirect&#x27;</span>, listenOptions);</span><br><span class="line">    listenRouterAndReDirect(listenOptions);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>bootstrap</code>阶段主要构造路由配置，并调用<code>listenRouterAndReDirect(listenOptions)</code>来进行路由的代理/拦截<br>其中主要需要关心的<code>active</code>操作(即子应用挂载逻辑)做了以下事情:</p><ul><li>调用 <code>Garfish.loadApp</code> 将子应用挂载到子应用挂载节点上(Promise 同步加载)</li><li>在 <code>Garfish.apps</code> 记录该app</li><li>注册到 unmounts 记录销毁逻辑</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.注册子应用</span></span><br><span class="line"><span class="comment"> * 2.对应子应用激活，触发激活回调</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">Options</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> listenRouterAndReDirect = (&#123;</span><br><span class="line">  apps,</span><br><span class="line">  basename = <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  autoRefreshApp,</span><br><span class="line">  active,</span><br><span class="line">  deactive,</span><br><span class="line">  notMatch,</span><br><span class="line">  listening = <span class="literal">true</span>,</span><br><span class="line">&#125;: Options) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 注册子应用、注册激活、销毁钩子</span></span><br><span class="line">  registerRouter(apps);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化信息</span></span><br><span class="line">  setRouterConfig(&#123;</span><br><span class="line">    basename,</span><br><span class="line">    autoRefreshApp,</span><br><span class="line">    <span class="comment">// supportProxy: !!window.Proxy,</span></span><br><span class="line">    active,</span><br><span class="line">    deactive,</span><br><span class="line">    notMatch,</span><br><span class="line">    listening,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开始监听路由变化触发、子应用更新。重载默认初始子应用</span></span><br><span class="line">  listen();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> registerRouter = <span class="function">(<span class="params">Apps: <span class="built_in">Array</span>&lt;interfaces.AppInfo&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> unregisterApps = Apps.filter(</span><br><span class="line">    (app) =&gt; !RouterConfig.apps.some(<span class="function">(<span class="params">item</span>) =&gt;</span> app.name === item.name),</span><br><span class="line">  );</span><br><span class="line">  RouterSet(<span class="string">&#x27;apps&#x27;</span>, RouterConfig.apps.concat(unregisterApps));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>registerRouter</code>没有什么特殊的，仅仅管理路由状态</p><p>接下来看一下<code>listen()</code>函数做的事情:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> listen = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  normalAgent();</span><br><span class="line">  initRedirect();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>initRedirect</code>我们之前看过了，现在我们主要看<code>normalAgent</code>的实现</p><p><em>garfish/packages/router/src/agentRouter.ts</em></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> normalAgent = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// By identifying whether have finished listening, if finished listening, listening to the routing changes do not need to hijack the original event</span></span><br><span class="line">  <span class="comment">// Support nested scene</span></span><br><span class="line">  <span class="keyword">const</span> addRouterListener = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(__GARFISH_BEFORE_ROUTER_EVENT__, <span class="function"><span class="keyword">function</span> (<span class="params">env</span>) </span>&#123;</span><br><span class="line">      RouterConfig.routerChange &amp;&amp; RouterConfig.routerChange(location.pathname);</span><br><span class="line">      linkTo((env <span class="keyword">as</span> <span class="built_in">any</span>).detail);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">window</span>[__GARFISH_ROUTER_FLAG__]) &#123;</span><br><span class="line">    <span class="comment">// Listen for pushState and replaceState, call linkTo, processing, listen back</span></span><br><span class="line">    <span class="comment">// Rewrite the history API method, triggering events in the call</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> rewrite = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="keyword">type</span>: keyof History</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> hapi = history[<span class="keyword">type</span>];</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="built_in">this</span>: History</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> urlBefore = <span class="built_in">window</span>.location.pathname + <span class="built_in">window</span>.location.hash;</span><br><span class="line">        <span class="keyword">const</span> stateBefore = history?.state;</span><br><span class="line">        <span class="keyword">const</span> res = hapi.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">const</span> urlAfter = <span class="built_in">window</span>.location.pathname + <span class="built_in">window</span>.location.hash;</span><br><span class="line">        <span class="keyword">const</span> stateAfter = history?.state;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> e = createEvent(<span class="keyword">type</span>);</span><br><span class="line">        (e <span class="keyword">as</span> <span class="built_in">any</span>).arguments = <span class="built_in">arguments</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">          urlBefore !== urlAfter ||</span><br><span class="line">          <span class="built_in">JSON</span>.stringify(stateBefore) !== <span class="built_in">JSON</span>.stringify(stateAfter)</span><br><span class="line">        ) &#123;</span><br><span class="line">          <span class="built_in">window</span>.dispatchEvent(</span><br><span class="line">            <span class="keyword">new</span> CustomEvent(__GARFISH_BEFORE_ROUTER_EVENT__, &#123;</span><br><span class="line">              detail: &#123;</span><br><span class="line">                toRouterInfo: &#123;</span><br><span class="line">                  fullPath: urlAfter,</span><br><span class="line">                  query: parseQuery(location.search),</span><br><span class="line">                  path: getPath(RouterConfig.basename!, urlAfter),</span><br><span class="line">                  state: stateAfter,</span><br><span class="line">                &#125;,</span><br><span class="line">                fromRouterInfo: &#123;</span><br><span class="line">                  fullPath: urlBefore,</span><br><span class="line">                  query: parseQuery(location.search),</span><br><span class="line">                  path: getPath(RouterConfig.basename!, urlBefore),</span><br><span class="line">                  state: stateBefore,</span><br><span class="line">                &#125;,</span><br><span class="line">                eventType: <span class="keyword">type</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;),</span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// window.dispatchEvent(e);</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    history.pushState = rewrite(<span class="string">&#x27;pushState&#x27;</span>);</span><br><span class="line">    history.replaceState = rewrite(<span class="string">&#x27;replaceState&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Before the collection application sub routing, forward backward routing updates between child application</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(</span><br><span class="line">      <span class="string">&#x27;popstate&#x27;</span>,</span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Stop trigger collection function, fire again match rendering</span></span><br><span class="line">        <span class="keyword">if</span> (event &amp;&amp; <span class="keyword">typeof</span> event === <span class="string">&#x27;object&#x27;</span> &amp;&amp; (event <span class="keyword">as</span> <span class="built_in">any</span>).garfish)</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (history.state &amp;&amp; <span class="keyword">typeof</span> history.state === <span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">          <span class="keyword">delete</span> history.state[__GARFISH_ROUTER_UPDATE_FLAG__];</span><br><span class="line">        <span class="built_in">window</span>.dispatchEvent(</span><br><span class="line">          <span class="keyword">new</span> CustomEvent(__GARFISH_BEFORE_ROUTER_EVENT__, &#123;</span><br><span class="line">            detail: &#123;</span><br><span class="line">              toRouterInfo: &#123;</span><br><span class="line">                fullPath: location.pathname,</span><br><span class="line">                query: parseQuery(location.search),</span><br><span class="line">                path: getPath(RouterConfig.basename!),</span><br><span class="line">              &#125;,</span><br><span class="line">              fromRouterInfo: &#123;</span><br><span class="line">                fullPath: RouterConfig.current!.fullPath,</span><br><span class="line">                path: getPath(</span><br><span class="line">                  RouterConfig.basename!,</span><br><span class="line">                  RouterConfig.current!.path,</span><br><span class="line">                ),</span><br><span class="line">                query: RouterConfig.current!.query,</span><br><span class="line">              &#125;,</span><br><span class="line">              eventType: <span class="string">&#x27;popstate&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;),</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="literal">false</span>,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>[__GARFISH_ROUTER_FLAG__] = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  addRouterListener();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>normalAgent</code> 做了以下事情:</p><ul><li>通过<code>rewrite</code>函数重写<code>history.pushState</code>和<code>history.pushState</code><ul><li><code>rewrite</code>函数则是在调用以上方法的前后增加了一些当前情况的快照，如果<code>url</code>/<code>state</code>发生变化则触发<code>__GARFISH_BEFORE_ROUTER_EVENT__</code>事件</li></ul></li><li>对<code>popstate</code>事件增加监听</li><li>调用 <code>addRouterListener</code> 增加路由监听回调。监听方法基于浏览器内置的事件系统，事件名: <code>__GARFISH_BEFORE_ROUTER_EVENT__</code></li></ul><p>综上, <code>router</code> 通过监听<code>history</code>的方法来执行副作用调用<code>linkTo</code>函数，而<code>linkTo</code>函数则通过一系列操作将匹配的路由调用<code>active</code>方法，将不匹配的路由调用<code>deactive</code>方法以实现类型切换</p><p>这时候我们再回过头来看一下<code>active</code>函数的实现</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">active</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  appInfo: interfaces.AppInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">  rootPath: <span class="built_in">string</span> = <span class="string">&#x27;/&#x27;</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  routerLog(<span class="string">`<span class="subst">$&#123;appInfo.name&#125;</span> active`</span>, &#123;</span><br><span class="line">    appInfo,</span><br><span class="line">    rootPath,</span><br><span class="line">    listening: RouterConfig.listening,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// In the listening state, trigger the rendering of the application</span></span><br><span class="line">  <span class="keyword">if</span> (!RouterConfig.listening) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; name, cache = <span class="literal">true</span>, active &#125; = appInfo;</span><br><span class="line">  <span class="keyword">if</span> (active) <span class="keyword">return</span> active(appInfo, rootPath);</span><br><span class="line">  appInfo.rootPath = rootPath;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> currentApp = (activeApp = createKey());</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> Garfish.loadApp(appInfo.name, &#123;</span><br><span class="line">    basename: rootPath,</span><br><span class="line">    entry: appInfo.entry,</span><br><span class="line">    cache: <span class="literal">true</span>,</span><br><span class="line">    domGetter: appInfo.domGetter,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (app) &#123;</span><br><span class="line">    app.appInfo.basename = rootPath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> call = <span class="keyword">async</span> (app: interfaces.App, <span class="attr">isRender</span>: <span class="built_in">boolean</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (!app) <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">const</span> isDes = cache &amp;&amp; app.mounted;</span><br><span class="line">      <span class="keyword">if</span> (isRender) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> app[isDes ? <span class="string">&#x27;show&#x27;</span> : <span class="string">&#x27;mount&#x27;</span>]();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> app[isDes ? <span class="string">&#x27;hide&#x27;</span> : <span class="string">&#x27;unmount&#x27;</span>]();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Garfish.apps[name] = app;</span><br><span class="line">    unmounts[name] = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// Destroy the application during rendering and discard the application instance</span></span><br><span class="line">      <span class="keyword">if</span> (app.mounting) &#123;</span><br><span class="line">        <span class="keyword">delete</span> Garfish.cacheApps[name];</span><br><span class="line">      &#125;</span><br><span class="line">      call(app, <span class="literal">false</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentApp === activeApp) &#123;</span><br><span class="line">      <span class="keyword">await</span> call(app, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其核心代码则是调用了<code>Garfish.loadApp</code>方法来执行加载操作。</p><h3 id="应用加载"><a href="#应用加载" class="headerlink" title="应用加载"></a>应用加载</h3><p>接下来我们看一下<code>loadApp</code>函数</p><p>garfish/packages/core/src/garfish.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">loadApp(</span><br><span class="line">  appName: <span class="built_in">string</span>,</span><br><span class="line">  options?: Partial&lt;Omit&lt;interfaces.AppInfo, <span class="string">&#x27;name&#x27;</span>&gt;&gt;,</span><br><span class="line">): <span class="built_in">Promise</span>&lt;interfaces.App | <span class="literal">null</span>&gt; &#123;</span><br><span class="line">  assert(appName, <span class="string">&#x27;Miss appName.&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> appInfo = generateAppOptions(appName, <span class="built_in">this</span>, options);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> asyncLoadProcess = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// Return not undefined type data directly to end loading</span></span><br><span class="line">    <span class="keyword">const</span> stop = <span class="keyword">await</span> <span class="built_in">this</span>.hooks.lifecycle.beforeLoad.emit(appInfo);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (stop === <span class="literal">false</span>) &#123;</span><br><span class="line">      warn(<span class="string">`Load <span class="subst">$&#123;appName&#125;</span> application is terminated by beforeLoad.`</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//merge configs again after beforeLoad for the reason of app may be re-registered during beforeLoad resulting in an incorrect information</span></span><br><span class="line">    appInfo = generateAppOptions(appName, <span class="built_in">this</span>, options);</span><br><span class="line"></span><br><span class="line">    assert(</span><br><span class="line">      appInfo.entry,</span><br><span class="line">      <span class="string">`Can&#x27;t load unexpected child app &quot;<span class="subst">$&#123;appName&#125;</span>&quot;, `</span> +</span><br><span class="line">        <span class="string">&#x27;Please provide the entry parameters or registered in advance of the app.&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Existing cache caching logic</span></span><br><span class="line">    <span class="keyword">let</span> appInstance: interfaces.App | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">const</span> cacheApp = <span class="built_in">this</span>.cacheApps[appName];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (appInfo.cache &amp;&amp; cacheApp) &#123;</span><br><span class="line">      appInstance = cacheApp;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> [manager, resources, isHtmlMode] = <span class="keyword">await</span> processAppResources(</span><br><span class="line">          <span class="built_in">this</span>.loader,</span><br><span class="line">          appInfo,</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        appInstance = <span class="keyword">new</span> App(</span><br><span class="line">          <span class="built_in">this</span>,</span><br><span class="line">          appInfo,</span><br><span class="line">          manager,</span><br><span class="line">          resources,</span><br><span class="line">          isHtmlMode,</span><br><span class="line">          appInfo.customLoader,</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The registration hook will automatically remove the duplication</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> <span class="built_in">this</span>.plugins) &#123;</span><br><span class="line">          appInstance.hooks.usePlugin(<span class="built_in">this</span>.plugins[key]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (appInfo.cache) &#123;</span><br><span class="line">          <span class="built_in">this</span>.cacheApps[appName] = appInstance;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        __DEV__ &amp;&amp; warn(e);</span><br><span class="line">        <span class="built_in">this</span>.hooks.lifecycle.errorLoadApp.emit(e, appInfo);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">this</span>.hooks.lifecycle.afterLoad.emit(appInfo, appInstance);</span><br><span class="line">    <span class="keyword">return</span> appInstance;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">this</span>.loading[appName]) &#123;</span><br><span class="line">    <span class="built_in">this</span>.loading[appName] = asyncLoadProcess().finally(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="built_in">this</span>.loading[appName];</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.loading[appName];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数做了以下操作:</p><ul><li>首先执行<code>asyncLoadProcess</code>来异步加载app，如果app正在加载则返回该Promise</li><li><em>使用<code>generateAppOptions</code>计算全局+本地的配置，并通过黑名单过滤掉一部分的无用参数(filterAppConfigKeys)</em></li><li>如果当前app已加载则直接返回缓存后的内容</li><li>如果是第一次加载，则执行 <code>processAppResources</code> 进行请求, 请求的地址为 <code>entry</code> 指定的地址。</li><li>当请求完毕后创建<code>new App</code>对象，将其放到内存中</li><li><em>应用插件/记录缓存/发布生命周期事件等</em></li></ul><p>接下来我们看核心函数, <code>processAppResources</code>的实现</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">processAppResources</span>(<span class="params">loader: Loader, appInfo: AppInfo</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> isHtmlMode: <span class="built_in">Boolean</span> = <span class="literal">false</span>,</span><br><span class="line">    fakeEntryManager;</span><br><span class="line">  <span class="keyword">const</span> resources: <span class="built_in">any</span> = &#123; <span class="attr">js</span>: [], <span class="attr">link</span>: [], <span class="attr">modules</span>: [] &#125;; <span class="comment">// Default resources</span></span><br><span class="line">  assert(appInfo.entry, <span class="string">`[<span class="subst">$&#123;appInfo.name&#125;</span>] Entry is not specified.`</span>);</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">resourceManager</span>: entryManager &#125; = <span class="keyword">await</span> loader.load(&#123;</span><br><span class="line">    scope: appInfo.name,</span><br><span class="line">    url: transformUrl(location.href, appInfo.entry),</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Html entry</span></span><br><span class="line">  <span class="keyword">if</span> (entryManager <span class="keyword">instanceof</span> TemplateManager) &#123;</span><br><span class="line">    isHtmlMode = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">const</span> [js, link, modules] = <span class="keyword">await</span> fetchStaticResources(</span><br><span class="line">      appInfo.name,</span><br><span class="line">      loader,</span><br><span class="line">      entryManager,</span><br><span class="line">    );</span><br><span class="line">    resources.js = js;</span><br><span class="line">    resources.link = link;</span><br><span class="line">    resources.modules = modules;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (entryManager <span class="keyword">instanceof</span> JavaScriptManager) &#123;</span><br><span class="line">    <span class="comment">// Js entry</span></span><br><span class="line">    isHtmlMode = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">const</span> mockTemplateCode = <span class="string">`&lt;script src=&quot;<span class="subst">$&#123;entryManager.url&#125;</span>&quot;&gt;&lt;/script&gt;`</span>;</span><br><span class="line">    fakeEntryManager = <span class="keyword">new</span> TemplateManager(mockTemplateCode, entryManager.url);</span><br><span class="line">    entryManager.setDep(fakeEntryManager.findAllJsNodes()[<span class="number">0</span>]);</span><br><span class="line">    resources.js = [entryManager];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    error(<span class="string">`Entrance wrong type of resource of &quot;<span class="subst">$&#123;appInfo.name&#125;</span>&quot;.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [fakeEntryManager || entryManager, resources, isHtmlMode];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先根据<code>appInfo.entry</code>调用<code>loader.load</code>函数，生成一个<code>entryManager</code>。如果entry指向的是html地址则获取静态数据后拿取<code>js,link,modules</code>，如果entry指向的是一个js地址则伪造一个仅包含这段js的js资源。最后的返回值是一个 <code>[resourceManager, resources, isHtmlMode]</code> 的元组。</p><p>其中<code>resourceManager</code>的大概结构如下:<br><img src="/images/garfish/2.png" alt="resourceManager"></p><p><code>loader.load</code>的本质上就是发请求获取数据然后把请求到的纯文本转化成结构化，如果是html则对html声明的资源进行进一步的请求获取。这边就不再赘述。</p><p>我们回到<code>loadApp</code>函数的实现。</p><p>之后，代码根据<code>processAppResources</code>获取到的<code>[resourceManager, resources, isHtmlMode]</code>信息来创建一个<code>new App</code>;</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">appInstance = <span class="keyword">new</span> App(</span><br><span class="line">  <span class="built_in">this</span>,</span><br><span class="line">  appInfo,</span><br><span class="line">  manager,</span><br><span class="line">  resources,</span><br><span class="line">  isHtmlMode,</span><br><span class="line">  appInfo.customLoader,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src="/images/garfish/3.png" alt="appInstance"></p><p><code>new App</code>的过程中没有任何逻辑，仅仅是一些变量的定义。值得注意的是在此过程中会对插件系统做一些初始化设定</p><p>garfish/packages/core/src/module/app.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    context: Garfish,</span></span><br><span class="line"><span class="params">    appInfo: AppInfo,</span></span><br><span class="line"><span class="params">    entryManager: TemplateManager,</span></span><br><span class="line"><span class="params">    resources: interfaces.ResourceModules,</span></span><br><span class="line"><span class="params">    isHtmlMode: <span class="built_in">boolean</span>,</span></span><br><span class="line"><span class="params">    customLoader?: CustomerLoader,</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register hooks</span></span><br><span class="line">    <span class="built_in">this</span>.hooks = appLifecycle();</span><br><span class="line">    <span class="built_in">this</span>.hooks.usePlugin(&#123;</span><br><span class="line">      ...appInfo,</span><br><span class="line">      name: <span class="string">`<span class="subst">$&#123;appInfo.name&#125;</span>-lifecycle`</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这一步为止，我们还在做一些准备工作:</p><ul><li>从远程获取资源</li><li>将纯文本解析成结构化对象和AST</li><li>进一步获取js/css的实际代码</li></ul><p>接下来我们需要一个调用方能够帮助我们将获取到的资源<strong>执行并挂载</strong>到dom上。</p><p>这时候我们就需要回到我们的<code>router</code>插件。还记得我们的<code>GarfishRouter.bootstrap.active</code>里的代码么?</p><p>garfish/packages/router/src/index.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">GarfishRouter</span>(<span class="params">_args?: Options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">Garfish: interfaces.Garfish</span>): <span class="title">interfaces</span>.<span class="title">Plugin</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="title">bootstrap</span>(<span class="params">options: interfaces.Options</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">active</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">          appInfo: interfaces.AppInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">          rootPath: <span class="built_in">string</span> = <span class="string">&#x27;/&#x27;</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        </span>) </span>&#123;</span><br><span class="line">          <span class="comment">// ...</span></span><br><span class="line">          <span class="keyword">const</span> app = <span class="keyword">await</span> Garfish.loadApp(appInfo.name, &#123;</span><br><span class="line">            basename: rootPath,</span><br><span class="line">            entry: appInfo.entry,</span><br><span class="line">            cache: <span class="literal">true</span>,</span><br><span class="line">            domGetter: appInfo.domGetter,</span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (app) &#123;</span><br><span class="line">            app.appInfo.basename = rootPath;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> call = <span class="keyword">async</span> (app: interfaces.App, <span class="attr">isRender</span>: <span class="built_in">boolean</span>) =&gt; &#123;</span><br><span class="line">              <span class="keyword">if</span> (!app) <span class="keyword">return</span>;</span><br><span class="line">              <span class="keyword">const</span> isDes = cache &amp;&amp; app.mounted;</span><br><span class="line">              <span class="keyword">if</span> (isRender) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">await</span> app[isDes ? <span class="string">&#x27;show&#x27;</span> : <span class="string">&#x27;mount&#x27;</span>]();</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> app[isDes ? <span class="string">&#x27;hide&#x27;</span> : <span class="string">&#x27;unmount&#x27;</span>]();</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            Garfish.apps[name] = app;</span><br><span class="line">            unmounts[name] = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">              <span class="comment">// Destroy the application during rendering and discard the application instance</span></span><br><span class="line">              <span class="keyword">if</span> (app.mounting) &#123;</span><br><span class="line">                <span class="keyword">delete</span> Garfish.cacheApps[name];</span><br><span class="line">              &#125;</span><br><span class="line">              call(app, <span class="literal">false</span>);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (currentApp === activeApp) &#123;</span><br><span class="line">              <span class="keyword">await</span> call(app, <span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们第一次执行到<code>call</code>函数时，会执行<code>app.mount()</code>函数来实现应用的挂载。</p><p>我们看下<code>app.mount()</code>的实现:</p><p>garfish/packages/core/src/module/app.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">mount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.canMount()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">this</span>.hooks.lifecycle.beforeMount.emit(<span class="built_in">this</span>.appInfo, <span class="built_in">this</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.active = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">this</span>.mounting = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.context.activeApps.push(<span class="built_in">this</span>);</span><br><span class="line">      <span class="comment">// add container and compile js with cjs</span></span><br><span class="line">      <span class="keyword">const</span> &#123; asyncScripts &#125; = <span class="keyword">await</span> <span class="built_in">this</span>.compileAndRenderContainer();</span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">this</span>.stopMountAndClearEffect()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Good provider is set at compile time</span></span><br><span class="line">      <span class="keyword">const</span> provider = <span class="keyword">await</span> <span class="built_in">this</span>.getProvider();</span><br><span class="line">      <span class="comment">// Existing asynchronous functions need to decide whether the application has been unloaded</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">this</span>.stopMountAndClearEffect()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>.callRender(provider, <span class="literal">true</span>);</span><br><span class="line">      <span class="built_in">this</span>.display = <span class="literal">true</span>;</span><br><span class="line">      <span class="built_in">this</span>.mounted = <span class="literal">true</span>;</span><br><span class="line">      <span class="built_in">this</span>.hooks.lifecycle.afterMount.emit(<span class="built_in">this</span>.appInfo, <span class="built_in">this</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">await</span> asyncScripts;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">this</span>.stopMountAndClearEffect()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="built_in">this</span>.entryManager.DOMApis.removeElement(<span class="built_in">this</span>.appContainer);</span><br><span class="line">      <span class="built_in">this</span>.hooks.lifecycle.errorMountApp.emit(e, <span class="built_in">this</span>.appInfo);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.mounting = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Performs js resources provided by the module, finally get the content of the export</span></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">compileAndRenderContainer</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// Render the application node</span></span><br><span class="line">    <span class="comment">// If you don&#x27;t want to use the CJS export, at the entrance is not can not pass the module, the require</span></span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">this</span>.renderTemplate();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Execute asynchronous script</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      asyncScripts: <span class="keyword">new</span> <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt;(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Asynchronous script does not block the rendering process</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">this</span>.stopMountAndClearEffect()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> jsManager <span class="keyword">of</span> <span class="built_in">this</span>.resources.js) &#123;</span><br><span class="line">              <span class="keyword">if</span> (jsManager.async) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                  <span class="built_in">this</span>.execScript(</span><br><span class="line">                    jsManager.scriptCode,</span><br><span class="line">                    &#123;&#125;,</span><br><span class="line">                    jsManager.url || <span class="built_in">this</span>.appInfo.entry,</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="keyword">async</span>: <span class="literal">false</span>,</span><br><span class="line">                      noEntry: <span class="literal">true</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                  );</span><br><span class="line">                &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                  <span class="built_in">this</span>.hooks.lifecycle.errorMountApp.emit(e, <span class="built_in">this</span>.appInfo);</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          resolve();</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>mount</code>主要实现以下操作:</p><ul><li>生命周期的分发: <code>beforeMount</code>, <code>afterMount</code></li><li>状态变更: <code>this.active</code>, <code>this.mounting</code>, <code>this.display</code></li><li>调用 <code>this.compileAndRenderContainer</code> 执行编译<ul><li>调用<code>this.renderTemplate</code>渲染同步代码片段</li><li>返回 <code>asyncScripts</code> 函数用于在下一个宏任务(task) 执行异步js代码片段</li></ul></li><li>在每一个异步片段过程中都尝试执行 <code>stopMountAndClearEffect</code> 来判断当前状态，以确保状态的准确性(用于处理在异步代码执行过程中被取消的问题)</li></ul><p>我们看一下<code>renderTemplate</code>的逻辑:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">async</span> <span class="function"><span class="title">renderTemplate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; appInfo, entryManager, resources &#125; = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">url</span>: baseUrl, DOMApis &#125; = entryManager;</span><br><span class="line">    <span class="keyword">const</span> &#123; htmlNode, appContainer &#125; = createAppContainer(appInfo);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Transformation relative path</span></span><br><span class="line">    <span class="built_in">this</span>.htmlNode = htmlNode;</span><br><span class="line">    <span class="built_in">this</span>.appContainer = appContainer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// To append to the document flow, recursive again create the contents of the HTML or execute the script</span></span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">this</span>.addContainer();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> customRenderer: Parameters&lt;<span class="keyword">typeof</span> entryManager.createElements&gt;[<span class="number">0</span>] = &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      body: <span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.strictIsolation) &#123;</span><br><span class="line">          node = entryManager.cloneNode(node);</span><br><span class="line">          node.tagName = <span class="string">&#x27;div&#x27;</span>;</span><br><span class="line">          node.attributes.push(&#123;</span><br><span class="line">            key: __MockBody__,</span><br><span class="line">            value: <span class="literal">null</span>,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> DOMApis.createElement(node);</span><br><span class="line">      &#125;,</span><br><span class="line">      script: <span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> mimeType = entryManager.findAttributeValue(node, <span class="string">&#x27;type&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> isModule = mimeType === <span class="string">&#x27;module&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mimeType) &#123;</span><br><span class="line">          <span class="comment">// Other script template</span></span><br><span class="line">          <span class="keyword">if</span> (!isModule &amp;&amp; !isJsType(&#123; <span class="attr">type</span>: mimeType &#125;)) &#123;</span><br><span class="line">            <span class="keyword">return</span> DOMApis.createElement(node);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> jsManager = resources.js.find(<span class="function">(<span class="params">manager</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> !manager.async ? manager.isSameOrigin(node) : <span class="literal">false</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jsManager) &#123;</span><br><span class="line">          <span class="keyword">const</span> &#123; url, scriptCode &#125; = jsManager;</span><br><span class="line">          <span class="built_in">this</span>.execScript(scriptCode, &#123;&#125;, url || <span class="built_in">this</span>.appInfo.entry, &#123;</span><br><span class="line">            isModule,</span><br><span class="line">            <span class="keyword">async</span>: <span class="literal">false</span>,</span><br><span class="line">            isInline: jsManager.isInlineScript(),</span><br><span class="line">            noEntry: toBoolean(</span><br><span class="line">              entryManager.findAttributeValue(node, <span class="string">&#x27;no-entry&#x27;</span>),</span><br><span class="line">            ),</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">          <span class="keyword">const</span> <span class="keyword">async</span> = entryManager.findAttributeValue(node, <span class="string">&#x27;async&#x27;</span>);</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">async</span> === <span class="string">&#x27;undefined&#x27;</span> || <span class="keyword">async</span> === <span class="string">&#x27;false&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> tipInfo = <span class="built_in">JSON</span>.stringify(node, <span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line">            warn(</span><br><span class="line">              <span class="string">`Current js node cannot be found, the resource may not exist.\n\n <span class="subst">$&#123;tipInfo&#125;</span>`</span>,</span><br><span class="line">            );</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> DOMApis.createScriptCommentNode(node);</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Render dom tree and append to document.</span></span><br><span class="line">    entryManager.createElements(customRenderer, htmlNode);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>调用 <code>createAppContainer</code> 函数创建一些空白的容器dom, 注意此时还没有挂载到界面上:<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createAppContainer</span>(<span class="params">appInfo: interfaces.AppInfo</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> name = appInfo.name;</span><br><span class="line">  <span class="comment">// Create a temporary node, which is destroyed by the module itself</span></span><br><span class="line">  <span class="keyword">let</span> htmlNode: HTMLDivElement | HTMLHtmlElement =</span><br><span class="line">    <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> appContainer = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (appInfo.sandbox &amp;&amp; appInfo.sandbox.strictIsolation) &#123;</span><br><span class="line">    htmlNode = <span class="built_in">document</span>.createElement(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> root = appContainer.attachShadow(&#123; <span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span> &#125;);</span><br><span class="line">    root.appendChild(htmlNode);</span><br><span class="line">    <span class="comment">// asyncNodeAttribute(htmlNode, document.body);</span></span><br><span class="line">    dispatchEvents(root);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    htmlNode.setAttribute(__MockHtml__, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    appContainer.appendChild(htmlNode);</span><br><span class="line">  &#125;</span><br><span class="line">  appContainer.id = <span class="string">`<span class="subst">$&#123;appContainerId&#125;</span>_<span class="subst">$&#123;name&#125;</span>_<span class="subst">$&#123;createKey()&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    htmlNode,</span><br><span class="line">    appContainer,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果开启了 <code>sandbox</code> 和 <code>strictIsolation</code> 配置则进行严格的隔离(使用<code>appContainer.attachShadow</code>)来创建<code>ShadowDOM</code></li></ul></li><li>调用<code>addContainer</code>来将代码挂载容器组件到文档中, 通过执行<code>domGetter</code>来获取父容器节点<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">async</span> <span class="function"><span class="title">addContainer</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="comment">// Initialize the mount point, support domGetter as promise, is advantageous for the compatibility</span></span><br><span class="line">  <span class="keyword">const</span> wrapperNode = <span class="keyword">await</span> getRenderNode(<span class="built_in">this</span>.appInfo.domGetter);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> wrapperNode.appendChild === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    wrapperNode.appendChild(<span class="built_in">this</span>.appContainer);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>调用<code>entryManager.createElements(customRenderer, htmlNode);</code> 来实际创建节点。<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Render dom tree</span></span><br><span class="line"><span class="function"><span class="title">createElements</span>(<span class="params">renderer: Renderer, parent: Element</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> elements: <span class="built_in">Array</span>&lt;Element&gt; = [];</span><br><span class="line">  <span class="keyword">const</span> traverse = <span class="function">(<span class="params">node: Node | Text, parentEl?: Element</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> el: <span class="built_in">any</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.DOMApis.isCommentNode(node)) &#123;</span><br><span class="line">      <span class="comment">// Filter comment node</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.DOMApis.isText(node)) &#123;</span><br><span class="line">      el = <span class="built_in">this</span>.DOMApis.createTextNode(node);</span><br><span class="line">      parentEl &amp;&amp; parentEl.appendChild(el);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.DOMApis.isNode(node)) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; tagName, children &#125; = node <span class="keyword">as</span> Node;</span><br><span class="line">      <span class="keyword">if</span> (renderer[tagName]) &#123;</span><br><span class="line">        el = renderer[tagName](node <span class="keyword">as</span> Node);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        el = <span class="built_in">this</span>.DOMApis.createElement(node <span class="keyword">as</span> Node);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (parentEl &amp;&amp; el) parentEl.appendChild(el);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (el) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; nodeType, _ignoreChildNodes &#125; = el;</span><br><span class="line">        <span class="comment">// Filter &quot;comment&quot; and &quot;document&quot; node</span></span><br><span class="line">        <span class="keyword">if</span> (!_ignoreChildNodes &amp;&amp; nodeType !== <span class="number">8</span> &amp;&amp; nodeType !== <span class="number">10</span>) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">const</span> child <span class="keyword">of</span> children) &#123;</span><br><span class="line">            traverse(child, el);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> el;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> node <span class="keyword">of</span> <span class="built_in">this</span>.astTree) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.DOMApis.isNode(node) &amp;&amp; node.tagName !== <span class="string">&#x27;!doctype&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> el = traverse(node, parent);</span><br><span class="line">      el &amp;&amp; elements.push(el);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> elements;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>使用<code>traverse</code>函数对自身进行树节点遍历，将ast树转换为dom树并挂载到<code>parent</code>上<ul><li>注意有意思的一点是他是在遍历<code>ast</code>过程中的同时执行<code>appendChild</code>方法加载到dom树上而不是将节点生成完毕后一次性加载(也许是因为操作都是在一个task中所以浏览器会一次性执行？)</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>综上，<code>garfish</code>完成了一次远程获取目标代码 =&gt; 解析成ast =&gt; 然后再从ast转换成dom树的过程。</p><p>将一段远程的页面/js加载到当前页面的固定位置</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Garfish </tag>
            
            <tag> 源码解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>把代码仓库当做数据库，github action持久化存储新思路</title>
      <link href="/posts/e678c77b/"/>
      <url>/posts/e678c77b/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>我想做一个rss订阅机器人，通过一个定时任务定期将我关注的内容推送到我的 <code>Tailchat</code> 群组。但是我又不想自己去单独搭建一个服务器来部署，因为功能很小、单独部署的成本会被放大，也不容易被其他人很简单的使用。而且长期维护的成本也是比较高的，希望能处于无人值守的运行模式</p><p>那么整理一下需求:</p><ul><li>定时任务</li><li>简单部署</li><li>不需要运维</li></ul><p>可以说是非常理想了，那么有这样成熟的解决方案么？答案是有的。那就是<code>github action</code>。</p><p>Github action 可以满足我的所有需求，只需要一个简单的定时任务即可实现我的三个需求。唯一的难点在于数据库，也就是持久化存储。</p><p>众所周知，rss机器人的原理就是定时请求rss订阅地址，将返回的内容结构化以后与之前存储的数据进行比较，将更新的信息提取出来发送到外部服务。那么为了能够比较差异，一个持久化的数据库是必不可少的。那么<code>github action</code>可以实现数据库么？答案是可以的，我只需要将数据存储在代码仓库中，每次执行action之前将数据取出，然后在action执行完毕之后将数据存回仓库，那么一个用于低频读写的文件数据库就实现了。</p><p>理论存在，实践开始！</p><h2 id="开始造轮子"><a href="#开始造轮子" class="headerlink" title="开始造轮子"></a>开始造轮子</h2><p>在github上搜索了一圈没有发现有现成的轮子，因此就开始自己造一个。</p><p>核心流程如下：</p><h4 id="准备数据流程"><a href="#准备数据流程" class="headerlink" title="准备数据流程"></a>准备数据流程</h4><ul><li>通过git worktree创建一个独立的工作区</li><li>指定工作区的分支为一个独立分支用于存储数据</li><li>如果该分支之前不存在，跳过准备过程</li><li>如果分支已存在，拉取分支代码，将存储分支的指定目录文件复制到主工作空间的指定目录文件</li></ul><h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><ul><li>在后续的action中执行脚本</li><li>脚本读取文件数据库，在这里使用的是<code>lowdb</code>，当然也可以使用sqlite，看个人喜好</li><li>更新数据库并写入</li></ul><h4 id="持久化存储数据"><a href="#持久化存储数据" class="headerlink" title="持久化存储数据"></a>持久化存储数据</h4><ul><li>action执行完毕进入post阶段</li><li>执行post action将主工作区的数据库文件覆盖到存储工作区中</li><li>存储工作区通过github action的token或者传入参数的token 提交变更到github的存储分支中。</li><li>结束流程，等待后续的执行</li></ul><h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><p>那么通过上面一系列步骤，我们就成功把github当做我们自己的action应用的数据库了。</p><p>一个简单的示例如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Tests</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">timeout-minutes:</span> <span class="number">60</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">date</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">moonrailgun/branch-filestorage-action@v1.2.2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">date</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Read</span> <span class="string">and</span> <span class="string">show</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">cat</span> <span class="string">date</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">update</span> <span class="string">date</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">echo</span> <span class="string">$(date)</span> <span class="string">&gt;</span> <span class="string">date</span></span><br></pre></td></tr></table></figure><p>这个action表示，每执行一次，我们的<code>actions/filedb</code>中的date文件就会更新成最新的.当然也可以加上一些定时任务触发器让他自动执行。当然建议不要滥用哦，可以使用低频一些</p><p>在Github Marketplace查看: <a href="https://github.com/marketplace/actions/branch-filestorage-action">https://github.com/marketplace/actions/branch-filestorage-action</a></p><p>开源地址: <a href="https://github.com/moonrailgun/branch-filestorage-action">moonrailgun/branch-filestorage-action</a></p><p>RSSBot地址: <a href="https://github.com/msgbyte/tailchat-rss-bot">msgbyte/tailchat-rss-bot</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 代码仓库 </tag>
            
            <tag> Github </tag>
            
            <tag> Github Action </tag>
            
            <tag> 持久化存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何让团队项目白嫖 vercel 的免费服务</title>
      <link href="/posts/9632e7e0/"/>
      <url>/posts/9632e7e0/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><code>Vercel</code> 是一个对 <code>Hobby</code> 计划提供免费服务，并且在中国地区做了很好的CDN的serverless项目，用于代理静态页面或者做一些简单的api是非常方便的。</p><p>对于个人项目来说，<code>vercel</code>可以很好的在网页上直接操作导入，但是对于存储在Github组织的项目来说想要直接创建是不行的，这时候vercel会跳转到 <code>pro plan</code> 并且付费后才能使用</p><p>这时候我们就要取巧用一些方法绕过 github 组织的限制</p><h2 id="创建不与github绑定的Vercel项目"><a href="#创建不与github绑定的Vercel项目" class="headerlink" title="创建不与github绑定的Vercel项目"></a>创建不与github绑定的Vercel项目</h2><p>使用<code>npm</code>全局安装<code>vercel</code>命令行终端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vercel</span><br></pre></td></tr></table></figure><p>在项目目录下直接执行以下命令</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vercel login</span></span><br><span class="line"><span class="attribute">vercel</span></span><br></pre></td></tr></table></figure><p>这里会有一个交互式的终端操作。按照他的步骤顺序执行下去，就会在Vercel上创建一个没有连接任何一个Github项目的服务了。此时如果部署成功的话是可以通过网页界面直接点击到已经部署的服务的。</p><p>这时候我们就成功了一半了，剩下的是需要我们实现每次提交代码自动部署vercel的功能。</p><h2 id="设置自动部署"><a href="#设置自动部署" class="headerlink" title="设置自动部署"></a>设置自动部署</h2><p>在<code>github action</code>上创建一个编译CI，并在build操作后面插入以下命令:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">Vercel</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">amondnet/vercel-action@master</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">VERSION:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.GITHUB_SHA</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">vercel-token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.VERCEL_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">vercel-org-id:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ORG_ID&#125;&#125;</span></span><br><span class="line">    <span class="attr">vercel-project-id:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.PROJECT_ID&#125;&#125;</span></span><br><span class="line">    <span class="attr">working-directory:</span> <span class="string">./</span></span><br><span class="line">    <span class="attr">vercel-args:</span> <span class="string">&#x27;--prod&#x27;</span> <span class="comment"># 可不填</span></span><br></pre></td></tr></table></figure><p>其中需要在<code>Github Secrets</code>中提前准备好以下参数</p><ul><li><code>VERCEL_TOKEN</code>: 通过 <a href="https://vercel.com/account/tokens">https://vercel.com/account/tokens</a> 创建</li><li><code>ORG_ID</code>: 项目根目录 <code>.vercel/project.json</code> 可见</li><li><code>PROJECT_ID</code>: 项目根目录 <code>.vercel/project.json</code> 可见</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vercel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7 安装gcc手册</title>
      <link href="/posts/406cd832/"/>
      <url>/posts/406cd832/</url>
      
        <content type="html"><![CDATA[<p>众所周知，<code>gcc</code>版本数都已经两位数了，yum源的直接安装gcc的最新版本还停留在<code>4.8.5</code>。而对于部分c++的应用来说，高版本的<code>gcc</code>是必不可少的。而现在中文网络上教你升级gcc的办法都是手动下载<code>gcc</code>源码然后去编译。</p><p>别急！在你选择去按照教程手动一步步编译前，静下心来。手动编译的坑数不胜数，而<code>Redhat</code> 官方早就提供了解决方案, 那就是<code>devtoolset</code>(在centos8中改名为gcc-toolset)</p><p><code>devtoolset</code>类似于node中的nvm，允许你在同一环境下安装多个gcc环境而不冲突</p><p>使用方法很简单:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install centos-release-scl <span class="comment"># 通过centos-release-scl源安装devtoolset包</span></span><br><span class="line">yum install devtoolset-8</span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">devtoolset</span>-<span class="number">3</span>对应gcc<span class="number">4</span>.x.x版本</span><br><span class="line"><span class="attribute">devtoolset</span>-<span class="number">4</span>对应gcc<span class="number">5</span>.x.x版本</span><br><span class="line"><span class="attribute">devtoolset</span>-<span class="number">6</span>对应gcc<span class="number">6</span>.x.x版本</span><br><span class="line"><span class="attribute">devtoolset</span>-<span class="number">7</span>对应gcc<span class="number">7</span>.x.x版本</span><br><span class="line"><span class="attribute">devtoolset</span>-<span class="number">8</span>对应gcc<span class="number">8</span>.x.x版本</span><br><span class="line"><span class="attribute">devtoolset</span>-<span class="number">9</span>对应gcc<span class="number">9</span>.x.x版本</span><br><span class="line"><span class="attribute">devtoolset</span>-<span class="number">10</span>对应gcc<span class="number">10</span>.x.x版本</span><br></pre></td></tr></table></figure><p>为使其生效还需要手动执行切换一下版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /opt/rh/devtoolset-8/<span class="built_in">enable</span></span><br></pre></td></tr></table></figure><p>当然可以把这行代码保存在 <code>.bashrc</code> / <code>.zshrc</code> 中以每次连接shell都自动执行</p>]]></content>
      
      
      
        <tags>
            
            <tag> centos7 </tag>
            
            <tag> gcc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k3s安装 OpenFaaS小记</title>
      <link href="/posts/e7e551d1/"/>
      <url>/posts/e7e551d1/</url>
      
        <content type="html"><![CDATA[<h2 id="官方手册"><a href="#官方手册" class="headerlink" title="官方手册"></a>官方手册</h2><p><a href="https://docs.openfaas.com/deployment/kubernetes/">https://docs.openfaas.com/deployment/kubernetes/</a></p><h2 id="使用hosts"><a href="#使用hosts" class="headerlink" title="使用hosts"></a>使用hosts</h2><p>因为众所周知的原因，国内访问部分网站不是很顺畅，如以下步骤有网络问题。这里建议使用 <a href="https://www.ipaddress.com/">https://www.ipaddress.com/</a> 这个网站来获取最佳的hosts</p><h2 id="First-of-all"><a href="#First-of-all" class="headerlink" title="First of all"></a>First of all</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取 faas-cli</span></span><br><span class="line">curl -sL https://cli.openfaas.com | sudo sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 arkade</span></span><br><span class="line">curl -SLsf https://dl.get-arkade.dev/ | sudo sh</span><br></pre></td></tr></table></figure><p><code>arkade</code> 是一个<code>helm</code> 的封装工具，用于一键安装应用到<code>k8s</code>集群</p><h2 id="一键安装-openfaas"><a href="#一键安装-openfaas" class="headerlink" title="一键安装 openfaas"></a>一键安装 openfaas</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arkade install openfaas</span><br></pre></td></tr></table></figure><p>在此过程中可能会出现集群无法抵达的问题，可以参考这个issue: <a href="https://github.com/k3s-io/k3s/issues/1126">https://github.com/k3s-io/k3s/issues/1126</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> KUBECONFIG=/etc/rancher/k3s/k3s.yaml</span><br></pre></td></tr></table></figure><h2 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h2><p>安装完成后会输出如下内容:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">=======================================================================</span><br><span class="line">= OpenFaaS has been installed.                                        =</span><br><span class="line">=======================================================================</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get the faas-cli</span></span><br><span class="line">curl -SLsf https:<span class="string">//cli.openfaas.com</span> | sudo sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># Forward the gateway to your machine</span></span><br><span class="line">kubectl rollout status -n openfaas <span class="keyword">deploy</span>/gateway</span><br><span class="line">kubectl port-forward -n openfaas svc/gateway 8080<span class="function">:8080</span> &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># If basic auth is enabled, you can now log into your gateway:</span></span><br><span class="line">PASSWORD=$<span class="params">(kubectl get secret -n openfaas basic-auth -o <span class="attr">jsonpath</span>=&quot;&#123;.data.basic-auth-password&#125;&quot; | base64 --decode; echo)</span></span><br><span class="line"><span class="keyword">echo</span> -n $PASSWORD | faas-cli login <span class="params">--username</span> admin <span class="params">--password-stdin</span></span><br><span class="line"></span><br><span class="line">faas-cli store <span class="keyword">deploy</span> figlet</span><br><span class="line">faas-cli list</span><br><span class="line"></span><br><span class="line"><span class="comment"># For Raspberry Pi</span></span><br><span class="line">faas-cli store list \</span><br><span class="line"> <span class="params">--platform</span> armhf</span><br><span class="line"></span><br><span class="line">faas-cli store <span class="keyword">deploy</span> figlet \</span><br><span class="line"> <span class="params">--platform</span> armhf</span><br><span class="line"></span><br><span class="line"><span class="comment"># Find out more at:</span></span><br><span class="line"><span class="comment"># https://github.com/openfaas/faas</span></span><br><span class="line"></span><br><span class="line">Thanks for using arkade!</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> k3s </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么我选择Tailwindcss</title>
      <link href="/posts/f9bc948a/"/>
      <url>/posts/f9bc948a/</url>
      
        <content type="html"><![CDATA[<p>前端的CSS发展经历了许多方案, 从早期的无序到后面的BEM，从自写到<code>bootstrap</code>的火爆，从 <code>single css file</code> 到 <code>css module</code> 到 <code>css in js</code></p><p>我想说说为什么我选择<code>tailwind</code>, 以及为什么我觉得<code>tailwind</code>这种提供工具的方式是我理想的解决方案</p><h2 id="体积"><a href="#体积" class="headerlink" title="体积"></a>体积</h2><p>因为<code>tailwind</code>几乎不会有冗余代码，那么<code>tailwind</code>项目的样式大小是可控的。此外它也不会引入无用的样式, 因为它会根据代码进行摇树优化。</p><h2 id="可维护性与可控性"><a href="#可维护性与可控性" class="headerlink" title="可维护性与可控性"></a>可维护性与可控性</h2><p>如果做过在一个现有的UI框架上进行一些覆盖样式，那么就会知道为什么说可维护性是多么重要。</p><p>因为这些工作往往是一个全局的样式。而当项目越来越复杂以后，你很难维护一个全局样式，因为你光看代码完全不知道这些代码的适用范围。当一个样式代码被越来越多人接手过后，你会发现他的可维护性越来越低 —— 因为你不敢删除任意一行代码，因为你不知道他会影响那些地方，那么你所能做的就是往上不断增加权重，不断覆盖，就如你的前人一样。</p><h2 id="无需结构"><a href="#无需结构" class="headerlink" title="无需结构"></a>无需结构</h2><p>可能很多初学者会认为<code>BEM</code>很清晰，比如<code>tree__item</code>就表示这是一个树的子项。但仔细想一想，你真的理解么? <code>item</code>到底是什么? 他是处于一颗dom树的哪个节点? 我必须得在他的父级增加一个名为<code>&lt;div class=&quot;tree&quot;&gt;&lt;/div&gt;</code>的节点他的行为才是正确的么?</p><p>是的，对于BEM来说，如果是按照他的文档上所写的示例来复制的话, 这种固有的结构性是清晰的。但是如果想要深度进行一些定制的化，就显得有些力不从心了。</p><p>比如你想要修改树子项的字体大小:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tree&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tree__item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果你不想增加行内样式, 那么你可以这样实现</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.tree</span> <span class="selector-class">.tree__item</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那如果想要增加作用域, 那可能会这样实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tree foo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tree__item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.tree</span><span class="selector-class">.foo</span> <span class="selector-class">.tree__item</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是的，这是一种理想情况。但是想象一下，这种方式，真的可维护么? 你可能会写出这样的代码:</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.tree</span><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="selector-class">.tree__item</span> &#123;</span><br><span class="line">    <span class="selector-class">.tree__item-title</span> &#123;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.tree__footer</span> &#123;</span><br><span class="line">    &gt; <span class="selector-tag">span</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#ccc</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看上去好像没什么问题，但是你要了解，现实情况可能更加复杂, 类名可能会有多套规则。而当我们为了修改一些样式，我们需要构造一套复杂的树形结构。这套结构是完整的，不可被破坏的。一点点的改动可能会引起整个结构树的崩溃 —— 到那时候，你真的能理解之前的代码想要表达什么意思么?</p><p><code>Tailwind</code> 就不需要考虑这些问题。因为他几乎不需要额外的样式文件。当BEM在迭代中膨胀HTML与CSS时, <code>tailwindcss</code>只膨胀<code>HTML</code></p><h2 id="清晰"><a href="#清晰" class="headerlink" title="清晰"></a>清晰</h2><p>见名知意。学习成本低，阅读成本低。和直接写inline style一样但是更加优雅与可读。</p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>越长的CSS选择器查询越慢, 没有比tailwind更快的了。因为它的选择结构最多2层, 对于一个大型的前端应用来说，无数细微的性能优势最终也有产生有价值的点。</p><h2 id="工具类样式库"><a href="#工具类样式库" class="headerlink" title="工具类样式库"></a>工具类样式库</h2><p>我自己也在刚学<code>react-native</code>的时候写了个类似的样式库<a href="https://github.com/moonrailgun/react-native-style-block">react-native-style-block</a>。不过虽然我当时可能没有这么深刻的体会，只是本能的选择了这条路。从现在看来，这个方向完全是正确的。我相信工具类样式更加能够满足前端多变的需求。</p>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> tailwindcss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一题 —— 混杂整数序列按规则进行重新排序</title>
      <link href="/posts/e536db3/"/>
      <url>/posts/e536db3/</url>
      
        <content type="html"><![CDATA[<p><strong>背景:</strong></p><p>假设我们取一个数字 x 并执行以下任一操作：</p><ul><li>a:将 x 除以 3 (如果可以被 3 除)</li><li>b:将 x 乘以 2</li></ul><p>每次操作后，记下结果。如果从 9 开始，可以得到一个序列</p><blockquote><p>有一个混杂的整数序列，现在任务是对它们重新排序，以使其符合上述序列并输出结果</p></blockquote><p><strong>示例:</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输入: <span class="string">&quot;[4,8,6,3,12,9]&quot;</span></span><br><span class="line">输出: [9,3,6,12,4,8]</span><br><span class="line"></span><br><span class="line">解释: [9,3,6,12,4,8] =&gt; 9/<span class="attribute">3</span>=3 -&gt; 3<span class="number">*2</span>=6 -&gt; 6<span class="number">*2</span>=12 -&gt; 12/<span class="attribute">3</span>=4 -&gt; 4<span class="number">*2</span>=8</span><br><span class="line"></span><br><span class="line">输入: <span class="string">&quot;[3000,9000]&quot;</span></span><br><span class="line">输出: [9000,3000]</span><br><span class="line"></span><br><span class="line">输入: <span class="string">&quot;[4,2]&quot;</span></span><br><span class="line">输出: [2,4]</span><br><span class="line"></span><br><span class="line">输入: <span class="string">&quot;[4,6,2]&quot;</span></span><br><span class="line">输出: [6,2,4]</span><br></pre></td></tr></table></figure><p>人话翻译: 对数组重新排序，使得数组每一项可以满足这样一个规则：arr[i] = arr[i + 1] * 3 或者 arr[i] = arr[i + 1] / 2</p><p><strong>解法:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeArr</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  <span class="keyword">let</span> find = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">let</span> ret;</span><br><span class="line">  arr.forEach(<span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">    map.set(n, (map.get(n) || <span class="number">0</span>) + <span class="number">1</span>); <span class="comment">// 定义数组中一个数剩余的次数</span></span><br><span class="line">  &#125;);</span><br><span class="line">  arr.forEach(<span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (find) <span class="keyword">return</span>;</span><br><span class="line">    dfs(n, <span class="number">2</span>, [n]);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">prev, index, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (find) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (index === arr.length + <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// 找完了，退出搜索</span></span><br><span class="line">      find = <span class="literal">true</span>;</span><br><span class="line">      ret = res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (map.has(prev * <span class="number">2</span>) &amp;&amp; map.get(prev * <span class="number">2</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 数组中有上个值 *2 的数据存在</span></span><br><span class="line">      map.set(prev * <span class="number">2</span>, map.get(prev * <span class="number">2</span>) - <span class="number">1</span>);</span><br><span class="line">      dfs(prev * <span class="number">2</span>, index + <span class="number">1</span>, [...res, prev * <span class="number">2</span>]); <span class="comment">// 将这个值加到结果中，并</span></span><br><span class="line">      map.set(prev * <span class="number">2</span>, map.get(prev * <span class="number">2</span>) + <span class="number">1</span>); <span class="comment">// 没有找到，把次数加回来</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(prev % <span class="number">3</span>) &amp;&amp; map.get(prev / <span class="number">3</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 当前值能被3整数并且被3整数的值存在</span></span><br><span class="line">      map.set(prev / <span class="number">3</span>, map.get(prev / <span class="number">3</span>) - <span class="number">1</span>);</span><br><span class="line">      dfs(prev / <span class="number">3</span>, index + <span class="number">1</span>, [...res, prev / <span class="number">3</span>]);</span><br><span class="line">      map.set(prev / <span class="number">3</span>, map.get(prev / <span class="number">3</span>) + <span class="number">1</span>); <span class="comment">// 没有找到，把次数加回来</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来自: <a href="https://juejin.cn/post/6961675763070271519">2年前端,如何跟抖音面试官battle</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack是个什么鬼——了解编译结果</title>
      <link href="/posts/a409424d/"/>
      <url>/posts/a409424d/</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p><code>webpack</code> 是一款现代化的前端打包工具，那么webpack是怎么将模块化代码能够在浏览器运行的？让我们来看一下</p><ul><li><a href="https://webpack.js.org/">官方网站</a></li></ul><h2 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h2><p>从一个最小<code>webpack</code>实例开始:</p><p><strong>src/index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Hello Webpack&quot;</span>);</span><br></pre></td></tr></table></figure><hr><p>我们直接使用命令行进行打包, 结果如下:</p><p><strong>webpack –mode development</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ATTENTION: The &quot;eval&quot; devtool has been used (maybe by default in mode: &quot;development&quot;).</span></span><br><span class="line"><span class="comment"> * This devtool is neither made for production nor for readable output files.</span></span><br><span class="line"><span class="comment"> * It uses &quot;eval()&quot; calls to create a separate source file in the browser devtools.</span></span><br><span class="line"><span class="comment"> * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)</span></span><br><span class="line"><span class="comment"> * or disable the default devtool with &quot;devtool: false&quot;.</span></span><br><span class="line"><span class="comment"> * If you are looking for production-ready output files, see mode: &quot;production&quot; (https://webpack.js.org/configuration/mode/).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function">() =&gt;</span> &#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> __webpack_modules__ = (&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="string">&quot;./src/index.js&quot;</span>:</span><br><span class="line"><span class="comment">/*!**********************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/index.js ***!</span></span><br><span class="line"><span class="comment">  \**********************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;console.log(&#x27;Hello Webpack&#x27;);\n\n\n//# sourceURL=webpack://webpack-demo/./src/index.js?&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> &#125;);</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// startup</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Load entry module and return exports</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// This entry module can&#x27;t be inlined because the eval devtool is used.</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line"><span class="comment">/******/</span> __webpack_modules__[<span class="string">&quot;./src/index.js&quot;</span>]();</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> &#125;)()</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p><strong>webpack –mode development –devtool hidden-source-map</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/******/</span> (<span class="function">() =&gt;</span> &#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line"><span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line"><span class="comment">/*!**********************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/index.js ***!</span></span><br><span class="line"><span class="comment">  \**********************/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Hello Webpack&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> &#125;)()</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p><strong>webpack –mode production</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Hello Webpack&quot;</span>);</span><br></pre></td></tr></table></figure><p>可以看到, 对于简单代码来说, 是否使用webpack打包区别不大。稍微注意一下，在默认的<code>development</code>环境中引入了两个变量<code>__webpack_exports__</code> 和 <code>__webpack_modules__</code>。顾名思义，是分别管理导出内容与模块列表的两个代码</p><p><code>__webpack_modules__</code> 是一个key为代码(模块)路径，值为模块执行结果的一个对象。</p><p>我们来试试稍微复杂一点的例子:</p><h2 id="使用import"><a href="#使用import" class="headerlink" title="使用import"></a>使用import</h2><p><strong>src/index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;add&#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><p><strong>src/utils.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>我们直接使用命令行进行打包, 结果如下:</p><p><strong>webpack –mode development</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ATTENTION: The &quot;eval&quot; devtool has been used (maybe by default in mode: &quot;development&quot;).</span></span><br><span class="line"><span class="comment"> * This devtool is neither made for production nor for readable output files.</span></span><br><span class="line"><span class="comment"> * It uses &quot;eval()&quot; calls to create a separate source file in the browser devtools.</span></span><br><span class="line"><span class="comment"> * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)</span></span><br><span class="line"><span class="comment"> * or disable the default devtool with &quot;devtool: false&quot;.</span></span><br><span class="line"><span class="comment"> * If you are looking for production-ready output files, see mode: &quot;production&quot; (https://webpack.js.org/configuration/mode/).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function">() =&gt;</span> &#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line"><span class="comment">/******/</span> <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> __webpack_modules__ = (&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="string">&quot;./src/index.js&quot;</span>:</span><br><span class="line"><span class="comment">/*!**********************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/index.js ***!</span></span><br><span class="line"><span class="comment">  \**********************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \&quot;./src/utils.js\&quot;);\n\n\nconsole.log((0,_utils__WEBPACK_IMPORTED_MODULE_0__.add)(1, 2));\n\n\n//# sourceURL=webpack://webpack-demo/./src/index.js?&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="string">&quot;./src/utils.js&quot;</span>:</span><br><span class="line"><span class="comment">/*!**********************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/utils.js ***!</span></span><br><span class="line"><span class="comment">  \**********************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, &#123;\n/* harmony export */   \&quot;add\&quot;: () =&gt; (/* binding */ add)\n/* harmony export */ &#125;);\nfunction add(a, b) &#123;\n    return a + b;\n&#125;\n\n\n//# sourceURL=webpack://webpack-demo/./src/utils.js?&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> &#125;);</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// The module cache</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// The require function</span></span><br><span class="line"><span class="comment">/******/</span> <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Check if module is in cache</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">return</span> cachedModule.exports;</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> <span class="built_in">module</span> = __webpack_module_cache__[moduleId] = &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// no module.id needed</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// no module.loaded needed</span></span><br><span class="line"><span class="comment">/******/</span> <span class="built_in">exports</span>: &#123;&#125;</span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Execute the module function</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_modules__[moduleId](<span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Return the exports of the module</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">/* webpack/runtime/define property getters */</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// define getter functions for harmony exports</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.d = <span class="function">(<span class="params"><span class="built_in">exports</span>, definition</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> definition) &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(__webpack_require__.o(definition, key) &amp;&amp; !__webpack_require__.o(<span class="built_in">exports</span>, key)) &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="built_in">Object</span>.defineProperty(<span class="built_in">exports</span>, key, &#123; <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">get</span>: definition[key] &#125;);</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"><span class="comment">/******/</span> &#125;)();</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">/* webpack/runtime/hasOwnProperty shorthand */</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.o = <span class="function">(<span class="params">obj, prop</span>) =&gt;</span> (<span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, prop))</span><br><span class="line"><span class="comment">/******/</span> &#125;)();</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">/* webpack/runtime/make namespace object */</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// define __esModule on exports</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.r = <span class="function">(<span class="params"><span class="built_in">exports</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="built_in">Symbol</span>.toStringTag) &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="built_in">Object</span>.defineProperty(<span class="built_in">exports</span>, <span class="built_in">Symbol</span>.toStringTag, &#123; <span class="attr">value</span>: <span class="string">&#x27;Module&#x27;</span> &#125;);</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> <span class="built_in">Object</span>.defineProperty(<span class="built_in">exports</span>, <span class="string">&#x27;__esModule&#x27;</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"><span class="comment">/******/</span> &#125;)();</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// startup</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Load entry module and return exports</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// This entry module can&#x27;t be inlined because the eval devtool is used.</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> __webpack_exports__ = __webpack_require__(<span class="string">&quot;./src/index.js&quot;</span>);</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> &#125;)()</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p><strong>webpack –mode development –devtool hidden-source-map</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/******/</span> (<span class="function">() =&gt;</span> &#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line"><span class="comment">/******/</span> <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> __webpack_modules__ = (&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="string">&quot;./src/utils.js&quot;</span>:</span><br><span class="line"><span class="comment">/*!**********************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/utils.js ***!</span></span><br><span class="line"><span class="comment">  \**********************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">__webpack_require__.r(__webpack_exports__);</span><br><span class="line"><span class="comment">/* harmony export */</span> __webpack_require__.d(__webpack_exports__, &#123;</span><br><span class="line"><span class="comment">/* harmony export */</span>   <span class="string">&quot;add&quot;</span>: <span class="function">() =&gt;</span> (<span class="comment">/* binding */</span> add)</span><br><span class="line"><span class="comment">/* harmony export */</span> &#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> &#125;);</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// The module cache</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// The require function</span></span><br><span class="line"><span class="comment">/******/</span> <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Check if module is in cache</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">return</span> cachedModule.exports;</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> <span class="built_in">module</span> = __webpack_module_cache__[moduleId] = &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// no module.id needed</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// no module.loaded needed</span></span><br><span class="line"><span class="comment">/******/</span> <span class="built_in">exports</span>: &#123;&#125;</span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Execute the module function</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_modules__[moduleId](<span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Return the exports of the module</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">/* webpack/runtime/define property getters */</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// define getter functions for harmony exports</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.d = <span class="function">(<span class="params"><span class="built_in">exports</span>, definition</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> definition) &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(__webpack_require__.o(definition, key) &amp;&amp; !__webpack_require__.o(<span class="built_in">exports</span>, key)) &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="built_in">Object</span>.defineProperty(<span class="built_in">exports</span>, key, &#123; <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">get</span>: definition[key] &#125;);</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"><span class="comment">/******/</span> &#125;)();</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">/* webpack/runtime/hasOwnProperty shorthand */</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.o = <span class="function">(<span class="params">obj, prop</span>) =&gt;</span> (<span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, prop))</span><br><span class="line"><span class="comment">/******/</span> &#125;)();</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">/* webpack/runtime/make namespace object */</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// define __esModule on exports</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.r = <span class="function">(<span class="params"><span class="built_in">exports</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="built_in">Symbol</span>.toStringTag) &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="built_in">Object</span>.defineProperty(<span class="built_in">exports</span>, <span class="built_in">Symbol</span>.toStringTag, &#123; <span class="attr">value</span>: <span class="string">&#x27;Module&#x27;</span> &#125;);</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> <span class="built_in">Object</span>.defineProperty(<span class="built_in">exports</span>, <span class="string">&#x27;__esModule&#x27;</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"><span class="comment">/******/</span> &#125;)();</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line"><span class="comment">// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.</span></span><br><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/*!**********************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/index.js ***!</span></span><br><span class="line"><span class="comment">  \**********************/</span></span><br><span class="line">__webpack_require__.r(__webpack_exports__);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(<span class="comment">/*! ./utils */</span> <span class="string">&quot;./src/utils.js&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log((<span class="number">0</span>,_utils__WEBPACK_IMPORTED_MODULE_0__.add)(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> &#125;)()</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p><em>(可以看到<code>webpack --mode development --devtool hidden-source-map</code>这个命令执行的结果和直接development是一样的，但是代码可读性更加高。之后的文章将以这个命令的输出为准)</em></p><p><strong>webpack –mode production</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function">()=&gt;</span>&#123;<span class="string">&quot;use strict&quot;</span>;<span class="built_in">console</span>.log(<span class="number">3</span>)&#125;)();</span><br></pre></td></tr></table></figure><p>可以看到，webpack一旦发现了模块系统，那么就会增加很多中间代码(从注释 <code>The module cache</code> 到 变量 <code>__webpack_exports__</code>)</p><p>首先webpack每块代码都是以<code>(() =&gt; &#123;&#125;)()</code> 这种形式的闭包来处理的，防止污染外部空间。</p><p>然后每一段都有一段注释来告知下面这块代码的逻辑是要做什么</p><p>我们来一一看一下:</p><h3 id="module-cache-and-require-function"><a href="#module-cache-and-require-function" class="headerlink" title="module cache and require function"></a>module cache and require function</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The module cache</span></span><br><span class="line"><span class="keyword">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The require function</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line"><span class="comment">// Check if module is in cache</span></span><br><span class="line"><span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line"><span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> cachedModule.exports;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = __webpack_module_cache__[moduleId] = &#123;</span><br><span class="line"><span class="comment">// no module.id needed</span></span><br><span class="line"><span class="comment">// no module.loaded needed</span></span><br><span class="line"><span class="built_in">exports</span>: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Execute the module function</span></span><br><span class="line">__webpack_modules__[moduleId](<span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return the exports of the module</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义了一个<code>__webpack_module_cache__</code>用于缓存模块</p><p>定义了一个<code>__webpack_require__</code>方法, 接受一个<code>moduleId</code>, 从下面可以看到<code>moduleId</code>是这个模块的路径(包括拓展名, 也即是<code>__webpack_modules__</code>管理的key值)</p><p>先判断缓存中是否存在这个模块，即是否加载，如果加载直接返回导出的数据，如果没有则在缓存中创建一个空对象<code>&#123;exports: &#123;&#125;&#125;</code>, 然后把<code>module, module.exports, __webpack_require__</code>作为参数去执行<code>__webpack_modules__</code>对应的方法</p><p>而<code>__webpack_modules__</code>的定义如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __webpack_modules__ = (&#123;</span><br><span class="line">  <span class="string">&quot;./src/utils.js&quot;</span>:</span><br><span class="line">  (<span class="function">(<span class="params">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class="line">    __webpack_require__.r(__webpack_exports__);</span><br><span class="line">    __webpack_require__.d(__webpack_exports__, &#123;</span><br><span class="line">      <span class="string">&quot;add&quot;</span>: <span class="function">() =&gt;</span> (add)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以看到，这里调用了一个<code>__webpack_require__.r</code>和一个<code>__webpack_require__.d</code>方法。目前我们不知道这两个方法是做什么用的。继续看下去。</p><h3 id="webpack-runtime-define-property-getters"><a href="#webpack-runtime-define-property-getters" class="headerlink" title="webpack/runtime/define property getters"></a>webpack/runtime/define property getters</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* webpack/runtime/define property getters */</span></span><br><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// define getter functions for harmony exports</span></span><br><span class="line">__webpack_require__.d = <span class="function">(<span class="params"><span class="built_in">exports</span>, definition</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> definition) &#123;</span><br><span class="line"><span class="keyword">if</span>(__webpack_require__.o(definition, key) &amp;&amp; !__webpack_require__.o(<span class="built_in">exports</span>, key)) &#123;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">exports</span>, key, &#123; <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">get</span>: definition[key] &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><code>d</code>是<code>define</code>的缩写。可以看到这个方法的作用就是定义导出的值。</p><p>其目的就是遍历<code>definition</code>对象将其一一填入<code>exports</code>。需要注意的是使用<code>__webpack_require__.d</code>的目的在于确保:</p><ul><li>只能有一个<code>key</code>存在，如果<code>exports</code>中已经存在过了这个导出值，则不会重复导入</li><li>确保<code>exports</code>中的属性只有<code>getter</code>, 不能被外部设置</li></ul><h3 id="make-namespace-object"><a href="#make-namespace-object" class="headerlink" title="make namespace object"></a>make namespace object</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* webpack/runtime/make namespace object */</span></span><br><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// define __esModule on exports</span></span><br><span class="line">__webpack_require__.r = <span class="function">(<span class="params"><span class="built_in">exports</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="built_in">Symbol</span>.toStringTag) &#123;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">exports</span>, <span class="built_in">Symbol</span>.toStringTag, &#123; <span class="attr">value</span>: <span class="string">&#x27;Module&#x27;</span> &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">exports</span>, <span class="string">&#x27;__esModule&#x27;</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>这个方法完成了两个目的。</p><ul><li>在<code>exports</code>定义了<code>Symbol.toStringTag</code>的值为<code>Module</code><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag">toStringTag</a></li></ul></li><li>在<code>exports</code>定义了<code>__esModule</code>的值为<code>true</code></li></ul><p>目的在于完成导出模块的兼容性</p><p>我们试试换一种导出方式:<br><strong>src/utils.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.add = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __webpack_modules__ = (&#123;</span><br><span class="line">  <span class="string">&quot;./src/utils.js&quot;</span>:</span><br><span class="line">  (<span class="function">(<span class="params">__unused_webpack_module, <span class="built_in">exports</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">exports</span>.add = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以看到输出简洁了很多。但是结果是一样的。都是在<code>exports</code>中插入导出的方法, 只不过<code>esmodule</code>的方式更加谨慎一点</p><p>那么前面的<code>__unused_webpack_module</code>又是干嘛的呢？我们修改一下代码<br><strong>src/utils.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __webpack_modules__ = (&#123;</span><br><span class="line">  <span class="string">&quot;./src/utils.js&quot;</span>:</span><br><span class="line">  (<span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>一个主要细节在于<code>esmodule</code>使用了<code>__webpack_require__.d</code>来确保其代码的只读性，而commonjs没有:</p><h4 id="esmodule和commonjs的模块导出可访问性区别"><a href="#esmodule和commonjs的模块导出可访问性区别" class="headerlink" title="esmodule和commonjs的模块导出可访问性区别"></a>esmodule和commonjs的模块导出可访问性区别</h4><p><code>CommonJS</code> 模块输出的是一个值的拷贝, <code>ES6</code> 模块输出的是值的引用</p><p>举个例子</p><p><strong>commonjs</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  a = <span class="number">2</span>;</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.a = a;</span><br></pre></td></tr></table></figure><p>生成代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    a = <span class="number">2</span>;</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>.exports.a = a;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>esmodule</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  a = <span class="number">2</span>;</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">export</span> &#123; a &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function">(<span class="params">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="meta">  &quot;use strict&quot;</span>;</span><br><span class="line">  __webpack_require__.r(__webpack_exports__);</span><br><span class="line">  <span class="comment">/* harmony export */</span> __webpack_require__.d(__webpack_exports__, &#123;</span><br><span class="line">  <span class="comment">/* harmony export */</span>   <span class="string">&quot;a&quot;</span>: <span class="function">() =&gt;</span> (<span class="comment">/* binding */</span> a)</span><br><span class="line">  <span class="comment">/* harmony export */</span> &#125;);</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      a = <span class="number">2</span>;</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>可以看到区别:</p><ul><li>commonjs 输出的a: 1 -&gt; 1</li><li>esmodule 输出的a: 1 -&gt; 2</li></ul><p>因为<code>commonjs</code>内部实现是赋值，程序导出以后原来的<code>a</code>和导出的<code>a</code>的关系就没有了</p><p>而<code>esmodule</code>输出的一个对象，内部的<code>getter</code>会每次去拿最新的<code>a</code>的值</p><hr><p>那么到此我们的中间代码就看完了，顺便还介绍了一下<code>webpack</code>的导出结果。完整的中间代码列表可以看<a href="https://github.com/webpack/webpack/blob/HEAD/lib/RuntimeGlobals.js">这个文件</a></p><h3 id="执行代码"><a href="#执行代码" class="headerlink" title="执行代码"></a>执行代码</h3><p>在上面的示例中，我们得到以下代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  __webpack_require__.r(__webpack_exports__);</span><br><span class="line">  <span class="keyword">var</span> _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(<span class="string">&quot;./src/utils.js&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log((<span class="number">0</span>,_utils__WEBPACK_IMPORTED_MODULE_0__.add)(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>该代码作为项目的入口代码, 完成了以下逻辑</p><ul><li>通过 <code>__webpack_require__.r</code> 标记这个文件导出类型为<code>esmodule</code></li><li>执行 <code>__webpack_require__</code> 并将导入的结果存放到临时变量 <code>_utils__WEBPACK_IMPORTED_MODULE_0__</code></li><li>执行 <code>(0,_utils__WEBPACK_IMPORTED_MODULE_0__.add)(1, 2)</code> 并导出结果。这里的<code>(0, ...)</code>是为了重置方法的<code>this</code>指向<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator">Comma operator</a></li><li>这个方法等价于<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = _utils__WEBPACK_IMPORTED_MODULE_0__.add</span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>让我们来微调一下代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="built_in">require</span>(<span class="string">&#x27;./utils&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> add = __webpack_require__(<span class="string">&quot;./src/utils.js&quot;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>可以看到, 其主要的区别就是<code>__webpack_require__.r</code>, 其他的区别不是很大。</p><h2 id="动态代码"><a href="#动态代码" class="headerlink" title="动态代码"></a>动态代码</h2><p>修改部分代码:</p><p><strong>src/index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">&#x27;./utils&#x27;</span>).then(<span class="function">(<span class="params">&#123;add&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>生成代码:</p><p><strong>webpack –mode development –devtool hidden-source-map</strong></p><p><strong>dist/main.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/******/</span> (<span class="function">() =&gt;</span> &#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> __webpack_modules__ = (&#123;&#125;);</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// The module cache</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// The require function</span></span><br><span class="line"><span class="comment">/******/</span> <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Check if module is in cache</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">return</span> cachedModule.exports;</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> <span class="built_in">module</span> = __webpack_module_cache__[moduleId] = &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// no module.id needed</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// no module.loaded needed</span></span><br><span class="line"><span class="comment">/******/</span> <span class="built_in">exports</span>: &#123;&#125;</span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Execute the module function</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_modules__[moduleId](<span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Return the exports of the module</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// expose the modules object (__webpack_modules__)</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.m = __webpack_modules__;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">/* webpack/runtime/define property getters */</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// define getter functions for harmony exports</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.d = <span class="function">(<span class="params"><span class="built_in">exports</span>, definition</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> definition) &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(__webpack_require__.o(definition, key) &amp;&amp; !__webpack_require__.o(<span class="built_in">exports</span>, key)) &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="built_in">Object</span>.defineProperty(<span class="built_in">exports</span>, key, &#123; <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">get</span>: definition[key] &#125;);</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"><span class="comment">/******/</span> &#125;)();</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">/* webpack/runtime/ensure chunk */</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.f = &#123;&#125;;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// This file contains only the entry chunk.</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// The chunk loading function for additional chunks</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.e = <span class="function">(<span class="params">chunkId</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">return</span> <span class="built_in">Promise</span>.all(<span class="built_in">Object</span>.keys(__webpack_require__.f).reduce(<span class="function">(<span class="params">promises, key</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.f[key](chunkId, promises);</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">return</span> promises;</span><br><span class="line"><span class="comment">/******/</span> &#125;, []));</span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"><span class="comment">/******/</span> &#125;)();</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">/* webpack/runtime/get javascript chunk filename */</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// This function allow to reference async chunks</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.u = <span class="function">(<span class="params">chunkId</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// return url for filenames based on template</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">return</span> <span class="string">&quot;&quot;</span> + chunkId + <span class="string">&quot;.js&quot;</span>;</span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"><span class="comment">/******/</span> &#125;)();</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">/* webpack/runtime/global */</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.g = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> globalThis === <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> globalThis;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">return</span> <span class="built_in">this</span> || <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&#x27;return this&#x27;</span>)();</span><br><span class="line"><span class="comment">/******/</span> &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> <span class="built_in">window</span>;</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> &#125;)();</span><br><span class="line"><span class="comment">/******/</span> &#125;)();</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">/* webpack/runtime/hasOwnProperty shorthand */</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.o = <span class="function">(<span class="params">obj, prop</span>) =&gt;</span> (<span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, prop))</span><br><span class="line"><span class="comment">/******/</span> &#125;)();</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">/* webpack/runtime/load script */</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> inProgress = &#123;&#125;;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> dataWebpackPrefix = <span class="string">&quot;webpack-demo:&quot;</span>;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// loadScript function to load a script via script tag</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.l = <span class="function">(<span class="params">url, done, key, chunkId</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(inProgress[url]) &#123; inProgress[url].push(done); <span class="keyword">return</span>; &#125;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> script, needAttach;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(key !== <span class="literal">undefined</span>) &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> scripts = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;script&quot;</span>);</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; scripts.length; i++) &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> s = scripts[i];</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(s.getAttribute(<span class="string">&quot;src&quot;</span>) == url || s.getAttribute(<span class="string">&quot;data-webpack&quot;</span>) == dataWebpackPrefix + key) &#123; script = s; <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(!script) &#123;</span><br><span class="line"><span class="comment">/******/</span> needAttach = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">/******/</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> script.charset = <span class="string">&#x27;utf-8&#x27;</span>;</span><br><span class="line"><span class="comment">/******/</span> script.timeout = <span class="number">120</span>;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span> (__webpack_require__.nc) &#123;</span><br><span class="line"><span class="comment">/******/</span> script.setAttribute(<span class="string">&quot;nonce&quot;</span>, __webpack_require__.nc);</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> script.setAttribute(<span class="string">&quot;data-webpack&quot;</span>, dataWebpackPrefix + key);</span><br><span class="line"><span class="comment">/******/</span> script.src = url;</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> inProgress[url] = [done];</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> onScriptComplete = <span class="function">(<span class="params">prev, event</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// avoid mem leaks in IE.</span></span><br><span class="line"><span class="comment">/******/</span> script.onerror = script.onload = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">/******/</span> <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> doneFns = inProgress[url];</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">delete</span> inProgress[url];</span><br><span class="line"><span class="comment">/******/</span> script.parentNode &amp;&amp; script.parentNode.removeChild(script);</span><br><span class="line"><span class="comment">/******/</span> doneFns &amp;&amp; doneFns.forEach(<span class="function">(<span class="params">fn</span>) =&gt;</span> (fn(event)));</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(prev) <span class="keyword">return</span> prev(event);</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> ;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> timeout = <span class="built_in">setTimeout</span>(onScriptComplete.bind(<span class="literal">null</span>, <span class="literal">undefined</span>, &#123; <span class="attr">type</span>: <span class="string">&#x27;timeout&#x27;</span>, <span class="attr">target</span>: script &#125;), <span class="number">120000</span>);</span><br><span class="line"><span class="comment">/******/</span> script.onerror = onScriptComplete.bind(<span class="literal">null</span>, script.onerror);</span><br><span class="line"><span class="comment">/******/</span> script.onload = onScriptComplete.bind(<span class="literal">null</span>, script.onload);</span><br><span class="line"><span class="comment">/******/</span> needAttach &amp;&amp; <span class="built_in">document</span>.head.appendChild(script);</span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"><span class="comment">/******/</span> &#125;)();</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">/* webpack/runtime/make namespace object */</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// define __esModule on exports</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.r = <span class="function">(<span class="params"><span class="built_in">exports</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="built_in">Symbol</span>.toStringTag) &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="built_in">Object</span>.defineProperty(<span class="built_in">exports</span>, <span class="built_in">Symbol</span>.toStringTag, &#123; <span class="attr">value</span>: <span class="string">&#x27;Module&#x27;</span> &#125;);</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> <span class="built_in">Object</span>.defineProperty(<span class="built_in">exports</span>, <span class="string">&#x27;__esModule&#x27;</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"><span class="comment">/******/</span> &#125;)();</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">/* webpack/runtime/publicPath */</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> scriptUrl;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span> (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> <span class="built_in">document</span> = __webpack_require__.g.document;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span> (!scriptUrl &amp;&amp; <span class="built_in">document</span>) &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span> (<span class="built_in">document</span>.currentScript)</span><br><span class="line"><span class="comment">/******/</span> scriptUrl = <span class="built_in">document</span>.currentScript.src</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span> (!scriptUrl) &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> scripts = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;script&quot;</span>);</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(scripts.length) scriptUrl = scripts[scripts.length - <span class="number">1</span>].src</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// or pass an empty string (&quot;&quot;) and set the __webpack_public_path__ variable from your code to use your own logic.</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span> (!scriptUrl) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;Automatic publicPath is not supported in this browser&quot;</span>);</span><br><span class="line"><span class="comment">/******/</span> scriptUrl = scriptUrl.replace(<span class="regexp">/#.*$/</span>, <span class="string">&quot;&quot;</span>).replace(<span class="regexp">/\?.*$/</span>, <span class="string">&quot;&quot;</span>).replace(<span class="regexp">/\/[^\/]+$/</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.p = scriptUrl;</span><br><span class="line"><span class="comment">/******/</span> &#125;)();</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">/* webpack/runtime/jsonp chunk loading */</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// no baseURI</span></span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// object to store loaded and loading chunks</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// undefined = chunk not loaded, null = chunk preloaded/prefetched</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> installedChunks = &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="string">&quot;main&quot;</span>: <span class="number">0</span></span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.f.j = <span class="function">(<span class="params">chunkId, promises</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// JSONP chunk loading for javascript</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : <span class="literal">undefined</span>;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(installedChunkData !== <span class="number">0</span>) &#123; <span class="comment">// 0 means &quot;already installed&quot;.</span></span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// a Promise means &quot;currently loading&quot;.</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(installedChunkData) &#123;</span><br><span class="line"><span class="comment">/******/</span> promises.push(installedChunkData[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">/******/</span> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(<span class="literal">true</span>) &#123; <span class="comment">// all chunks have JS</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// setup Promise in chunk cache</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> (installedChunkData = installedChunks[chunkId] = [resolve, reject]));</span><br><span class="line"><span class="comment">/******/</span> promises.push(installedChunkData[<span class="number">2</span>] = promise);</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// start chunk loading</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> url = __webpack_require__.p + __webpack_require__.u(chunkId);</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// create error before stack unwound to get useful stacktrace later</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> error = <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> loadingEnded = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(__webpack_require__.o(installedChunks, chunkId)) &#123;</span><br><span class="line"><span class="comment">/******/</span> installedChunkData = installedChunks[chunkId];</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(installedChunkData !== <span class="number">0</span>) installedChunks[chunkId] = <span class="literal">undefined</span>;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(installedChunkData) &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> errorType = event &amp;&amp; (event.type === <span class="string">&#x27;load&#x27;</span> ? <span class="string">&#x27;missing&#x27;</span> : event.type);</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> realSrc = event &amp;&amp; event.target &amp;&amp; event.target.src;</span><br><span class="line"><span class="comment">/******/</span> error.message = <span class="string">&#x27;Loading chunk &#x27;</span> + chunkId + <span class="string">&#x27; failed.\n(&#x27;</span> + errorType + <span class="string">&#x27;: &#x27;</span> + realSrc + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line"><span class="comment">/******/</span> error.name = <span class="string">&#x27;ChunkLoadError&#x27;</span>;</span><br><span class="line"><span class="comment">/******/</span> error.type = errorType;</span><br><span class="line"><span class="comment">/******/</span> error.request = realSrc;</span><br><span class="line"><span class="comment">/******/</span> installedChunkData[<span class="number">1</span>](error);</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.l(url, loadingEnded, <span class="string">&quot;chunk-&quot;</span> + chunkId, chunkId);</span><br><span class="line"><span class="comment">/******/</span> &#125; <span class="keyword">else</span> installedChunks[chunkId] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// no prefetching</span></span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// no preloaded</span></span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// no HMR</span></span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// no HMR manifest</span></span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// no on chunks loaded</span></span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// install a JSONP callback for chunk loading</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> webpackJsonpCallback = <span class="function">(<span class="params">parentChunkLoadingFunction, data</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> [chunkIds, moreModules, runtime] = data;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// add &quot;moreModules&quot; to the modules object,</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// then flag all &quot;chunkIds&quot; as loaded and fire callback</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> moduleId, chunkId, i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">for</span>(moduleId <span class="keyword">in</span> moreModules) &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(__webpack_require__.o(moreModules, moduleId)) &#123;</span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.m[moduleId] = moreModules[moduleId];</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(runtime) <span class="keyword">var</span> result = runtime(__webpack_require__);</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(parentChunkLoadingFunction) parentChunkLoadingFunction(data);</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">for</span>(;i &lt; chunkIds.length; i++) &#123;</span><br><span class="line"><span class="comment">/******/</span> chunkId = chunkIds[i];</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(__webpack_require__.o(installedChunks, chunkId) &amp;&amp; installedChunks[chunkId]) &#123;</span><br><span class="line"><span class="comment">/******/</span> installedChunks[chunkId][<span class="number">0</span>]();</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> installedChunks[chunkIds[i]] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> chunkLoadingGlobal = self[<span class="string">&quot;webpackChunkwebpack_demo&quot;</span>] = self[<span class="string">&quot;webpackChunkwebpack_demo&quot;</span>] || [];</span><br><span class="line"><span class="comment">/******/</span> chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(<span class="literal">null</span>, <span class="number">0</span>));</span><br><span class="line"><span class="comment">/******/</span> chunkLoadingGlobal.push = webpackJsonpCallback.bind(<span class="literal">null</span>, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));</span><br><span class="line"><span class="comment">/******/</span> &#125;)();</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line"><span class="comment">/*!**********************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/index.js ***!</span></span><br><span class="line"><span class="comment">  \**********************/</span></span><br><span class="line">__webpack_require__.e(<span class="comment">/*! import() */</span> <span class="string">&quot;src_utils_js&quot;</span>).then(__webpack_require__.bind(__webpack_require__, <span class="comment">/*! ./utils */</span> <span class="string">&quot;./src/utils.js&quot;</span>)).then(<span class="function">(<span class="params">&#123;add&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> &#125;)()</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p><strong>dist/src/utils_js.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(self[<span class="string">&quot;webpackChunkwebpack_demo&quot;</span>] = self[<span class="string">&quot;webpackChunkwebpack_demo&quot;</span>] || []).push([[<span class="string">&quot;src_utils_js&quot;</span>],&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="string">&quot;./src/utils.js&quot;</span>:</span><br><span class="line"><span class="comment">/*!**********************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/utils.js ***!</span></span><br><span class="line"><span class="comment">  \**********************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line">__webpack_require__.r(__webpack_exports__);</span><br><span class="line"><span class="comment">/* harmony export */</span> __webpack_require__.d(__webpack_exports__, &#123;</span><br><span class="line"><span class="comment">/* harmony export */</span>   <span class="string">&quot;add&quot;</span>: <span class="function">() =&gt;</span> (<span class="comment">/* binding */</span> add)</span><br><span class="line"><span class="comment">/* harmony export */</span> &#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;)</span><br><span class="line"></span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure><p>相同的代码我们跳过，我们首先来看一下入口文件的执行代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line">__webpack_require__.e(<span class="string">&quot;src_utils_js&quot;</span>)</span><br><span class="line">  .then(__webpack_require__.bind(__webpack_require__, <span class="string">&quot;./src/utils.js&quot;</span>))</span><br><span class="line">  .then(<span class="function">(<span class="params">&#123;add&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>这个代码主要分成三部分:</p><ul><li>第一部分执行<code>__webpack_require__.e</code></li><li>第二部分生成一个<code>__webpack_require__</code>方法并绑定参数</li><li>第三部分去执行实际逻辑。</li></ul><p>我们来看下主要核心的中间代码<code>__webpack_require__.e</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* webpack/runtime/ensure chunk */</span></span><br><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">__webpack_require__.f = &#123;&#125;;</span><br><span class="line">__webpack_require__.e = <span class="function">(<span class="params">chunkId</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Promise</span>.all(</span><br><span class="line">      <span class="built_in">Object</span>.keys(__webpack_require__.f).reduce(<span class="function">(<span class="params">promises, key</span>) =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.f[key](chunkId, promises);</span><br><span class="line">        <span class="keyword">return</span> promises;</span><br><span class="line">      &#125;, [])</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>简单了解一下<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce">reduce</a></p><p>这段代码很奇怪，看上去来说实际可以视为作为一个<code>forEach</code>在使用。目的是试图去执行<code>__webpack_require__.f</code>这个对象中的所有方法，最后返回一个总的<code>Promise</code>。</p><p>至于执行的方法，目前只有一个<code>__webpack_require__.f.j</code>，里面是一堆代码总之暂且放置不看，我们可以将其视为加载js文件即可(通过生成script的方式)。</p><p>我们可以将其视为加载好<code>dist/src/utils_js.js</code>并将该文件里声明的对象的map添加到<code>__webpack_modules__</code>即可。</p><p>此时使用<code>__webpack_require__</code>去走之前的逻辑就可以正常调用模块了。</p><p>这样就实现了代码分割。</p><h3 id="一些动态加载的小细节"><a href="#一些动态加载的小细节" class="headerlink" title="一些动态加载的小细节"></a>一些动态加载的小细节</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main</span></span><br><span class="line"><span class="keyword">var</span> chunkLoadingGlobal = self[<span class="string">&quot;webpackChunkwebpack_demo&quot;</span>] = self[<span class="string">&quot;webpackChunkwebpack_demo&quot;</span>] || [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// src_utils_js.js</span></span><br><span class="line">(self[<span class="string">&quot;webpackChunkwebpack_demo&quot;</span>] = self[<span class="string">&quot;webpackChunkwebpack_demo&quot;</span>] || []).push([[<span class="string">&quot;src_utils_js&quot;</span>],&#123;...&#125;)</span><br></pre></td></tr></table></figure><p>通过这种命名空间方式解决了单页面多项目可能错误添加动态加载代码的问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chunkLoadingGlobal.push = webpackJsonpCallback.bind(<span class="literal">null</span>, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));</span><br></pre></td></tr></table></figure><p>重写数组的<code>push</code>方法,在<code>push</code>时做一些额外的操作<br>即执行<code>chunkLoadingGlobal.push(arg1, arg2)</code>时。执行<code>webpackJsonpCallback(chunkLoadingGlobal.push, arg1, arg2)</code>这种方式。老实说我没有想到这种写法的好处，但也算一种小技巧</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="统一module方式"><a href="#统一module方式" class="headerlink" title="统一module方式"></a>统一module方式</h3><p>webpack 将两种形式导出方式进行了一定程度上的统一，即不论写法如何，都通过<code>__webpack_require__</code>对模块进行引入，而对于导出的模块来说，都统一成module的样式。</p><p>区别在于<code>esmodule</code>的<code>default</code>导出和<code>commonjs</code>的module.exports导出略有区别</p><blockquote><p><em><code>esmodule</code>的<code>default</code>导出在生成的代码中地位和一般的<code>export</code>导出是一样的</em></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> esmodule </tag>
            
            <tag> commonjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TRPG Engine 的项目工程化实践</title>
      <link href="/posts/1daba7c3/"/>
      <url>/posts/1daba7c3/</url>
      
        <content type="html"><![CDATA[<h2 id="First-of-all"><a href="#First-of-all" class="headerlink" title="First of all"></a>First of all</h2><p>一个人维护一个项目很久了, 差不多是时候总结一些经验做一些些输出了。因此来汇总一下这些年我对我的开源项目<code>TRPG Engine</code>做的工程化实践。</p><p>首先，我们要明确一点，即为什么要做工程化:</p><ul><li>提升开发效率</li><li>降低开发成本</li><li>提升产品质量</li><li>降低企业成本</li></ul><p>所有的代码, 所有的技术都依托于业务, 所有的手段都是为了最终目的而服务的。因此我们工程化最终目的就是提高产出。</p><h2 id="Git-workflow"><a href="#Git-workflow" class="headerlink" title="Git workflow"></a>Git workflow</h2><p><img src="/images/git/1.jpeg"></p><p>参考文章:</p><ul><li><a href="https://guides.github.com/introduction/flow/">Understanding the GitHub flow</a></li><li><a href="https://nvie.com/posts/a-successful-git-branching-model/">https://nvie.com/posts/a-successful-git-branching-model/</a></li><li><a href="https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow">https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow</a></li></ul><h2 id="Commitlint"><a href="#Commitlint" class="headerlink" title="Commitlint"></a>Commitlint</h2><p>使用 <code>Commitlint</code> 来保证项目成员或者外部贡献者的提交确保同样的格式。</p><p><code>TRPG Engine</code>是使用 <a href="https://github.com/conventional-changelog/commitlint"><code>commitlint</code></a> 来实现的提交内容校验</p><p>一般常用的一种提交方式是 <code>angular</code> 格式。</p><p>例:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">fix</span>: some message</span><br><span class="line"></span><br><span class="line"><span class="attribute">fix(scope)</span>: some message</span><br></pre></td></tr></table></figure><p>参考文档: <a href="https://github.com/angular/angular/blob/master/CONTRIBUTING.md#-commit-message-format">https://github.com/angular/angular/blob/master/CONTRIBUTING.md#-commit-message-format</a></p><p>提交的类型说明:</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">feat：新功能（<span class="built_in">feature</span>）</span><br><span class="line"><span class="built_in">fix</span>：修补bug</span><br><span class="line">docs：文档（documentation）</span><br><span class="line"><span class="built_in">style</span>： 格式（不影响代码运行的变动）</span><br><span class="line">refactor：重构（即不是新增功能，也不是修改bug的代码变动）</span><br><span class="line">perf：性能优化</span><br><span class="line">test：增加测试</span><br><span class="line">chore：构建过程或辅助工具的变动</span><br></pre></td></tr></table></figure><p><a href="https://github.com/angular/angular/blob/master/CONTRIBUTING.md#type">https://github.com/angular/angular/blob/master/CONTRIBUTING.md#type</a></p><h4 id="通过标准的-commit-message-可以生成Change-log"><a href="#通过标准的-commit-message-可以生成Change-log" class="headerlink" title="通过标准的 commit message 可以生成Change log"></a>通过标准的 commit message 可以生成<code>Change log</code></h4><p>基于git commit message来自动收集并生成<code>CHANGELOG</code></p><p>在升版本时可以通过<code>standard-version</code>来实现<code>package.json</code> version和changelog一起生成</p><ul><li><a href="https://www.npmjs.com/package/conventional-changelog">conventional-changelog</a></li><li><a href="https://www.npmjs.com/package/standard-version">standard-version</a></li></ul><h2 id="Prettier-and-Eslint"><a href="#Prettier-and-Eslint" class="headerlink" title="Prettier and Eslint"></a>Prettier and Eslint</h2><p>确保项目有一个统一的格式是非常重要, 可以有效的防止贡献者因为不统一的格式带来的提交变更过大。</p><p>试想一下，一个人用的是4空格缩进，另一个人用的是2空格缩进。那么会来带的协作上的问题并导致<code>code review</code>无法正常进行</p><p>目前前端流行使用<code>prettier</code> + <code>eslint</code>的组合来确保项目的格式统一。</p><p><code>prettier</code>是目前前端流行的<code>Formatter</code>工具, 用于保证项目能具有统一的格式，各大编辑器平台都具有插件支持，同时也支持许多语言</p><blockquote><ul><li>官方文档: <a href="https://prettier.io/">https://prettier.io/</a></li></ul></blockquote><p><code>eslint</code> 是一款确保你的代码质量的工具，特别是融合了<code>tslint</code>后更加成为了前端代码质量保证的唯一选择。其功能与prettier有部分交集，因此在同时使用两者时需要使用<code>eslint</code>的<code>prettier</code>预设来确保不会出现冲突</p><blockquote><ul><li>官方文档：<a href="https://eslint.org/">https://eslint.org/</a></li><li><a href="https://github.com/prettier/eslint-config-prettier">eslint-config-prettier</a></li></ul></blockquote><p>另外推荐一个跨语言的格式工具, <a href="https://editorconfig.org/">EditorConfig</a>, 虽然功能没有<code>prettier</code>这么强大，但是他的优势是跨语言，更加具有通用性。</p><h4 id="使用-lint-staged-来在工程化运行时中确保格式正确"><a href="#使用-lint-staged-来在工程化运行时中确保格式正确" class="headerlink" title="使用 lint-staged 来在工程化运行时中确保格式正确"></a>使用 lint-staged 来在工程化运行时中确保格式正确</h4><ul><li><a href="https://www.npmjs.com/package/lint-staged">lint-staged</a></li></ul><h2 id="Testing-and-benchmark"><a href="#Testing-and-benchmark" class="headerlink" title="Testing and benchmark"></a>Testing and benchmark</h2><p>单元测试与基准测试是程序员要面对的两大关键测试方式。</p><p>单元测试应当用于几乎所有的代码, 来确保代码不出错(主要是可以防止其他协作者无意间改坏你的代码)</p><p>而基准测试用于对性能要求较高的场合，比如后端的高并发场景，以及前端的高CPU计算(By the way, 对于前端的高CPU场景我建议是使用web worker来处理，这样可以使用多线程而不会影响用户正常操作)</p><h4 id="如何写单元测试"><a href="#如何写单元测试" class="headerlink" title="如何写单元测试"></a>如何写单元测试</h4><p>总所周知，一个纯函数是最好测的。那么单元测试的存在就相当于监督我们时刻注意将一些可以抽象出来的纯函数抽象出来，来方便写单元测试。能有效提高代码质量。</p><p>而对于一些副作用比较大的场景，我们需要想办法构建其上下文。比如<code>TRPG Engine</code>的后端代码，单元测试就是真实起了一个空白的数据库, redis, 和后端实例，通过数据库操作以及及时清理测试过的数据库代码来保证环境干净</p><p>对于比较难以测试的前端组件, <code>TRPG Engine</code>的做法是打快照，通过快照的变更告知开发者是否有一个 <strong>预期/非预期</strong> 的变更出现</p><p>单元测试的存在也应当集成到CI中，以确保每次执行都可用。</p><h2 id="Bundler"><a href="#Bundler" class="headerlink" title="Bundler"></a>Bundler</h2><p>在现代前端编程中, 打包编译是前端不得不重视的一环。</p><p>从less scss等css拓展语言, 到ts, coffee的js拓展。</p><p>从babel的es6,7,8,9支持, 到各种动态加载, 各种优化压缩。</p><p>面对日益复杂的现状，前端已经离不开打包工具的存在。</p><p>一般来说，我们常用的打包工具是<code>webpack</code>。<code>webpack</code>大而全，并提供足够的自定义化能力。是目前来说前端业务开发打包的不二之选。但成也萧何败萧何，<code>webpack</code>虽然十分强大, 但是配置非常非常复杂，甚至有webpack工程师这一说法，因此在一些特殊场景下, 我也十分推荐一些其他的打包工具。</p><ul><li>如果是开发一个依赖库，我推荐 <a href="https://rollupjs.org/guide/en/">rollup</a>，小巧轻便，也兼容多种导出方式。</li><li>如果是开发一个小项目，不想写很多<code>webpack</code>配置, 我推荐<a href="https://github.com/parcel-bundler/parcel">parcel</a></li><li>如果受限于系统资源，在开发环境下因为webpack的大量资源占用, 很难有一个良好的开发体验，那么我推荐<a href="https://www.snowpack.dev/">snowpack</a>, 可以见我的另一篇博文: <a href="/posts/74598ef5">从 Webpack 到 Snowpack, 编译速度提升十倍以上——TRPG Engine迁移小记</a><blockquote><p>至于 <code>vite</code>, 我没有用过很难给出一个比较好的评价.</p></blockquote></li></ul><h2 id="CI-CD"><a href="#CI-CD" class="headerlink" title="CI/CD"></a>CI/CD</h2><p>Continuous Integration and Continuous Delivery<br>持续集成与持续交付</p><p>市面上有很多免费的CI系统, 比如 <code>travis</code>, <code>appveyor</code>, <code>circleci</code>, <code>github action</code>等等, 再比如gitlab自带的ci系统。</p><p>总的来说都大同小异, 我们使用CI系统无非是关注单元测试有没有跑通，如何可以的话顺便输出一份coverage覆盖率报告。如果再可以的话可以把代码编译了以后输出编译报告。来方便衡量每一次提交的代码质量。</p><p>一般来说CI/CD都放在一起来讲，因为只是最终的输出不一样罢了。</p><p>CD可以做一些每次提交都编译文件, 或者往特殊分支提交就部署页面的功能。(比如每次向<code>docs</code>提交代码都编译文档并部署到远程服务器上)</p><h2 id="Analytics-and-Monitor"><a href="#Analytics-and-Monitor" class="headerlink" title="Analytics and Monitor"></a>Analytics and Monitor</h2><p>一些现成的分析服务:</p><ul><li><code>Google Analytics</code></li><li><code>Datadog</code></li><li><code>Posthog</code></li><li><code>Sentry Tracking</code></li><li><code>Grafana</code></li><li><code>uptimerobot</code></li></ul><p>这些工具是帮助你的项目在上线后能分析或监控的方式。通过这些工具可以收集用户的行为，检测服务可用性等。</p><p>监控可以帮助你的服务稳定可靠，发生宕机的情况能够第一时间发现，减少用户损失。没有监控的服务就是没有地图和罗盘的轮船 —— 什么时候沉默？天知道!</p><p>而用户行为收集是下一步迭代的重要依据，如果是用户比较少用的功能则可以考虑减慢开发进度。</p><p>对于监控，我推荐<code>posthog</code>，这是一款新兴的分析系统。推荐的理由很简单，因为他是开源的，我们可以自己部署，然后把他的数据进行二次加工与处理。</p><h2 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h2><p>性能是提升用户体验的重要一环，即常规感知中的“卡不卡”。</p><p>我们有很多方式去提升性能，比如采集用户的首屏渲染时间，比如手动打开devtool去对具体某个操作进行堆栈分析，再比如用Lighthouse跑个分 —— google的工具都非常棒。</p><p>参考文档:</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Performance">Performance</a></li></ul><h2 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h2><p>日志应当是我们分析问题最关键的一步，重视日志是一个有一定规模的项目最基本的一步。</p><p>大部分项目都会记录本地日志，但本地日志过于原始，很难产生一定价值。目前业内流行的方案是为日志单独准备一个<code>elasticsearch</code>服务, 所有日志中心化到一个数据库，再通过配套的 <code>kibana</code> 进行数据检索。</p><p>另外使用外部日志中心的好处在于项目的微服务化与集群化。因为项目离开单实例部署后日志分散在各地，更加难以查询问题。</p><p>对于 <code>TRPG Engine</code> 来说，目前使用的第三方日志服务是 <code>Loggly</code>, 因为<code>ELK</code>部署较耗资源，而其他大多数的日志服务都是收费的。<code>Loggly</code>具有一定的免费额度, 但是对中文编码不是很友好。</p><p>相关资源:</p><ul><li>local file</li><li><code>Loggly</code></li><li><code>ELK</code></li><li>阿里云日志腾讯云日志等服务商…</li></ul><h2 id="Error-Report"><a href="#Error-Report" class="headerlink" title="Error Report"></a>Error Report</h2><p>除了日志, 我们可能需要一个单独的错误汇报中心。因为日志是一种被动式的、托底的问题查找方式。一个主动的错误汇报会让我们更早介入问题以防止更大的错误扩散。</p><p><code>TRPG Engine</code>使用了<code>Sentry</code>作为错误汇报中心。开源，云服务具有一定免费额度，错误汇报可以带上堆栈信息和相关上下文，并且新的错误会发送邮件到相关人员。</p><p>开源对于企业的意义在于能够自己部署，企业也可以部署自己的sentry，就像是gitlab一样</p><ul><li><code>Sentry</code></li></ul><h2 id="Develop-for-Distributed"><a href="#Develop-for-Distributed" class="headerlink" title="Develop for Distributed"></a>Develop for Distributed</h2><p>有一点比较重要的就是在开始一个项目的时候就要考虑到之后的场景。在开发时就需要考虑分布式部署的场景。至少对于可能有分布式的场景进行一层抽象，就算现在不做，以后也要做。这点<code>TRPG Engine</code>走过很多弯路。</p><ul><li>比如日志，需要考虑使用外部日志的情况</li><li>比如文件管理，需要考虑使用云文件</li><li>比如配置，需要考虑使用外部的配置中心</li><li>比如缓存，少用内存缓存而用外部缓存</li><li>比如数据库 —— 当然这个大多数情况不用操心，除非用的是sqlite</li></ul><p>因为现代的程序架构早就不是以前一台服务器打天下的时候了。有效组合各个服务可以帮助程序快速增长。</p><h2 id="Coding-with-config"><a href="#Coding-with-config" class="headerlink" title="Coding with config"></a>Coding with config</h2><p>基于配置的代码会使你的程序更加灵活。特别是线上情况往往不适合发布，或者长期故障。通过配置我们可以将一部分代码关闭以保证整体代码可用性。</p><p>很多公司的功能开发分成两种管理方案，一种是做功能时切出一个功能分支，等到开发完毕后再合并到主分支。</p><p>还有一种方案是持续合并到主干分支，但是由配置来将新功能关闭。</p><p>说不清那种方案好，但是基于配置进行开发给与工程化代码更加灵活。</p><h2 id="Read-with-Document-and-Comment"><a href="#Read-with-Document-and-Comment" class="headerlink" title="Read with Document and Comment"></a>Read with Document and Comment</h2><p>文档也是工程化代码的实践</p><p>一个静态文档网站可以帮助使用者快速理解整个项目</p><p>一行注释可以帮助代码阅读者理解你的用意，更重要的是可以防止其他的协作者在不了解你的用意的情况下改坏代码。</p><p>好的开源项目一定有足够文档，而一个好的企业项目代码中一定有很多注释。</p><p>对于企业业务项目来说，文档可能没有办法强制要求，但是需要明确一点的是注释是为自己写的，试想一下，一个复杂一点的方法，等一个月后，还能保证自己能理解当时自己的用意么？</p><h2 id="Flexible-Architecture"><a href="#Flexible-Architecture" class="headerlink" title="Flexible Architecture"></a>Flexible Architecture</h2><p>可变、灵活架构。</p><p>一个项目想要换底层架构是非常困难且痛苦的，想要解决这个问题，只有架构预先进行足够的设计，提前预想未来5年10年的业务变更。</p><p>比如插件化的架构就能保证业务代码的可拓展性。</p><p><a href="https://ministar.moonrailgun.com/">MiniStar: 一个用于实现微内核(插件化)架构的前端框架</a></p><h2 id="Dockerize"><a href="#Dockerize" class="headerlink" title="Dockerize"></a>Dockerize</h2><p><code>docker</code>是现在开发的趋势，统一且单一的环境。</p><p>做过以前代码部署的工程师一定了解在不同环境下部署程序的痛苦，就算打包成一个<code>war</code>包也可能会有各种环境导致的奇怪问题。而docker就是解决这个问题的工具。</p><p>在实际中有很多使用场景:</p><ul><li>统一开发环境(统一开发环境)</li><li>快速部署(无需搭建环境)</li><li>集群部署(k8s, docker swarm)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> TRPG Engine </tag>
            
            <tag> 工程化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一个多平台End of Line的坑</title>
      <link href="/posts/4b9f1f29/"/>
      <url>/posts/4b9f1f29/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在执行自己编译的cli时出现:</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env: <span class="keyword">node</span><span class="title">\r</span>: No such file <span class="keyword">or</span> directory</span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>在windows电脑发布代码, 其单行结束符为<code>\r\n</code>。然后mac执行时仅将<code>\n</code>视为换行符。因此程序试图去找<code>node\r</code>这个程序。当然是找不到的了。</p><h2 id="如何处理该问题"><a href="#如何处理该问题" class="headerlink" title="如何处理该问题?"></a>如何处理该问题?</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx crlf <span class="params">--set=LF</span> <span class="string">./</span>**/*<span class="string">.js</span></span><br></pre></td></tr></table></figure><p>可以在发布脚本执行前执行一下以确保<code>End of Line</code>的正确。</p><p>相关库</p><ul><li><a href="https://www.npmjs.com/package/crlf">https://www.npmjs.com/package/crlf</a></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/361710559">https://zhuanlan.zhihu.com/p/361710559</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> npm </tag>
            
            <tag> 跨平台 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>requirejs踩坑记录</title>
      <link href="/posts/4c9731f9/"/>
      <url>/posts/4c9731f9/</url>
      
        <content type="html"><![CDATA[<h2 id="灵异事件之薛定谔的白屏"><a href="#灵异事件之薛定谔的白屏" class="headerlink" title="灵异事件之薛定谔的白屏"></a>灵异事件之薛定谔的白屏</h2><h4 id="场景复现"><a href="#场景复现" class="headerlink" title="场景复现"></a>场景复现</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> sha1Script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        sha1Script.src = <span class="string">&#x27;https://xxx/sha1.min.js&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        sha1Script.addEventListener(<span class="string">&#x27;load&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// any logic</span></span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.body.appendChild(sha1Script);</span></span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;require.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>main.js</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">  <span class="comment">// ... here is config</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">requirejs.onError = <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>([</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// main logic</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>控制台会出现报错<code>Error: Mismatched anonymous define() module: function()&#123;return y&#125;</code>, 但是有时候白屏有时候正常。</p><h4 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h4><p>可知白屏是因为标记为<code>main logic</code>的代码没有正常工作导致的。</p><p>分析下来可得如下结论</p><p>当出现错误时代码执行顺序为:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-</span>&gt; <span class="selector-tag">require</span><span class="selector-class">.min</span><span class="selector-class">.js</span></span><br><span class="line"><span class="selector-tag">-</span>&gt; <span class="selector-tag">sha1</span><span class="selector-class">.min</span><span class="selector-class">.js</span></span><br><span class="line"><span class="selector-tag">-</span>&gt; <span class="selector-tag">main</span><span class="selector-class">.js</span></span><br></pre></td></tr></table></figure><p>当出现正确时代码执行顺序为:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-</span>&gt; <span class="selector-tag">require</span><span class="selector-class">.min</span><span class="selector-class">.js</span></span><br><span class="line"><span class="selector-tag">-</span>&gt; <span class="selector-tag">main</span><span class="selector-class">.js</span></span><br><span class="line"><span class="selector-tag">-</span>&gt; <span class="selector-tag">sha1</span><span class="selector-class">.min</span><span class="selector-class">.js</span></span><br></pre></td></tr></table></figure><p>易得是代码执行时序的问题。那么问题来了, 为什么会出现这种情况?</p><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><p>我们可以看一下<code>requirejs</code>的源码: <a href="https://github.com/requirejs/requirejs/blob/HEAD/require.js">https://github.com/requirejs/requirejs/blob/HEAD/require.js</a></p><p>当我们执行<code>sha1.min.js</code>时, <code>sha1.min.js</code>检测到当前有amd环境，调用<code>define</code>将自己注入到<code>requirejs</code>的运行时中, 因为没有调用<code>require</code>相关方法, 因此<code>requirejs</code>将其定义推入自身的<code>globalDefQueue</code>中。(相关代码: <a href="https://github.com/requirejs/requirejs/blob/898ff9e60eb6897500720151c0b488b8749fbe8d/require.js#L2061">L2061</a>)。</p><p>当我们执行<code>main.js</code>时, 调用<code>require.config</code>时, <code>requirejs</code>会尝试消费所有的<code>globalDefQueue</code>, 此时在queue中的参数为[null, [], function(){…}], 因为第一个参数(name)为null, 则会抛出异常<code>Mismatched anonymous define() module...</code>(相关代码: <a href="https://github.com/requirejs/requirejs/blob/898ff9e60eb6897500720151c0b488b8749fbe8d/require.js#L1244">L1244</a>)</p><p><code>requirejs</code> 会通过调用自身的<code>onError</code>方法抛出异常, 如果没有手动覆盖<code>onError</code>的话会调用内置的<code>defaultOnError</code>方法(相关代码: <a href="https://github.com/requirejs/requirejs/blob/898ff9e60eb6897500720151c0b488b8749fbe8d/require.js#L1870">L1870</a>), 而<code>defaultOnError</code>的实现很简单:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defaultOnError</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接向顶层抛出异常, 导致整个script的运行时中断，后续的代码当然无法执行。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>可以看见原来的实现是有onError的覆写的, 只不过因为在<code>require.config</code>之后执行导致没有执行。</p><p>最佳的解决方案是尽可能早的覆写<code>requirejs.onError</code>方法。</p><h4 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h4><p>如果看源码的话。可以看到<code>requirejs</code>写明了允许匿名模块</p><blockquote><p>Allow for anonymous modules</p></blockquote><p><a href="https://github.com/requirejs/requirejs/blob/898ff9e60eb6897500720151c0b488b8749fbe8d/require.js#L2064">相关代码</a></p><p>但是实际使用中却会报错。而且默认的报错是直接向顶层抛出。</p><p>这种情况就是A做错了，但是却导致B无法正常执行。这种场景非常难debug</p>]]></content>
      
      
      
        <tags>
            
            <tag> requirejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome 笔记 - 处理异常 ERR_UNSAFE_PORT</title>
      <link href="/posts/a118f8f2/"/>
      <url>/posts/a118f8f2/</url>
      
        <content type="html"><![CDATA[<p>在chrome进行本地开发时，可能会出现如下问题:</p><p><img src="/images/chrome/1.png"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul><li><a href="https://superuser.com/questions/188006/how-to-fix-err-unsafe-port-error-on-chrome-when-browsing-to-unsafe-ports">https://superuser.com/questions/188006/how-to-fix-err-unsafe-port-error-on-chrome-when-browsing-to-unsafe-ports</a></li></ul><h2 id="本质原因"><a href="#本质原因" class="headerlink" title="本质原因"></a>本质原因</h2><p>请不要使用如下列出的端口, 因为这些端口被视为有意义的:</p><ul><li><a href="https://github.com/chromium/chromium/blob/805f50e9d42cf0ac5e3108ae2c6b36baa0ea5a90/net/base/port_util.cc#L64-L147">https://github.com/chromium/chromium/blob/805f50e9d42cf0ac5e3108ae2c6b36baa0ea5a90/net/base/port_util.cc#L64-L147</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> chrome </tag>
            
            <tag> chromium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vercel 国内无法访问</title>
      <link href="/posts/968454a3/"/>
      <url>/posts/968454a3/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://www.vercel-status.com/incidents/r758bhbklgfd">Errors Accessing From China</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vercel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于人生, 关于生老病死</title>
      <link href="/posts/6719aaf5/"/>
      <url>/posts/6719aaf5/</url>
      
        <content type="html"><![CDATA[<p>今天凌晨4点多, 噩耗传来。小时候一直疼爱我的外公结束了自己的一生。自然死亡, 寿终正寝。</p><p>心里有说不出的难受，又一位长辈永远离开了我。昨天见了外公的最后一眼，面对躺在床上无法与人交流，生活不能自理的老人，纵有千言万语我却说不出一句话，而现在，我已经永远失去了这个机会。而逐渐的，令人恐惧而不得不面对的是，迟早会轮到我的父母。而我无疑是爱他们的。我不害怕死亡，但我害怕离别。</p><p>有时候我就会在想，宇宙广阔而浩瀚，人如浮游生物一般，终生被重力束缚在大地上。而短短这一生百年，大多数人也无法对人类史留下什么令人称道的痕迹。令人舒适的事在于所有的一切都依据之前的惯性前进，昨天、今天、明天，每天都按照一样的痕迹走下去，今天的自己比昨天的自己更加优秀一点，而明天的自己再比今天的自己更加优秀一点，太阳照常升起，照常落下。而在这惯性之中，难免生活会时不时来打破这种惯性：生老病死，自然天灾，人心莫测。有时候我会想，也许人生就是一场游戏，为了不让这个游戏太过无聊，设计者会在这场游戏中增加一些随机的事件，也许是好事、也许是坏事。但往往总是违背人们本身的意愿去发生。</p><p>有的时候，人生平静如水，让人觉得厌烦与无聊。而有的时候，意外却接踵而至，这时候，人又开始向往原来平静的生活了。人本身就是这样矛盾对立统一的综合体。</p><p>而拓展到整个宇宙的视角中，一个人内心不论是怎么样的波涛汹涌，在宇宙的尺度下都会显得无比渺小。对面这浩瀚空间，也许很多人用一生为之奋斗的东西，其实毫无意义。但也不能说是毫无意义，每个独立的个体都没有义务向他人负责，自我实现就是最大的负责。</p><p>然而, 生活还要继续, 人生还要前行。做好自己，行出不后悔，即可。</p><p>一些胡言乱语罢了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 胡言乱语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTPS客户端证书校验</title>
      <link href="/posts/Infinity/"/>
      <url>/posts/Infinity/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>互联网正在逐步走向越来越安全的趋势, <code>Chrome 90</code> 将默认使用<code>https</code>。而但凡对这方面有一定了解的都会知道<code>https</code>: 证书, 校验, 签发机构…等等等等。</p><p>而这些我们所熟知的东西, 即一般我们所说的通过ssl层进行传输与校验的, 一般指的是服务端证书。而我们今天要说说客户端安全证书。</p><h2 id="Client-Authenticate"><a href="#Client-Authenticate" class="headerlink" title="Client Authenticate"></a>Client Authenticate</h2><p>客户端安全证书一般不常见, 只出现在对安全有一定需求的内部系统中。他的作用是规定哪些人可以访问: 客户端根据服务端配置的证书签发来下的子证书来对服务端的资源进行访问, 而服务端会对其进行校验 —— 校验不通过则不允许访问。</p><p>服务端证书恰恰相反: 他是客户端来校验服务端是否是一个正确的, 没有被篡改过的服务端。</p><h2 id="Handshake"><a href="#Handshake" class="headerlink" title="Handshake"></a>Handshake</h2><p>以下是一个客户端进行TLS握手授权的示例:</p><ul><li>协商阶段<ul><li>客户端发送一个 <code>ClientHello</code> 消息到服务端</li><li>服务端返回一个 <code>ServerHello</code> 消息</li><li>服务端发送他的 <code>Certificate</code> 消息</li><li>服务端发送他的 <code>ServerKeyExchange</code> 消息以用于交换秘钥</li><li>服务端发送一个 <code>CertificateRequest</code> 来请求客户端发送他的证书</li><li>服务端发送一个 <code>ServerHelloDone</code> 消息表示服务端已经完成了协商消息的发送</li><li>客户端返回一个 <code>Certificate</code> 消息, 其中包含了客户端的证书</li><li>客户端发送 <code>ClientKeyExchange</code> 消息, 其中包含了公钥或者公钥加密的 <code>PreMasterSecret</code></li><li>客户端发送 <code>CertificateVerify</code> 消息, 这是使用客户机证书的私钥对先前握手消息的签名。可以使用客户端证书的公钥来验证此签名。这让服务器知道客户端可以访问证书的私钥，以确保客户端是合法的。</li><li>协商完毕, 现在他们双方有一个用于对称加密的随机数秘钥了</li></ul></li><li>客户端发送一个<code>ChangeCipherSpec</code> 记录来告知服务器: 所有的信息都将进行身份验证</li><li>服务端返回 <code>ChangeCipherSpec</code></li><li>握手完毕</li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://en.wikipedia.org/wiki/Transport_Layer_Security#Client-authenticated_TLS_handshake">Transport_Layer_Security</a></li><li><a href="https://fardog.io/blog/2017/12/30/client-side-certificate-authentication-with-nginx/">CLIENT-SIDE CERTIFICATE AUTHENTICATION WITH NGINX</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> auth </tag>
            
            <tag> https </tag>
            
            <tag> ssl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字节跳动面试记录</title>
      <link href="/posts/443581a5/"/>
      <url>/posts/443581a5/</url>
      
        <content type="html"><![CDATA[<h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><p>关于项目:</p><ul><li>抽象结构树<ul><li>如何根据一颗 AST 渲染出组件</li></ul></li><li>富文本编辑器<ul><li>实现的难点</li></ul></li></ul><p>常规问题:</p><ul><li><p>webpack 打包细节</p><ul><li>commonjs 与 esmodule 是如何相互转换(这里不会)</li></ul></li><li><p>Task 与 Microtask 的区别, 以及时序</p><p>详细说明可以见: <a href="https://html.spec.whatwg.org/multipage/webappapis.html#queuing-tasks">https://html.spec.whatwg.org/multipage/webappapis.html#queuing-tasks</a></p><p>简单的说就是每次执行<code>task</code>之前会把<code>microtask</code>都处理掉。在处理过程中加入的<code>microtask</code>也会按照顺序处理掉</p></li><li><p>闭包问题:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是什么? (我回答了<code>5个4</code>, 其实是<code>5个5</code>..扶额)</p><p>然后问如何让其输出 0 1 2 3 4<br>解法一:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params">_i</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(_i);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解法二:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我没有说出解法二, 想了半天想出了一个解法三。。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">Promise</span>.resolve(i).then(<span class="function">(<span class="params">i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>中文数字转阿拉伯数字</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 五千三百万零五百零一</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chineseNumMap = &#123;</span><br><span class="line">  一: <span class="number">1</span>,</span><br><span class="line">  二: <span class="number">2</span>,</span><br><span class="line">  三: <span class="number">3</span>,</span><br><span class="line">  四: <span class="number">4</span>,</span><br><span class="line">  五: <span class="number">5</span>,</span><br><span class="line">  六: <span class="number">6</span>,</span><br><span class="line">  七: <span class="number">7</span>,</span><br><span class="line">  八: <span class="number">8</span>,</span><br><span class="line">  九: <span class="number">9</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> unitMap = &#123;</span><br><span class="line">  千: <span class="number">1000</span>,</span><br><span class="line">  百: <span class="number">100</span>,</span><br><span class="line">  十: <span class="number">10</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseChineseNumWhenLowerThan10K</span>(<span class="params">chineseNum: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> hasNum = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">let</span> currentNum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> s <span class="keyword">of</span> chineseNum) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hasNum === <span class="literal">false</span> &amp;&amp; chineseNumMap[s]) &#123;</span><br><span class="line">      res += chineseNumMap[s];</span><br><span class="line">      hasNum = <span class="literal">true</span>;</span><br><span class="line">      currentNum = chineseNumMap[s];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hasNum === <span class="literal">true</span> &amp;&amp; unitMap[s]) &#123;</span><br><span class="line">      res -= currentNum;</span><br><span class="line">      res += currentNum * unitMap[s];</span><br><span class="line">      hasNum = <span class="literal">false</span>;</span><br><span class="line">      currentNum = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chineseNumToInt</span>(<span class="params">input: <span class="built_in">string</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> chineseNumArr = input.split(<span class="string">&quot;万&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  res += parseChineseNumWhenLowerThan10K(chineseNumArr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> chineseNumArr[<span class="number">1</span>] === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    res *= <span class="number">10000</span>;</span><br><span class="line">    res += parseChineseNumWhenLowerThan10K(chineseNumArr[<span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(chineseNumToInt(<span class="string">&quot;五千三百万零五百零一&quot;</span>));</span><br></pre></td></tr></table></figure></li></ul><h2 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h2><p>一面过后第二天 HR 就打电话过来约二面，就效率方面来说还是非常迅速的</p><p>二面没有考察具体代码，主要是问了问项目方面的问题。</p><p>比如公司项目的架构，公司团队协作方面是如何协作的，除了平时工作之外有没有做什么其他的事情，有自己的项目么，自己的项目由什么亮点难点这种比较抽象的问题。</p><p>其中可能也有混入价值观方面的问题。总之需要注意一下。</p><p>然后我这面被刷了，第三天收到了感谢面试的信。至少有个反馈，从这点来看字节做的还是非常不错的。</p><h1 id="再战"><a href="#再战" class="headerlink" title="再战"></a>再战</h1><p>又被别的部门捞起来了, 之前是飞书, 现在是抖音部门, 就再战一次呗。</p><h2 id="一面-1"><a href="#一面-1" class="headerlink" title="一面"></a>一面</h2><ul><li>聊聊项目</li><li>esmodule 和 commonjs 的区别</li><li>webpack 打包原理</li><li>nodejs 的 event loop</li><li>nodejs 的使用 microtask 和 task 的时机</li></ul><h3 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h3><p>路径总和：给你二叉树的根节点 root 和一个表示目标和的整数 targetSum ，判断该树中是否存在 根节点到叶子节点 的路径，这条路径上所有节点值相加等于目标和 targetSum</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">  left: TreeNode | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line">  right: TreeNode | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line">  value: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTreePathSum</span>(<span class="params">node: TreeNode, targetSum: <span class="built_in">number</span></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!node) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (targetSum - node.value === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node.left === <span class="literal">null</span> &amp;&amp; node.right === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果为叶子节点: 即没有子节点</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 否则继续往下走。</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    getTreePathSum(node.left, targetSum - node.value) ||</span><br><span class="line">    getTreePathSum(node.right, targetSum - node.value)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="keyword">new</span> TreeNode();</span><br><span class="line">root.value = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> left = <span class="keyword">new</span> TreeNode();</span><br><span class="line">left.value = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> right = <span class="keyword">new</span> TreeNode();</span><br><span class="line">right.value = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">root.left = left;</span><br><span class="line">root.right = right;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getTreePathSum(root, <span class="number">5</span>));</span><br></pre></td></tr></table></figure><h2 id="二面-1"><a href="#二面-1" class="headerlink" title="二面"></a>二面</h2><ul><li>js有哪些类型<ul><li><del><code>number</code>, <code>boolean</code>, <code>string</code>, <code>object</code>, <code>undefined</code>, <code>symbol</code></del></li><li>以上是我的回答, 是错误答案，正确答案应该是 <code>string</code>, <code>number</code>, <code>bigint</code>, <code>boolean</code>, <code>undefined</code>, <code>symbol</code>, <code>null</code>. (Reference: <a href="https://developer.mozilla.org/en-US/docs/Glossary/Primitive">https://developer.mozilla.org/en-US/docs/Glossary/Primitive</a>)</li></ul></li><li>js中基本类型和引用类型分别存在哪里<ul><li>基本类型存在栈中，引用类型的数据存在堆中</li></ul></li><li>如何获得地址输入 - 缓存 - 加载模块 - 渲染 - 加载请求 - 渲染可交互 这个过程中各个区域的时延</li><li>如何设计一个全链路的监控体系<br>我的回答:<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 监听所有的用户事件</span><br><span class="line">  并区分重点事件，和普通事件。</span><br><span class="line"><span class="bullet">2.</span> 全局捕获错误信息。并将错误信息上报，以及错误信息所在的堆栈信息。</span><br><span class="line"><span class="code">        如果可能的话，同时发送相关的dom接口与网络请求，以及截屏。</span></span><br><span class="line"><span class="code">        如果是无法复现的一些线上问题，内置一个web录屏工具，在开启一个flag后录屏并将录屏信息上传(rrweb)</span></span><br><span class="line"><span class="code">3. 对用户的操作，比如RUM，等关键信息，以及用户的请求。划分不同的measure标准。并通过这些信息来衡量用户的痛苦程度。</span></span><br><span class="line"><span class="code">      资源是有限的，我们应当优先处理用户最痛苦的部分——即使用频率最高，相对痛苦程度最高的部分。</span></span><br><span class="line"><span class="code">4. 增加有效的反馈机制，比如聊天机器人，比如报出异常时弹出反馈错误的模态框。或者引导用户到相关的社区。来尽可能让用户知晓我们会尽快解决问题。</span></span><br><span class="line"><span class="code">    同时能够收集来自用户的直接反馈，而这些是看log很难看到的信息。</span></span><br><span class="line"><span class="code">5. 对线上服务进行监控。使用监控工具来检测各个关键服务，以及相对独立的服务的可访问性。以及相关的报警措施(比如钉钉消息)</span></span><br></pre></td></tr></table></figure></li><li>React Native 的热更新 / 部署<ul><li>拆解</li><li>怎么推送</li></ul></li><li>长列表 VirturalList<ul><li>如何解决闪屏</li></ul></li><li>React Native的事件推送</li></ul><h3 id="算法题-1"><a href="#算法题-1" class="headerlink" title="算法题"></a>算法题</h3><p>二面算法题难度急速升高, 反正我都没做过。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">用 Javascript 对象模拟 DOM 树，并实现它的 render 方法，通过调用该方法可以转成真正的 DOM 节点，例如我们已经实现了 element.js，通过 require(<span class="symbol">&#x27;element.js</span>&#x27;)，我们可以定义 ul， 如下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title">el</span>(tag, props, children) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我的算法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">el</span>(<span class="params">tag, props, children</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> el = <span class="built_in">document</span>.createElement(tag);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> props) &#123;</span><br><span class="line">      el.setAttrible(key, props[key])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> childrenEls = children.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">typeof</span> item === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> item;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> el(item.tag, item.props, item.children);</span><br><span class="line">  &#125;)</span><br><span class="line">  el.append(...childrenEls)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> el;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">给你一副类似于如下的地图:</span><br><span class="line"> <span class="number">0000000000</span></span><br><span class="line"> <span class="number">0010001011</span></span><br><span class="line"> <span class="number">000010</span>E001</span><br><span class="line"> <span class="number">00S0000100</span></span><br><span class="line"> <span class="number">0000001000</span></span><br><span class="line"> <span class="number">1000000000</span></span><br><span class="line"></span><br><span class="line">初始时你在S的位置, 你可以向上下左右四个方向发射一枚子弹<span class="comment">; 子弹碰到1时, 会顺时针变向90度, 然后继续前进; 问你在S向哪个方向射击, 能够最快将子弹打入E内; 假设一定有一个方向可以成功, 如上图中向上射击;</span></span><br></pre></td></tr></table></figure><p>我的算法:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> land = [</span><br><span class="line">  <span class="string">&#x27;0000000000&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;0010001011&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;000010E001&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;00S0000100&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;0000001000&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;1000000000&#x27;</span></span><br><span class="line">].map(<span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findS</span>(<span class="params">target: <span class="built_in">string</span></span>): [<span class="title">number</span>, <span class="title">number</span>] </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; land.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; land[i].length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(land[i][j] === target) &#123;</span><br><span class="line">        <span class="keyword">return</span> [i, j]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLandSymbol</span>(<span class="params">y: <span class="built_in">number</span>, x: <span class="built_in">number</span></span>): &#x27;0&#x27; | &#x27;1&#x27; | &#x27;<span class="title">S</span>&#x27; | &#x27;<span class="title">E</span>&#x27; | <span class="title">undefined</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> land[y][x] <span class="keyword">as</span> <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> size = [land.length, land[<span class="number">0</span>].length];</span><br><span class="line"><span class="keyword">const</span> sPos = findS(<span class="string">&#x27;S&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tryPath</span>(<span class="params">step: <span class="built_in">number</span>, currentPos: [<span class="built_in">number</span>,<span class="built_in">number</span>], vector: [<span class="built_in">number</span>, <span class="built_in">number</span>]</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  step = step + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> symbol = getLandSymbol(currentPos[<span class="number">0</span>], currentPos[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">if</span>(symbol === <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// [-1. 0] =&gt; [0, 1]</span></span><br><span class="line">    <span class="comment">// [0, 1] =&gt; [1, 0]</span></span><br><span class="line">    <span class="comment">// [1, 0] =&gt; [0, -1]</span></span><br><span class="line">    <span class="comment">// [-1, 0] =&gt; [0, 1]</span></span><br><span class="line">    vector = [vector[<span class="number">1</span>], -vector[<span class="number">0</span>]] <span class="comment">// 顺时针旋转90deg</span></span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(symbol === <span class="string">&#x27;E&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> step;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(symbol === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">999999</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> tryPath(step, [currentPos[<span class="number">0</span>] + vector[<span class="number">0</span>], currentPos[<span class="number">1</span>] + vector[<span class="number">1</span>]], vector);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(tryPath(<span class="number">0</span>, sPos, [-<span class="number">1</span>, <span class="number">0</span>])); <span class="comment">// 向上</span></span><br></pre></td></tr></table></figure><h2 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h2><p>面试官上来就说，之前面了很多技术问题，我们来聊一聊项目吧。</p><p>大概问了问项目经历，工作经历，职业规划，如何协作，如何codereview，最近在学什么新技术等等看上去很随意的问题。</p><p>回头跟朋友们复盘了一下，其实是一道情商题，只有情商高的人才能答对，而我情商。。不高，就是一个憨憨。</p><p>如何面对这种软刀子题:</p><p>记住以下几点：</p><ul><li>面试不是跟你谈心，作为候选人得揣测对方想听啥。</li><li>可以先说下自己有啥优点，经验。能为公司，部门，要做的事情带来什么转机。然后再夸一把公司，部门。说来虚心学习。</li><li>学会包装自己，技术是为业务服务的</li></ul><h1 id="三战"><a href="#三战" class="headerlink" title="三战"></a>三战</h1><p>又换了个团队继续，直接从二面开始</p><h2 id="二面-2"><a href="#二面-2" class="headerlink" title="二面"></a>二面</h2><ul><li>项目经历。项目是如何打包，如何发布的。</li><li>有使用过一些自动化工具来确保项目质量么。</li><li>有了解过<code>webpack</code>打包原理么？你们的项目是用什么打包的</li><li>了解过<code>lock</code>文件么，升级单个依赖时会遇到什么坑</li><li>看你的项目用到过<code>cypress</code>, 你是如何解决<code>cypress</code>的下载问题的</li></ul><p>题:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">设计一个组件，用 React 编写，写出伪代码，有三个要求</span><br><span class="line"></span><br><span class="line">Input 组件</span><br><span class="line">非受控</span><br><span class="line">Validate:</span><br><span class="line"><span class="bullet">    1.</span> 只接受英文字母</span><br><span class="line"></span><br><span class="line"><span class="bullet">    2.</span> 如果出现不合法的字符，就删掉</span><br></pre></td></tr></table></figure><p>我的解法:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;useState, useCallback&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Props &#123;</span><br><span class="line">    initVal: <span class="built_in">string</span>;</span><br><span class="line">    onChange: <span class="function">(<span class="params">newVal: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> MyInput: React.FC&lt;Props&gt; = React.memo(<span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [val, setVal] = useState(props.initVal ?? <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> handleChange = useCallback(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> text = e.target.value;</span><br><span class="line">        <span class="keyword">const</span> newVal = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> c <span class="keyword">of</span> text) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="regexp">/[a-zA-Z]/</span>.test(c)) &#123;</span><br><span class="line">                <span class="comment">// 这里忘记怎么取c的ascii码的方法了，直接用正则表达式先对付着</span></span><br><span class="line">                newVal += c</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> props.onChange === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">            props.onChange(newVal);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setVal(newVal);</span><br><span class="line">    &#125;, [props.onChange])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;val&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;handleChange&#125;</span> /&gt;</span></span></span><br><span class="line">&#125;)</span><br><span class="line">MyInput.displayName = <span class="string">&#x27;MyInput&#x27;</span></span><br></pre></td></tr></table></figure><p>其实还有就是使用<code>jquery</code>时代的代码来进行处理，然后外面包一层react代码<br>但是我觉得不够<code>react</code>因此没有选择这个方案。</p><h2 id="三面-1"><a href="#三面-1" class="headerlink" title="三面"></a>三面</h2><p>杂七杂八的聊了聊，大部分都忘了，就记录一下记得的</p><ul><li>讲讲你的开源项目</li><li>你的开源项目是怎么宣传的，取得了什么样的milestone</li><li>你的开源项目未来的发展是怎么样的</li><li>你公司的产品的基础架构是怎么样的</li><li>你对未来三年的职业规划是怎么样的</li><li>你希望做什么样的产品，是to b的还是to develop的</li><li>你如何实现一个需求，在用户不知道自己想要什么样的功能的情况下</li><li>你现在是965， 可以接受996么</li></ul><p>一道题:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">实现 tom().eat(<span class="string">&#x27;apple&#x27;</span>).play(<span class="string">&#x27;football&#x27;</span>).sleep(<span class="number">5</span>).eat(<span class="string">&#x27;apple&#x27;</span>).play(<span class="string">&#x27;football&#x27;</span>)</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line"><span class="regexp">//</span> tom</span><br><span class="line"><span class="regexp">//</span> eat apple</span><br><span class="line"><span class="regexp">//</span> play football</span><br><span class="line"><span class="regexp">//</span> 停顿 <span class="number">5</span> s</span><br><span class="line"><span class="regexp">//</span> eat apple</span><br><span class="line"><span class="regexp">//</span> play football</span><br></pre></td></tr></table></figure><p>我的写法, 其实不对。主要是一个sleep函数不太会写。求大佬给出正解:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tom</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Tom()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tom</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.p = <span class="built_in">Promise</span>.resolve()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;tom&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Tom.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params">name: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.p.then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;eat &#x27;</span> + name);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Tom.prototype.play = <span class="function"><span class="keyword">function</span>(<span class="params">name: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.p.then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;play &#x27;</span> + name);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Tom.prototype.sleep = <span class="function"><span class="keyword">function</span>(<span class="params">interval: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.p.then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              resolve(<span class="number">1</span>);</span><br><span class="line">          &#125;, interval * <span class="number">1000</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四战"><a href="#四战" class="headerlink" title="四战"></a>四战</h1><h2 id="直接三面"><a href="#直接三面" class="headerlink" title="直接三面"></a>直接三面</h2><ul><li>聊了聊项目</li><li>怎么做工程化</li><li>如何监控前端的性能</li><li>我们会做很多页面，如何提升开发体验</li><li>了解无头浏览器么？它内部的引擎是如何去计算代码的</li></ul><p>题:<br>实现一个LRU:</p><p>我的回答:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRU</span> </span>&#123;</span><br><span class="line">    list: <span class="built_in">string</span>[] = [];</span><br><span class="line">    map: Record&lt;<span class="built_in">string</span>, unknown&gt; = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    get(key: <span class="built_in">string</span>): unknown &#123;</span><br><span class="line">        <span class="keyword">const</span> index = <span class="built_in">this</span>.list.findIndex(<span class="function">(<span class="params">item</span>) =&gt;</span> key === item);</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.list.splice(index, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.list.unshift(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.map[key];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    set(key: <span class="built_in">string</span>, <span class="attr">value</span>: unknown): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> index = <span class="built_in">this</span>.list.findIndex(<span class="function">(<span class="params">item</span>) =&gt;</span> key === item);</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.list.splice(index, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.list.unshift(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.list.length &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> _key = <span class="built_in">this</span>.list.pop();</span><br><span class="line">            <span class="keyword">delete</span> <span class="built_in">this</span>.map[_key];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.map[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我的不是一个优解。<br>建议正确的答案参考:</p><ul><li>Map 实现</li><li>双向链表实现</li></ul><h1 id="五战"><a href="#五战" class="headerlink" title="五战"></a>五战</h1><p>又被教育部门捞起来了，反正我来者不拒继续面呗。</p><h2 id="一面-2"><a href="#一面-2" class="headerlink" title="一面"></a>一面</h2><ul><li>一个空数组的原型链是怎么样的</li><li>用过flex么? 讲讲flex, 有那些熟悉，干嘛用的</li><li>webpack_require esmodule commonjs, 他们的区别是什么。esmodule可以通过拼字符串来动态加载么</li><li>function的构造函数与class的构造函数有什么区别</li><li>讲讲HTTP2解决了什么问题<ul><li>二进制传输</li><li>Header 压缩</li><li>多路复用</li><li>server push</li><li>TLS(虽然HTTP2不强制, 但是chrome, firefox 只支持tls的HTTP2)</li></ul></li><li>讲讲箭头函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">inner = <span class="string">&#x27;window&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(inner);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.inner);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> inner = <span class="string">&#x27;1-1&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        inner: <span class="string">&#x27;1-2&#x27;</span>,</span><br><span class="line">        say: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(inner);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.inner);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> inner = <span class="string">&#x27;2-1&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        inner: <span class="string">&#x27;2-2&#x27;</span>,</span><br><span class="line">        say: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(inner);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.inner);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">say();<span class="comment">// window window</span></span><br><span class="line">obj1.say(); <span class="comment">// 1-1 1-2</span></span><br><span class="line">obj2.say(); <span class="comment">// 2-1 window</span></span><br><span class="line">obj1.say = say;</span><br><span class="line">obj1.say(); <span class="comment">// window 1-2</span></span><br><span class="line">obj1.say = obj2.say;</span><br><span class="line">obj1.say(); <span class="comment">// 2-1 window</span></span><br></pre></td></tr></table></figure><p>做算法题:<br>实现16进制加法，不能将两数直接转成十进制相加再转回十六进制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = &#123;</span><br><span class="line">    a: <span class="number">10</span>,</span><br><span class="line">    b: <span class="number">11</span>,</span><br><span class="line">    c: <span class="number">12</span>,</span><br><span class="line">    d: <span class="number">13</span>,</span><br><span class="line">    e: <span class="number">14</span>,</span><br><span class="line">    f: <span class="number">15</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseToNumber</span>(<span class="params">hex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(hex === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Object</span>.keys(map).includes(hex)) &#123;</span><br><span class="line">        <span class="keyword">return</span> map[hex]</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Number</span>(hex)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hexAdd</span>(<span class="params">hex1, hex2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> arr1 = hex1.split(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> arr2 = hex2.split(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> addon = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">Math</span>.max(arr1.length, arr2.length) + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> num1 = parseToNumber(arr1[arr1.length - <span class="number">1</span> - i])</span><br><span class="line">        <span class="keyword">const</span> num2 = parseToNumber(arr2[arr2.length - <span class="number">1</span> - i])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> sum = num1 + num2 + addon;</span><br><span class="line">        addon = <span class="built_in">Math</span>.floor(sum / <span class="number">16</span>);</span><br><span class="line">        <span class="keyword">let</span> rest = sum % <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">let</span> r = <span class="built_in">String</span>(rest)</span><br><span class="line">        <span class="keyword">if</span>(rest &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> [hex] = <span class="built_in">Object</span>.entries(map).find(<span class="function">(<span class="params">[key, val]</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> val === rest</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            r = hex</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        result.unshift(r)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result.join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hexAdd(<span class="string">&#x27;ff&#x27;</span>, <span class="string">&#x27;1&#x27;</span>))</span><br></pre></td></tr></table></figure><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>最后还是没有成功拿到offer, 很遗憾，原因是【不太适合团队协作】(当然也有可能只是单纯的敷衍)。面试者除了提升自己的硬实力，还应当提升一下自己在职场的软实力，比如朋友推荐的这本书 <a href="https://book.douban.com/subject/26835090/">软技能</a></p><h1 id="六战"><a href="#六战" class="headerlink" title="六战"></a>六战</h1><p>被飞书部门又拉起来了，继续</p><h2 id="一面-3"><a href="#一面-3" class="headerlink" title="一面"></a>一面</h2><ul><li>聊一下项目</li><li>聊一下你对前端的优化的实践，达成了那些目的<ul><li>如何判断前端用户体验</li></ul></li><li>聊一下在前端体验方面做的工作</li><li>聊聊vue和react的区别</li><li>聊聊如何处理中文输入法在输入过程中定时保存状态的问题</li></ul><p>算法题</p><ol><li>用css实现一个布局, 来实现一个3x3的布局，每个窗口都要实现16比9的比例</li></ol><p>没做出来，关键词 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding-bottom"><code>padding-bottom</code></a>百分比</p><p>实现: <a href="https://blog.csdn.net/weixin_39357177/article/details/81186498">https://blog.csdn.net/weixin_39357177/article/details/81186498</a></p><ol start="2"><li>实现一个方法，通过栈来存储，实现O(1)的复杂度下获取栈的最小值。</li></ol><p>没做出来</p><p>框架</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiniStack</span> </span>&#123;</span><br><span class="line">  store = [];</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">push</span>(<span class="params">val: number</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">pop</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getMini(): number &#123;</span><br><span class="line">    <span class="comment">// 实现它</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原题: <a href="https://leetcode-cn.com/problems/min-stack/">https://leetcode-cn.com/problems/min-stack/</a></p><h2 id="二面-3"><a href="#二面-3" class="headerlink" title="二面"></a>二面</h2><ul><li>聊聊公司的项目实现</li><li>了解http3么</li><li>聊聊react hooks</li><li>聊聊公司的业务规范与组件设计规范</li><li>聊聊业务代码</li><li>聊聊你是如何进行项目优化的</li><li>聊聊项目上线的流程</li><li>聊聊网络安全性方面的问题，做过xss用户输入防护么</li><li>聊聊你是如何关注用户的体验的，主要关心那些指标</li><li>让你设计一个倒计时组件，你会怎么设计</li></ul><p>做题:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 消除字符串中全部的y和连续的xz.</span></span><br><span class="line"><span class="comment">//   用例：</span></span><br><span class="line"><span class="comment">// &#x27;xxyyz&#x27; -&gt; &#x27;x&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;xxxyyyzzz&#x27; -&gt; &#x27;&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;xyzwzyx&#x27; -&gt; &#x27;wzx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fixStr</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = str;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">loop</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> len = str.length</span><br><span class="line">    <span class="keyword">const</span> fixedStr1 = str.replace(<span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(len !== fixedStr1.length) &#123;</span><br><span class="line">      <span class="comment">// 变了</span></span><br><span class="line">      loop(fixedStr1)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> fixedStr2 = str.replace(<span class="string">&#x27;xz&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(len !== fixedStr2.length) &#123;</span><br><span class="line">      loop(fixedStr2);</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    result = str;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  loop(str)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fixStr(<span class="string">&#x27;xxyyz&#x27;</span>))</span><br><span class="line"><span class="built_in">console</span>.log(fixStr(<span class="string">&#x27;xxxyyyzzz&#x27;</span>))</span><br><span class="line"><span class="built_in">console</span>.log(fixStr(<span class="string">&#x27;xyzwzyx&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现一个功能, 发送5个请求，当请求数</span></span><br><span class="line"><span class="comment">// &gt;=4 报错，则渲染错误页面</span></span><br><span class="line"><span class="comment">// 否则渲染正确页面</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderErrorPage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderSuccessPage</span>(<span class="params">resultMap</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> successedResultMap = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> errorCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all(</span><br><span class="line">  arr.map(<span class="function">(<span class="params">url, i</span>) =&gt;</span></span><br><span class="line">    fetch(url)</span><br><span class="line">      .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        successedResultMap[url] = res;</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        errorCount++;</span><br><span class="line">      &#125;)</span><br><span class="line">  )</span><br><span class="line">).finally(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (errorCount &gt;= <span class="number">4</span>) &#123;</span><br><span class="line">    renderErrorPage();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    renderSuccessPage(successedResultMap);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>该问题可以使用<code>Promise.allSettled</code>进行简化</p><h2 id="三面-2"><a href="#三面-2" class="headerlink" title="三面"></a>三面</h2><p>问的和二面差不多，只是更加细一点</p><p>算法题在面试官的要求下不做公开</p><!--算法题:```typescript// 手上有一堆牌，进行如下操作:// 从手牌顶上拿一张牌放在桌上，然后再拿一张牌放在手牌底部，依次循环知道手牌用完// 现在桌面上的牌堆如下，请推算出原始手牌顺序// 1,2,3,4,5,6,7,8,9,10,11,12,13(牌顶)function getHandCardStack(desktopCardOrder: number[]) {    const len = desktopCardOrder.length;    const handCard = [];    handCard.push(desktopCardOrder.pop());    while (desktopCardOrder.length > 0) {        handCard.push(desktopCardOrder.pop()); // 从桌上顶拿一张到顶部        if (desktopCardOrder.length > 0) {            handCard.push(handCard.shift()); // 从手牌底部拿一张到顶部        }    }    return handCard;}// 1,2,3,4console.log(getHandCardStack([1,2,3,4,5,6,7,8,9,10,11,12,13]));``` --><h2 id="HR面"><a href="#HR面" class="headerlink" title="HR面"></a>HR面</h2><p>反正基本不挂人，主要是谈薪的问题。有一个比较难受的点就是字节的薪资是基于你上家薪资来的，或者说大部分大厂的薪资都是基于上家来的。所以比较好的做法是可以先去别的厂然后再来字节996。我就是基础薪资比较低的那种，最后也没感觉有太大的竞争力，比较菜。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>万万没想到，我最终还是拿到了Offer。虽然经历比较坎坷，但总不算完全浪费时间。总得来说跳槽这事三分靠运气七分靠实力，但绝对不要被眼前的利益限制住了自己的发展，主要还是要看这次跳槽在自己的职业生涯中能收获什么，而不要为跳而跳。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 字节跳动 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CORS 现代浏览器跨域请求简明手册</title>
      <link href="/posts/db9cb7ec/"/>
      <url>/posts/db9cb7ec/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文主要是阐述与总结现代浏览器的跨域问题</p><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p><strong>同源策略</strong>是一个重要的安全策略，它用于限制一个origin的文档或者它加载的脚本如何能与另一个源的资源进行交互。它能帮助阻隔恶意文档，减少可能被攻击的媒介。</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>如果两个 URL 的 protocol、port (en-US) (如果有指定的话)和 host 都相同的话，则这两个 URL 是同源。这个方案也被称为“协议/主机/端口元组”，或者直接是 “元组”。（“元组” 是指一组项目构成的整体，双重/三重/四重/五重/等的通用形式）。</p><p>下表给出了与 URL <a href="http://store.company.com/dir/page.html">http://store.company.com/dir/page.html</a> 的源进行对比的示例:</p><table><thead><tr><th>URL</th><th>结果</th><th>原因</th></tr></thead><tbody><tr><td><a href="http://store.company.com/dir2/other.html">http://store.company.com/dir2/other.html</a></td><td>同源</td><td>只有路径不同</td></tr><tr><td><a href="http://store.company.com/dir/inner/another.html">http://store.company.com/dir/inner/another.html</a></td><td>同源</td><td>只有路径不同</td></tr><tr><td><a href="https://store.company.com/secure.html">https://store.company.com/secure.html</a></td><td>失败</td><td>协议不同</td></tr><tr><td><a href="http://store.company.com:81/dir/etc.html">http://store.company.com:81/dir/etc.html</a></td><td>失败</td><td>端口不同 (http:// 默认端口是80)</td></tr><tr><td><a href="http://news.company.com/dir/other.html">http://news.company.com/dir/other.html</a></td><td>失败</td><td>主机不同</td></tr></tbody></table><h2 id="开始一个跨域请求"><a href="#开始一个跨域请求" class="headerlink" title="开始一个跨域请求"></a>开始一个跨域请求</h2><p>你可以使用<code>XMLHttpRequest</code>或<code>Fetch</code>发起一个跨域请求</p><p>你可以在网站<code>http://foo.com</code>发起一个对<code>http://bar.com</code>的请求，如果对方网站许可，那么便能拿到对应的响应，否则则失败。</p><h2 id="请求分两类"><a href="#请求分两类" class="headerlink" title="请求分两类"></a>请求分两类</h2><h3 id="预检请求"><a href="#预检请求" class="headerlink" title="预检请求"></a>预检请求</h3><p>预检请求是一个OPTIONS 请求，在跨域时预先发送到服务端以获取该服务器对跨域访问控制的一些配置，以决定接下来的请求是否会被发送。一般以<code>Header</code>头的形式返回, 相关配置一般以<code>Access-Control-*</code>作为开头</p><div style="background-color:white; padding: 10px">  <img src="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS/preflight_correct.png" /></div><h3 id="实际请求"><a href="#实际请求" class="headerlink" title="实际请求"></a>实际请求</h3><h4 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h4><p>简单请求不会触发<a href="#%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82"><code>CORS 预检请求</code></a></p><blockquote><p>若请求满足所有下述条件，则该请求可视为”简单请求”:</p><ul><li>使用下列方法之一：<ul><li>GET</li><li>HEAD</li><li>POST</li></ul></li><li>除了被用户代理自动设置的首部字段（例如 <code>Connection</code>, <code>User-Agent</code>）和在 <code>Fetch</code> 规范中定义为 <code>禁用首部名称</code> 的其他首部，允许人为设置的字段为 Fetch 规范定义的 对 CORS 安全的首部字段集合。该集合为：<ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Content-Type （需要注意额外的限制）</li><li>DPR</li><li>Downlink</li><li>Save-Data</li><li>Viewport-Width</li><li>Width</li><li><code>Content-Type</code> 的值仅限于下列三者之一：<ul><li><code>text/plain</code></li><li><code>multipart/form-data</code></li><li><code>application/x-www-form-urlencoded</code></li></ul></li></ul></li><li>请求中的任意XMLHttpRequestUpload 对象均没有注册任何事件监听器；XMLHttpRequestUpload 对象可以使用 XMLHttpRequest.upload 属性访问。</li><li>请求中没有使用 ReadableStream 对象。</li></ul></blockquote><h4 id="复杂请求"><a href="#复杂请求" class="headerlink" title="复杂请求"></a>复杂请求</h4><p>除了简单请求以外的所有请求都被称为复杂请求，复杂请求在进行跨域访问前会发送一个 <a href="#%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82"><code>CORS 预检请求</code></a></p><h2 id="跨域请求响应Headers"><a href="#跨域请求响应Headers" class="headerlink" title="跨域请求响应Headers"></a>跨域请求响应Headers</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#the_http_response_headers">The HTTP response headers</a></li></ul><h2 id="跨域时携带Cookies"><a href="#跨域时携带Cookies" class="headerlink" title="跨域时携带Cookies"></a>跨域时携带Cookies</h2><h4 id="需要确保请求发起时信任对方"><a href="#需要确保请求发起时信任对方" class="headerlink" title="需要确保请求发起时信任对方"></a>需要确保请求发起时信任对方</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;http://bar.com&#x27;</span>, &#123;</span><br><span class="line">  credentials: <span class="string">&#x27;include&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>credentials</code> 含义:</p><blockquote><ul><li>“omit”: Excludes credentials from this request, and causes any credentials sent back in the response to be ignored.</li><li>“same-origin”: Include credentials with requests made to same-origin URLs, and use any credentials sent back in responses from same-origin URLs.</li><li>“include”: Always includes credentials with this request, and always use any credentials sent back in the response.</li></ul></blockquote><p>或</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> req = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">req.open(<span class="string">&#x27;GET&#x27;</span>, url, <span class="literal">true</span>);</span><br><span class="line">req.withCredentials = <span class="literal">true</span>;</span><br><span class="line">req.onreadystatechange = handler;</span><br><span class="line">req.send();</span><br></pre></td></tr></table></figure><h4 id="需要确保服务端响应头返回"><a href="#需要确保服务端响应头返回" class="headerlink" title="需要确保服务端响应头返回"></a>需要确保服务端响应头返回</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Access-Control-Allow-Credentials:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><em>注意此时<code>Access-Control-Allow-Origin</code>不能为 “\</em>“*</p><h4 id="需要确保要发送的Cookie满足SameSite条件"><a href="#需要确保要发送的Cookie满足SameSite条件" class="headerlink" title="需要确保要发送的Cookie满足SameSite条件"></a>需要确保要发送的Cookie满足SameSite条件</h4><p>注意Chrome 80 后将默认值从原来的<code>None</code>改为<code>Lax</code>, 相关影响可以看如下文章</p><ul><li><a href="https://zhuanlan.zhihu.com/p/257860705">SameSite 属性变为 lax，我们应该怎么办</a></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy">Same-origin policy</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">跨源资源共享（CORS）</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite">SameSite cookies</a></li><li><a href="https://fetch.spec.whatwg.org/">Fetch</a></li><li><a href="https://github.com/github/fetch">github/fetch</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> CORS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP中的各种缓存标签</title>
      <link href="/posts/da49e84e/"/>
      <url>/posts/da49e84e/</url>
      
        <content type="html"><![CDATA[<ul><li><code>ETag</code>(如: <code>50b1c1d4f775c61:df3</code>):<br>  发送请求时服务端会通过<code>ETag</code>返回资源计算出的实体值，在再次发送请求时浏览器会带上一个<code>If-None-Match</code>(如<code>W / &quot;50b1c1d4f775c61:df3&quot;</code>)请求头，服务端会对这个请求与这个资源的实体值进行对比，如果相同则直接返回304</li><li><code>Last-Modified</code>(如: <code>Fri , 12 May 2006 18:53:33 GMT</code>):<br>  发送请求时服务端会通过<code>ETag</code>返回资源最后更新时间，在再次发送请求时浏览器会带上一个<code>If-Modified-Since</code>请求头，服务端会对这个请求与这个资源的最后更新时间进行对比，如果<code>服务端资源的最后更新时间</code>&gt;=<code>If-Modified-Since</code>则返回304</li><li><code>Expires</code>/<code>Cache-Control</code>:<br>  浏览器缓存，如果<code>当前时间</code>&lt;<code>过期时间</code>则不会发送请求。该过程不需要服务端介入，是浏览器本身的缓存行为。可以通过首次请求资源后服务端返回的响应头来被服务端进行控制。<ul><li><code>Expires</code>来源于<code>http/1.0</code></li><li><code>Cache-Control</code>来源于<code>http/1.1</code> <code>max-age</code>单位为秒</li><li>如果<code>Cache-Control</code>与<code>Expires</code>同时存在，<code>Cache-Control</code>生效</li></ul></li></ul><h3 id="用户操作与缓存"><a href="#用户操作与缓存" class="headerlink" title="用户操作与缓存"></a>用户操作与缓存</h3><table><thead><tr><th>用户操作</th><th>Expires/Cache-Control</th><th>Last-Modified/Etag</th></tr></thead><tbody><tr><td>地址栏回车</td><td>有效</td><td>有效</td></tr><tr><td>页面链接跳转</td><td>有效</td><td>有效</td></tr><tr><td>新开窗口</td><td>有效</td><td>有效</td></tr><tr><td>前进后退</td><td>有效</td><td>有效</td></tr><tr><td>F5刷新</td><td>无效</td><td>有效</td></tr><tr><td>Ctrl+F5强制刷新</td><td>无效</td><td>无效</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何开发与坚持维护一个企业级的开源项目</title>
      <link href="/posts/28f21ef5/"/>
      <url>/posts/28f21ef5/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/TRPGEngine/Client">TRPG Engine</a> 是我一直坚持维护的一个开源项目。正如所有的开源项目都起源于开发者的兴趣，<code>TRPG Engine</code>也是我对于跑团这一小众领域的兴趣。</p><p>我在没有支援没有赞助，单凭个人爱好独立坚持开发3年以上不间断。前端代码累计提交2700+, 后端代码累计提交1200+，风雨无阻。</p><p>谨以此文，分享一下我维护这个开源项目的经历。并与千千万万独立坚持的开源人共勉。</p><h2 id="起初"><a href="#起初" class="headerlink" title="起初"></a>起初</h2><p>所有的个人项目都起源于想做。因为我想做，因此我建立了这样的项目。最初的目的很单纯，就是作为我学习React的一个实践。</p><p>最初选用的技术栈是<code>React</code> + <code>Redux</code>。之所以用<code>React</code>是为了可以共享一部分的代码到<code>React Native</code>, 这样的搭配会很大的减少重复逻辑的开发与后期的维护，以减少成本。</p><blockquote><p>而事实是我在两者共存与中间代码上花费了很多的精力，写了很多中间脚本使网页版与RN版能够相互协作。</p></blockquote><h2 id="明确定位"><a href="#明确定位" class="headerlink" title="明确定位"></a>明确定位</h2><p>一个项目，如果要走的长远，必须明确你的产品定位与目标用户。比如同样作为即时通讯应用, 钉钉瞄准的用户群是上班族，slack的用户群是开发者，discord的目标用户是游戏玩家，而qq的用户群是小学生。以此为原点，钉钉开发出了一系列日历，考勤，协同，已读未读，ding等功能。slack只做了大量机器人，discord专注于语音会话与大用户群组聊天，而qq则整出了很多花样。</p><p>明确自己的定位，其目标一定是解决某种痛点与缺陷，做出任何的抉择都需要考虑是不是符合自己的定位。一个明确的定位可以帮助你不会花费无意义的时间在没有收益的功能上。</p><h2 id="时刻保持热情与思考"><a href="#时刻保持热情与思考" class="headerlink" title="时刻保持热情与思考"></a>时刻保持热情与思考</h2><p>时刻记住，项目是为自己做的。它不是一种谋生工具，而是一种兴趣爱好。它最初应当起源于你对现状的小小不满，终止于对此兴趣的终止。不妨增加一些筹码：比如它可以作为你的游戏场，比如他可以作为你谋求更高事业渠道的凭证，比如他可以是你与你伴侣之间的小小私人空间，比如你可以这样告诉自己，你的每一行代码都有可能帮助到素未蒙面的陌生人，而他会感谢你的无私付出。这些会帮助你时刻保持热情与动力，而不至于让这个项目半途而废。</p><h2 id="维护自己的门面"><a href="#维护自己的门面" class="headerlink" title="维护自己的门面"></a>维护自己的门面</h2><p>如果一个项目想要宣传，一个门面则非常重要。这可能是一个README, 一片文章，一个官网。但是如果没有任何说明，告诉别人这是什么，你在做什么。又能期待谁来阅读你的源码呢？</p><h2 id="自己是第一用户"><a href="#自己是第一用户" class="headerlink" title="自己是第一用户"></a>自己是第一用户</h2><p>对于个人项目来说，自己才是自己产品最忠实的用户，只有这样才能不断发掘产品的不足，并不断改善。如果自己都不想用自己的产品，那么这个产品还有存在的必要么？</p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>回到技术细节:</p><p>因为技术在不断更新。而有的库又逐步步入生命周期的终结，很多情况不得不花费时间去迁移。</p><p>而<code>TRPG Engine</code>经历过几次大的迁移/迭代:</p><ul><li>原来<code>TRPG Engine</code>的后端是使用的<a href="https://github.com/dresende/node-orm2">node-orm2</a>. 然后这个库被弃用了。因此花了很大经历将其迁移到<a href="https://github.com/sequelize/sequelize">sequelize</a>，包括代码的修改与数据库的变更。这个没什么好分享的，纯粹是当时的选择有限，而库的生命周期比较短。</li><li>最早的<code>TRPG Engine</code>使用的是用纯粹的js写的，但是随着业务的不断增多，代码复杂度的变高，我选择使用<a href="https://www.typescriptlang.org/">Typescript</a>对我的项目进行重构。从长远来看这一步是非常值得的，TS的类型系统长远的帮助到了一个项目的健康发展。（其实有点小遗憾，从目前的角度来看flow在一些细节做得比ts更加好）。</li><li>从<code>React ClassComponent</code> 到 <code>React Hooks</code>: hooks无疑拥有更高的抽象性，使用Hooks能抛弃HOC这种很难被typescript支持的写法。同时更方便代码的复用，特别是对于React和React Native代码并存的项目来说。</li><li>前端重构, 重写界面。原来的TRPG Engine是参考的钉钉设计的，但实际的迭代中，频道的需求更为突出。即需要由原来的单层消息列表变成双层消息列表。因此花费了几个月时间写了一版类似于<code>Discord</code>设计的新版页面，并且颜色也从原来的亮色变成保护眼睛的暗色。</li></ul><h3 id="善用单元测试"><a href="#善用单元测试" class="headerlink" title="善用单元测试"></a>善用单元测试</h3><p>为了一个项目的长远发展，测试用例与持续集成都是必要的。特别是单元测试，在很多时候能帮助到项目的提前预知问题。坚持每个bug都有一个对应的单元测试用例，防止再次出现类似的问题。</p><p><code>TRPG Engine</code> 虽然开始写测试用例比较晚，但是一旦有机会就会补充一些测试用例，以防止出现一些边缘问题。</p><p>目前<code>TRPG Engine</code>前端有223个测试用例，后端有284个测试用例，还远远不够一个项目的健康发展。</p><h3 id="学会数据迁移"><a href="#学会数据迁移" class="headerlink" title="学会数据迁移"></a>学会数据迁移</h3><p>为了方便数据库的升级，自己fork了一个<a href="https://github.com/TRPGEngine/sequelize-auto-migrations">sequelize-auto-migrations</a>库用于生成数据库的迁移脚本, 因为原作者已经不维护了。</p><p>数据库迁移脚本可以保证在任意环境下都能生成正确的数据库格式。这对于关系型数据库来说非常重要。</p><h3 id="兴趣是原始驱动力"><a href="#兴趣是原始驱动力" class="headerlink" title="兴趣是原始驱动力"></a>兴趣是原始驱动力</h3><p>与商业项目不同的是，个人项目可以把一切自己感兴趣、想做的东西都想办法以某种形式糅合到自己的项目中。</p><p><code>TRPG Engine</code>就拥有这些有意思的系统:</p><ul><li>基于xml描述与js沙盒的动态计算的表单系统</li><li>基于<a href="https://github.com/ianstormtaylor/slate">slate</a>实现的笔记系统与富文本输入框</li><li>基于meta信息的动态面板</li><li>基于BBCode的消息解释器</li></ul><h2 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h2><p>为了维护与运营这个项目，唯一的支出就是在服务器和OSS上了，零零散散也花费了几千元在上面了。一台2核4G的主服务器, 在主服务器上运行Mysql, Redis与Mysql。另外还有一台1核1G的小型服务器作为语音服务器与测试服务器。前端的代码都是本地编译好后提交到第三方对象存储上，这样用户的访问会更加迅速与快捷。</p><h2 id="赞助"><a href="#赞助" class="headerlink" title="赞助?"></a>赞助?</h2><p>曾经也考虑过要不要和别人一样放出二维码，看看能不能获得一些打赏，后来想了想还是算了。一方面没有多少的关注，我本人也比较低调不善于宣传。另一方面感觉，掺杂了利益后的开源项目，总感觉失去了纯粹性。爱好只能是爱好，如果成为一种牟利方式，那么可能就不像当初那么纯粹了。</p><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p>最后感谢所有开源作者的无私奉献，正是你们存在才能让这个互联网世界变得更加精彩。</p>]]></content>
      
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从 Webpack 到 Snowpack, 编译速度提升十倍以上——TRPG Engine迁移小记</title>
      <link href="/posts/74598ef5/"/>
      <url>/posts/74598ef5/</url>
      
        <content type="html"><![CDATA[<h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><p><a href="https://github.com/TRPGEngine/Client"><code>TRPG Engine</code></a>经过长久以来的迭代，项目已经显得非常臃肿了。数分钟的全量编译, 每次按下保存都会触发一次<strong>10s</strong>到<strong>1m</strong>不等的增量编译让我苦不堪言, 庞大的依赖使其每一次编译都会涉及很多文件和很多包，长时的编译时间大大降低了开发效率与迭代速度。</p><h2 id="优化方式"><a href="#优化方式" class="headerlink" title="优化方式"></a>优化方式</h2><p>经过一段时间的考察，我选择了<a href="https://www.snowpack.dev/"><code>Snowpack</code></a>作为解决方案。与<code>Webpack</code>不同的是，除了第一次的全量编译以外，<code>Snowpack</code>的增量编译不会涉及到庞大的<code>node_modules</code>文件夹, 准确来说只会编译变更文件本身。甚至于如果没有对依赖进行变更，下次的全量编译会直接动用之前编译的文件缓存，不需要花时间等待<code>node_modules</code>的编译。</p><p>为什么会这么快？这是由于<code>Snowpack</code>本身的实现与设计哲学有关的。相比<code>Webpack</code>, <code>Snowpack</code>利用了现代浏览器的本身的<code>module</code>系统，跳过复杂的模型之间的组织编译过程而只关注于变更文件本身的编译，这样当然快了。</p><p>拿<code>Snowpack</code>官方的一张图来说:</p><p><img src="/images/snowpack/1.png"></p><p><code>snowpack</code>的最小编译单位是文件，而<code>webpack</code>的最小编译单位为<code>chunk</code>, 而<code>chunk</code>还需要额外的计算, 不论是编译部分还是编译后的组装部分。snowpack的设计逻辑天生决定了她的速度。</p><p><strong>优化前(使用<code>webpack</code>):</strong></p><p>全量编译:</p><p><img src="/images/snowpack/2.jpg"></p><p>增量编译:</p><p><img src="/images/snowpack/3.jpg"></p><p>全量请求用时:</p><p><img src="/images/snowpack/6.jpg"></p><p><strong>优化后(使用<code>snowpack</code>):</strong></p><p>全量编译:</p><p><img src="/images/snowpack/4.jpg"></p><p>增量编译:</p><p><img src="/images/snowpack/5.jpg"></p><p>(看不到编译用时，但是体感在1s内. 而且该效果在电脑运行其他应用时更加显著)</p><p>全量请求用时:</p><ul><li><p>使用http1<br><img src="/images/snowpack/7.jpg"></p></li><li><p>使用http2<br><img src="/images/snowpack/8.jpg"></p></li></ul><p><em>以上测试是保证电脑在空闲时间，且保存与操作内容为同一文件</em></p><p><em>该用时已经是平时操作的最快时间，为此我的MBR重启了一次强制清空了swap空间, 实际表现会更加显著</em></p><p><em>因为文件依赖于浏览器的耗时，而浏览器需要串行请求依赖，因此耗时会更加长</em></p><p><em>但实际使用中使用snowpack会更加优秀。因为其相比webpack会大大节约电脑资源。在webpack编译时会占用大量的电脑资源，会影响到其他操作</em></p><h2 id="遇到的坑与解决方案"><a href="#遇到的坑与解决方案" class="headerlink" title="遇到的坑与解决方案"></a>遇到的坑与解决方案</h2><p><code>TRPG Engine</code>算是非常经典的<code>Webpack</code>应用了, 使用了各种Loader。光通用配置就有250+行，各种优化配置，各种 alias。等等长时间迭代积攒下来的配置，因此毫不意外的会遇到很多问题与坑。</p><p>以下是我遇到的问题与解决方案:</p><ul><li>问题1:<ul><li>入口文件使用的是<a href="https://webpack.js.org/plugins/html-webpack-plugin/">HtmlwebpackPlugin</a>编译的<code>handlebars</code>文件，而snowpack不支持<code>handlebars</code>文件作为入口</li><li>解决方案：重写一个<code>snowpack</code>专用的入口文件。使用<code>handlebars</code>主要解决的是dll的问题，<code>snowpack</code>不需要处理这部分的优化因此直接跳过</li></ul></li><li>问题2:<ul><li><code>snowpack</code>加载文件策略与node不同。有同名文件和文件夹会优先使用文件夹的index.js作为路径解析。具体看现象可以参考这个讨论: <a href="https://github.com/snowpackjs/snowpack/discussions/1320">https://github.com/snowpackjs/snowpack/discussions/1320</a></li><li>解决方案：改名字，让文件夹与文件名不会出现重复。包括同名但是大小写不同的问题，因为底层是<code>node</code>的<code>fs.stat</code>实现，在大小写敏感的系统下依旧会视为同名</li></ul></li><li>问题3:<ul><li><code>TRPG Engine</code>不但有web端，还有<code>react-native</code>端，而<code>react-native</code>是无法被正常解析的。我只想要处理web端的开发环境使用<code>snowpack</code>优化开发体验</li><li>解决方案: <code>exclude</code>配置手动过滤</li></ul></li><li>问题4:<ul><li>tspath不支持，虽然有了<code>@snowpack/plugin-typescript</code>但是不支持tspath。</li><li>解决方案: 手动写了一个自动解析的逻辑将其变成对应的<a href="https://www.snowpack.dev/#import-aliases">alias</a>加到配置上</li></ul></li><li>问题5:<ul><li>在css中引入了字体文件，但是无法正常加载。因为snowpack无法正确识别url指定的资源并将其打包(webpack是使用<code>css-loader</code>来实现的)</li><li>解决方案:<figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scripts: &#123;</span><br><span class="line">  <span class="symbol">&#x27;mount</span>:font&#x27;: <span class="symbol">&#x27;mount</span> src/web/assets/fonts --to /main/fonts&#x27;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul></li><li>问题6:<ul><li>对于一些特殊的写法我不想影响webpack的实现但是<code>snowpack</code>不支持这种写法。比如使用<a href="https://webpack.js.org/configuration/externals/"><code>externals</code></a>实现的配置引入, 比如<a href="https://webpack.js.org/plugins/define-plugin/">DefinePlugin</a>实现的<code>process.env</code>(在snowpack中必须使用<a href="https://www.snowpack.dev/#environment-variables"><code>import.meta.env</code></a>), 再比如<code>require</code>的使用</li><li>解决方案: 我实现了一个<a href="https://github.com/moonrailgun/snowpack-plugin-replace">snowpack-plugin-replace</a>插件用于将这些东西全部替换成我想要的代码。具体使用如下:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">&#x27;snowpack-plugin-replace&#x27;</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    list: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">from</span>: <span class="regexp">/process\.env/g</span>,</span><br><span class="line">        to: <span class="string">&#x27;import.meta.env&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">from</span>: <span class="string">`require(&quot;../../package.json&quot;).version`</span>,</span><br><span class="line">        to: <span class="string">&#x27;&quot;0.0.0&quot;&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">from</span>: <span class="string">`const resBundle = require(&quot;i18next-resource-store-loader!./langs/index.js&quot;);`</span>,</span><br><span class="line">        to: <span class="string">&#x27;import resBundle from &quot;./langs/zh-CN/translation.json&quot;&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">from</span>: <span class="string">&#x27;import Config from &quot;config&quot;;&#x27;</span>,</span><br><span class="line">        to: <span class="string">`const Config = <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(&#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">          sentry: <span class="built_in">require</span>(<span class="string">&#x27;config&#x27;</span>).get(<span class="string">&#x27;sentry&#x27;</span>),</span></span></span><br><span class="line"><span class="string"><span class="subst">        &#125;)&#125;</span>;`</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure></li></ul></li><li>问题7:<ul><li>rollup抛出无法解析<code>this</code>的警告</li><li>解决方案: 使用context指向window来移除警告<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">installOptions</span>: &#123;</span><br><span class="line">  <span class="attribute">rollup</span>: &#123;</span><br><span class="line">    context: <span class="string">&#x27;window&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul></li><li>问题8:<ul><li>snowpack打包目标路径与原有的build文件夹冲突</li><li>解决方案: 修改输出目录为<code>.snowpack</code>并在gitignore中添加该文件夹<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">devOptions</span>: &#123;</span><br><span class="line">  <span class="attribute">out</span>: <span class="string">&#x27;.snowpack&#x27;</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul></li><li>问题9:<ul><li>使用<code>@snowpack/plugin-typescript</code>内部包对全局变量的声明会出现重复声明的报错</li><li>解决方案: <code>tsconfig</code>的<code>&quot;skipLibCheck&quot;: true</code></li></ul></li><li>问题10:<ul><li>现有的依赖需要<code>@babel/plugin-transform-runtime</code>提供的<code>helpers</code>作为全局依赖</li><li>解决方案: 经检查是用到了<code>regenerator</code>功能，手动安装<code>regenerator-runtime</code>并在包前引入<code>import &#39;regenerator-runtime/runtime&#39;;</code></li></ul></li><li>问题11:<ul><li>部分依赖在其中部分代码使用了<code>行内require</code>作为引入方式, 而<code>snowpack</code>无法正确处理<code>行内require</code></li><li>解决方案: 检查后发现都已经修改。升级依赖到最新版即可<ul><li>PS: 顶部require snowpack使用rollup的commonjs插件来解决，具体看代码:<a href="https://github.com/snowpackjs/snowpack/blob/d90a1fb8a080bfe32e7283d87063381cd97f48bb/esinstall/src/index.ts#L383-L387">https://github.com/snowpackjs/snowpack/blob/d90a1fb8a080bfe32e7283d87063381cd97f48bb/esinstall/src/index.ts#L383-L387</a></li></ul></li></ul></li><li>问题12:<ul><li>在使用less的import逻辑无法正常运行，这是由于<code>snowpack</code>的具体实现决定的。</li><li><del>暂时无法解决，使用<code>snowpack-plugin-replace</code>将其替换为css文件导入作为临时解决方案, 见讨论: <a href="https://github.com/snowpackjs/snowpack/discussions/1360">Github</a></del> 使用<a href="https://www.npmjs.com/package/@snowpack/plugin-run-script"><code>@snowpack/plugin-run-script</code></a>插件将其手动编译后放在公共文件中。可以参考这个<a href="https://github.com/TRPGEngine/Client/commit/8c39dd9fbcf7bbad4bee93c7760d0b2b4415cbdf">commit</a></li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Snowpack虽然作为一个新兴的打包工具，目前尚不是非常完善, 功能也没有webpack这样丰富与齐全。但是它的新的打包设计对于有一定规模的前端应用还是非常优秀的。能极大提升开发效率。不失为一种好的解决方案。当然最后输出还是需要使用webpack对其进行一定的优化，毕竟原生的module支持目前浏览器的支持度还没有达到覆盖一个理想的地步<a href="https://caniuse.com/es6-module">https://caniuse.com/es6-module</a></p><p>最后这是我最后提交的<a href="https://github.com/TRPGEngine/Client/pull/88/files">pr</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> TRPG Engine </tag>
            
            <tag> Webpack </tag>
            
            <tag> Snowpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TRPG Engine —— 一个功能完善即时通讯解决方案</title>
      <link href="/posts/191d7ea8/"/>
      <url>/posts/191d7ea8/</url>
      
        <content type="html"><![CDATA[<h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>除了传统的聊天软件，还有为固定需求打造的定位其他的聊天软件</p><p>比如钉钉立足于工作流，slack专注于程序员之间的项目沟通。而<code>TRPG Engine</code>就是一款为了小众的跑团玩家所打造的通用即时通讯解决方案</p><h2 id="项目亮点"><a href="#项目亮点" class="headerlink" title="项目亮点"></a>项目亮点</h2><ul><li>基于XML描述的人物卡系统(可以理解为动态表单) - <a href="https://trpg.moonrailgun.com/playground">Playground</a></li><li>Web端与RN端共享redux状态的实践与工具链</li><li>多端并存与代码共享(Web端, RN端, Portal端 <em>(Portal端是RN端通过webview进行一部分中间操作的方式，类似于各种手机App的H5端)</em> )</li><li>其他的一些自研实用工具，如<code>RN端WEB端通用Portal组件</code>, <code>快速生成通用表单</code>, <code>基于BBCode的消息解释器</code>, <code>通用缓存管理机制</code></li><li>工程化代码，可拓展性强</li><li>移动端兼容与PWA</li></ul><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><ul><li>MySql 5.7+</li><li>Redis</li></ul><h2 id="功能列表"><a href="#功能列表" class="headerlink" title="功能列表"></a>功能列表</h2><h4 id="通用功能"><a href="#通用功能" class="headerlink" title="通用功能"></a>通用功能</h4><ul><li>用户登入登出</li><li>用户注册</li><li>私聊/群聊</li><li>头像上传与裁剪</li><li>用户设置</li><li>好友管理<ul><li>好友发送邀请/同意邀请</li></ul></li><li>基于BBCode的消息解析器<ul><li>url内容</li><li>图片内容</li><li>@提及</li></ul></li><li>多种消息类型<ul><li>通用消息</li><li>提示消息</li><li>卡片消息</li></ul></li><li>消息回复与消息撤回</li><li>自动抓取消息内的网址的预览信息</li><li>基于slate的富文本编辑器</li><li>消息通知<ul><li>移动端基于<code>upush</code>。包括本地进程未被杀死的本地推送与本地被杀死后的upush推送</li></ul></li><li>多种文件管理策略<ul><li>头像上传七牛云或本地</li><li>聊天图片使用外置图片服务转发到第三方图床</li><li>聊天文件存储在本地，定时删除</li></ul></li><li>单向聊天消息机器人</li><li>群组多面板<ul><li>多面板类型: 目前有笔记面板与文字频道</li><li>面板的编辑/删除/拖拽排序</li></ul></li><li>app热更新与apk更新<ul><li>热更新基于自部署的<code>codepush</code>服务器, apk更新会自动获取最新的apk版本</li></ul></li><li>app下载管理</li><li>多国语言(中英, 尚未完全覆盖)</li></ul><h4 id="跑团相关"><a href="#跑团相关" class="headerlink" title="跑团相关"></a>跑团相关</h4><ul><li>基于Slate的笔记系统</li><li>人物卡系统<ul><li>基于XML的布局描述与内置JS沙盒解释器来解释js脚本</li><li>人物卡的切换与切换时发送消息变换头像与名字</li><li>人物卡分享与Fork</li></ul></li><li>投骰表达式与消息拦截器</li><li>输入时向所有人发送输入状态</li><li>在线招募系统</li></ul><h4 id="线上监控"><a href="#线上监控" class="headerlink" title="线上监控"></a>线上监控</h4><ul><li>计划任务记录</li><li>接口耗时统计</li><li>请求限流</li><li>系统日志: 日志会被转发到<code>loggly</code>或本地记录。其他的操作相关会存储到数据库<ul><li>用户登录记录</li><li>机器人记录</li><li>投骰记录</li><li>oss文件记录</li></ul></li><li>登录/注册统计汇总</li><li>前端后端错误汇报</li></ul><h2 id="项目规模"><a href="#项目规模" class="headerlink" title="项目规模"></a>项目规模</h2><ul><li>开发时间: 3年</li><li>所用数据表: 61张</li><li>功能完整的多端:<ul><li>两版网页端</li><li>基于React Native的安卓端</li></ul></li></ul><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p><img src="https://i.loli.net/2020/09/18/IdQJskawY9mC1RG.png"></p><p>在线地址: <a href="https://trpg.moonrailgun.com/">https://trpg.moonrailgun.com/</a><br>开源地址: <a href="https://github.com/TRPGEngine/Client">https://github.com/TRPGEngine/Client</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> typescript </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 注意事项</title>
      <link href="/posts/80587f52/"/>
      <url>/posts/80587f52/</url>
      
        <content type="html"><![CDATA[<h2 id="Inline-Style-内联样式"><a href="#Inline-Style-内联样式" class="headerlink" title="Inline Style 内联样式"></a>Inline Style 内联样式</h2><p>内联样式有一些简写操作</p><p>比如:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&#123;&#123;<span class="attr">height</span>: <span class="number">10</span>&#125;&#125;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>转化为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 10px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>在jsx中会自动加上px单位。但需要注意的是, 并不是每种属性都会自动加上单位的。容易出问题的比如<code>lineHeight</code></p><p>这里有一个列表，以下属性不会自动加上px</p><ul><li>animationIterationCount</li><li>boxFlex</li><li>boxFlexGroup</li><li>boxOrdinalGroup</li><li>columnCount</li><li>fillOpacity</li><li>flex</li><li>flexGrow</li><li>flexPositive</li><li>flexShrink</li><li>flexNegative</li><li>flexOrder</li><li>fontWeight</li><li>lineClamp</li><li>lineHeight</li><li>opacity</li><li>order</li><li>orphans</li><li>stopOpacity</li><li>strokeDashoffset</li><li>strokeOpacity</li><li>strokeWidth</li><li>tabSize</li><li>widows</li><li>zIndex</li><li>zoom</li></ul><p>参考文章: <a href="https://react-cn.github.io/react/tips/style-props-value-px.html">Shorthand for Specifying Pixel Values in style props</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>又拍云整站网页存放到OSS的解决方案</title>
      <link href="/posts/c09e1fbc/"/>
      <url>/posts/c09e1fbc/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>前后端分离后允许前端页面静态访问，因此整站放到OSS上成为可能</p><p>但是有一个问题就是要如何实现原来单页应用上刷新页面无法获取到正确的网页文件的问题</p><p>该问题在nginx上的解决方案是这样的:</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">location</span> <span class="title">/ &#123;</span></span><br><span class="line"><span class="title">  try_files</span> $uri /index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>又拍云边缘规则编程模式下配置规则</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$WHEN($NOT($MATCH($_URI,<span class="string">&#x27;[\\.]&#x27;</span>)))/index.html</span><br></pre></td></tr></table></figure><p>表示所有连接都返回根目录的<code>index.html</code>文件</p><h2 id="更加复杂的场景"><a href="#更加复杂的场景" class="headerlink" title="更加复杂的场景"></a>更加复杂的场景</h2><p>对于实际场景中，可能有多个应用并存，比如我的TRPG Engine中就有多个单页应用存在一个域名下</p><p>三个应用:</p><ul><li>/index.html 主应用</li><li>/playground/index.html playground页，只有一个页面</li><li>/portal/index.html portal页, 会有多个页面存在</li></ul><p>我给出配置如下:</p><p>优先级1: playground <strong>break</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$WHEN</span>(<span class="variable">$EQ</span>(<span class="variable">$_URI</span>,<span class="string">&#x27;/playground&#x27;</span>))<span class="regexp">/playground/i</span>ndex.html</span><br></pre></td></tr></table></figure><p>优先级2: portal <strong>break</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$WHEN</span>(<span class="variable">$ALL</span>(<span class="variable">$MATCH</span>(<span class="variable">$_URI</span>,<span class="string">&#x27;^/portal&#x27;</span>),<span class="variable">$NOT</span>(<span class="variable">$MATCH</span>(<span class="variable">$_URI</span>,<span class="string">&#x27;[\\.]&#x27;</span>))))<span class="regexp">/portal/i</span>ndex.html</span><br></pre></td></tr></table></figure><p>优先级3: 单页应用</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$WHEN($NOT($MATCH($_URI,<span class="string">&#x27;[\\.]&#x27;</span>)))/index.html</span><br></pre></td></tr></table></figure><blockquote><p>其中<code>break</code>的意思是满足一个条件则不会继续往下匹配</p></blockquote><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>参考链接: <a href="https://cnodejs.org/topic/5badd93037a6965f59051d40">https://cnodejs.org/topic/5badd93037a6965f59051d40</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> upyun </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次重启网络服务后网络不通的调试</title>
      <link href="/posts/bdc192d2/"/>
      <url>/posts/bdc192d2/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>我的网络服务端是用docker搭建的Nginx服务器。在一次重启网络服务<code>service network restart</code>后监控机器人告知服务挂了。检查以后发现服务可以ping通，查询日志无异常，docker服务反复重启也无法使其正常生效。考虑到使用的是弹性公网会不会是虚拟网络之间的问题，经排查后也不存在该问题。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在google找方案的时候受到启发，输入<code>netstat -tunlp</code>检查监听端口。果然没有只有一条<code>tcp6 :::80</code>的监听而没有应当有的<code>0.0.0.0:80</code>的监听。那么问题就出在端口方面，而我docker的状态明明写的是<code>0.0.0.0:80-&gt;80/tcp</code>啊，为什么会没有监听ipv4的端口？</p><p>为使其能够正常运行。编辑<code>/etc/sysctl.conf</code>加上一条以开启ipv4转发</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">net</span>.ipv<span class="number">4</span>.ip_forward=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>如果改行已存在则直接修改.</p><p>成功后输入<code>sysctl -p</code>检查变更已成功应用。</p><p>无需重启即可生效，检查后发现网络服务已恢复正常</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>让Chrome显示完整网址</title>
      <link href="/posts/ed7510e5/"/>
      <url>/posts/ed7510e5/</url>
      
        <content type="html"><![CDATA[<p>Chrome 76+版本以后默认隐藏 <code>https://</code> , <code>www</code>等<em>无关紧要</em>的标识符</p><p>作为开发者，这些信息是非常有价值的。因此需要手动再将其重新开启</p><h3 id="在flags页面中将其重新开启"><a href="#在flags页面中将其重新开启" class="headerlink" title="在flags页面中将其重新开启"></a>在flags页面中将其重新开启</h3><p>地址栏<code>chrome://flags</code>, 进入flags页面</p><h4 id="Chrome-版本小于83"><a href="#Chrome-版本小于83" class="headerlink" title="Chrome 版本小于83"></a>Chrome 版本小于83</h4><p>将<code>Omnibox UI Hide Steay-State URL Scheme and Trivial Subdomains</code>设置为禁用</p><h4 id="Chrome-版本大于等于83"><a href="#Chrome-版本大于等于83" class="headerlink" title="Chrome 版本大于等于83"></a>Chrome 版本大于等于83</h4><p>将<code>Context menu show full URLs</code>设置为启用, 并右键地址栏选中<code>总是显示完整网址</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>adb devices无法获取夜神模拟器的解决方案</title>
      <link href="/posts/86a1d2a7/"/>
      <url>/posts/86a1d2a7/</url>
      
        <content type="html"><![CDATA[<p>在开启模拟器的前提下。在终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ adb devices</span><br></pre></td></tr></table></figure><p>如果没有看到夜神模拟器的设备。则将<code>$&#123;ANDROID_HOME&#125;/platform-tools/adb.exe</code>复制并覆盖夜神模拟器根目录下的<code>adb.exe</code>与<code>nox_adb.exe</code>。</p><p>重启后查看效果(重启前确保后台的<code>adb.exe</code>与<code>nox_adb.exe</code>进程已被关闭)</p>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> adb </tag>
            
            <tag> nox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新服务器必做二三事</title>
      <link href="/posts/303de4fd/"/>
      <url>/posts/303de4fd/</url>
      
        <content type="html"><![CDATA[<p>主要是给自己一个提醒。一个新服务器需要做哪些必备项目</p><h3 id="增加新用户用于常用用户"><a href="#增加新用户用于常用用户" class="headerlink" title="增加新用户用于常用用户"></a>增加新用户用于常用用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ useradd xxxx</span><br><span class="line">$ passwd xxx</span><br></pre></td></tr></table></figure><h3 id="切换到用户-设置为秘钥登录"><a href="#切换到用户-设置为秘钥登录" class="headerlink" title="切换到用户 设置为秘钥登录"></a>切换到用户 设置为秘钥登录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ su xxx</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ mkdir .ssh</span><br><span class="line">$ chmod 700 .ssh</span><br><span class="line">$ vim authorized_keys <span class="comment"># 插入登录公钥</span></span><br><span class="line">$ chmod 600 authorized_keys</span><br></pre></td></tr></table></figure><h3 id="关闭密码登录和root用户登录-仅允许密码登录"><a href="#关闭密码登录和root用户登录-仅允许密码登录" class="headerlink" title="关闭密码登录和root用户登录 仅允许密码登录"></a>关闭密码登录和root用户登录 仅允许密码登录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">exit</span> <span class="comment"># 退出到root用户</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/ssh/sshd_config</span><br><span class="line">$ service sshd restart</span><br></pre></td></tr></table></figure><p><strong>设定以下参数:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PermitRootLogin no # 不允许root用户直接登录</span><br><span class="line">PasswordAuthentication no # 不允许通过密码登录(即仅允许秘钥登录)</span><br></pre></td></tr></table></figure><h2 id="可选项目"><a href="#可选项目" class="headerlink" title="可选项目"></a>可选项目</h2><h3 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/hostname</span><br><span class="line">$ hostname $(cat /etc/hostname)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速构建软件文档——docusaurus v2</title>
      <link href="/posts/856c955/"/>
      <url>/posts/856c955/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>来源是想要给我的应用做一个首页。需要有文档、首页两项。如果文档中能插入一些比较复杂的内容(如在线预览)这样的功能的话就更好了</p><p>开始使用的是<code>docusaurus v1</code>, 后来发现他无法在markdown文档中插入<code>iframe</code>。 会触发一个诡异的bug，导致渲染中断，无法正常渲染后面的内容，因此就中断了。后来发现<code>docusaurus</code>开始开发了v2版。虽然处于Beta阶段但还是能进行初步的使用了。</p><ul><li><a href="https://v2.docusaurus.io/">docusaurus v2官方文档</a></li></ul><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>docusaurus v2.0.0-alpha.50</li></ul><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>使用React开发。可以体会到现代语言的优势。</li><li>内置文档、博客，集成<a href="https://community.algolia.com/docsearch/">Algolia DocSearch</a>。开箱即用。</li><li>完全可定制的组件和样式, 增加完全的可定制化能力</li><li>MDX实现。在Markdown中也能使用React组件</li></ul><h2 id="自定义独立页面"><a href="#自定义独立页面" class="headerlink" title="自定义独立页面"></a>自定义独立页面</h2><p>略过初始化内容。我们直接进入自定义的阶段。</p><p>docusaurus 的独立页面在<code>src/pages</code>文件夹中, 就和写React组件一样我们可以利用React很轻松的构建属于自己的页面, 首页就是index.js。</p><p>对于非模板化的页面。比如首页、showcase、问卷调查这些，都可以通过独立页面来实现。</p><h2 id="自定义渲染组件"><a href="#自定义渲染组件" class="headerlink" title="自定义渲染组件"></a>自定义渲染组件</h2><p>docusaurus 提供了很强的自定义能力，使用<code>@theme/*</code>引用组件。提供一套预设的组件用于渲染网站的各个部位。其内容在<a href="https://github.com/facebook/docusaurus/tree/master/packages/docusaurus-theme-classic">https://github.com/facebook/docusaurus/tree/master/packages/docusaurus-theme-classic</a></p><p>对于该项目中的每一个组件，我们都能进行定制。使用<code>docusaurus swizzle &lt;theme name&gt; [component name]</code>命令将样式包中的组件复制到自己的<code>src/theme</code>文件夹中。可以指定的替换相应组件的实现</p><p>如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run swizzle @docusaurus/theme-classic Footer</span><br></pre></td></tr></table></figure><p>来重写页脚。</p><p><code>@theme/*</code> 引用会以此查找本地的<code>src/theme</code>文件夹的组件，主题包里的组件。</p><h2 id="自定义markdown渲染"><a href="#自定义markdown渲染" class="headerlink" title="自定义markdown渲染"></a>自定义markdown渲染</h2><p>Markdown是我们写文档重要的工具，有时候Markdown基本的语法无法满足我们的需要，此时就可以自己编写渲染逻辑。这样在不丧失Markdown简洁的前提下给予我们文档更加强大的表现力</p><p>比如我就自己写了一个组件, 用于将代码与预览相互转化: <a href="https://github.com/TRPGEngine/Server/blob/master/services/Website/website/src/plugins/remark-template-previewer.js">https://github.com/TRPGEngine/Server/blob/master/services/Website/website/src/plugins/remark-template-previewer.js</a></p><p>当然还有一种方法是利用MDX的特性在Markdown中引用React组件</p><h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><ul><li><a href="https://trpgdoc.moonrailgun.com/">https://trpgdoc.moonrailgun.com/</a></li></ul><p>更多<code>docusaurus</code>的特性请查阅<a href="https://v2.docusaurus.io/">官方文档</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> docusaurus </tag>
            
            <tag> docusaurus v2 </tag>
            
            <tag> 文档 </tag>
            
            <tag> 静态网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wsl2入坑指南</title>
      <link href="/posts/87881b14/"/>
      <url>/posts/87881b14/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>WSL2支持了docker环境，这给了我一个入坑wsl的理由。在一段时间的配置和踩坑以后我将wsl配置需求记录下来</p><p>任务目标:</p><ul><li>配置wsl2</li><li>在wsl安装docker环境</li><li>搭建基本环境</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="更新Windows10的版本以安装wsl2"><a href="#更新Windows10的版本以安装wsl2" class="headerlink" title="更新Windows10的版本以安装wsl2"></a>更新Windows10的版本以安装wsl2</h3><blockquote><p>WSL 2 仅适用于 Windows 10 版本 18917 或更高版本</p></blockquote><p>因此首先我们要window10版本升级到匹配的版本。目前来说正式发行版无法升级到相应版本，因此需要启用开发者预览版。启用方式是搜索<code>insider</code>打开<code>Windows 预览体验计划</code>的设置页面（在设置的 <code>更新和安全</code> 的最后一项）</p><p>根据提示将自己的微软账号注册为开发者账号。在获取预览版本的频率中选择 <code>慢(Slow)</code> 因为我们需要一个相对稳定的版本。</p><p>然后手动检测windows更新即可升级到符合条件的版本</p><p><em>PS: 注意, 更新版本以后可能会丢失一些windows的系统设置。需要手动检查并重新设置回来</em></p><h3 id="启用wsl2"><a href="#启用wsl2" class="headerlink" title="启用wsl2"></a>启用wsl2</h3><p>以<strong>管理员身份</strong>打开Powershell</p><p>首先启用wsl</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Enable-WindowsOptionalFeature</span> <span class="literal">-Online</span> <span class="literal">-FeatureName</span> Microsoft<span class="literal">-Windows</span><span class="literal">-Subsystem</span><span class="literal">-Linux</span></span><br></pre></td></tr></table></figure><p>重启计算机</p><p>以管理员身份打开Powershell</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:Microsoft<span class="literal">-Windows</span><span class="literal">-Subsystem</span><span class="literal">-Linux</span> /all /norestart</span><br><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure><p>重启计算机</p><p>在<code>Microsoft Store</code>搜索<code>wsl</code>下载自己喜欢的Linux系统</p><ul><li><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10#install-your-linux-distribution-of-choice">在 Windows 10 上安装</a></li></ul><blockquote><p>注意!!!!<br>如果你使用wsl2的目的是为了docker。请务必选择Ubuntu 18.04系统! 因为Debian无法正常启动docker服务(其他系统没有测试过)! </p></blockquote><p>在Powershell中查看自己当前已安装的Linux系统与使用的版本</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">-l</span> <span class="literal">-v</span></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">wsl -<span class="literal">-list</span> -<span class="literal">-verbose</span></span><br></pre></td></tr></table></figure><p>设置linux系统使用的wsl版本。wsl1和wsl2据开发者所说会一直共存下去。因此要手动分配</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -<span class="literal">-set</span><span class="literal">-version</span> &lt;Distro&gt; <span class="number">2</span></span><br></pre></td></tr></table></figure><p><code>&lt;Distro&gt;</code> 替换为上面列出的系统名称</p><p>将wsl2设置为默认的wsl体系</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -<span class="literal">-set</span><span class="literal">-default</span><span class="literal">-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>这会使你安装的任何新发行版均初始化为 WSL 2 发行版。</p><h3 id="将软件源更换为清华源-可选"><a href="#将软件源更换为清华源-可选" class="headerlink" title="将软件源更换为清华源(可选)"></a>将软件源更换为清华源(可选)</h3><ul><li><a href="https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/">清华源</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>将软件源设置为国内源的话操作会更加流畅</li></ul><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><p>进入wsl, 输入<code>uname -a</code>可以检测版本</p><h4 id="快速安装Docker"><a href="#快速安装Docker" class="headerlink" title="快速安装Docker"></a>快速安装Docker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">$ sudo sh get-docker.sh</span><br><span class="line">$ sudo service docker start</span><br><span class="line">$ sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><p>使用<code>service docker status</code>查看docker服务的状态</p><h3 id="安装zsh作为常用的shell"><a href="#安装zsh作为常用的shell" class="headerlink" title="安装zsh作为常用的shell"></a>安装zsh作为常用的shell</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装zsh</span></span><br><span class="line">sudo apt-get install zsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装oh-my-zsh</span></span><br><span class="line">sh -c <span class="string">&quot;<span class="subst">$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>&quot;</span></span><br></pre></td></tr></table></figure><h2 id="相互访问网络应用"><a href="#相互访问网络应用" class="headerlink" title="相互访问网络应用"></a>相互访问网络应用</h2><blockquote><p>WSL 2 做了架构的巨大变更，使用了虚拟化技术，并仍在努力改进网络支持。由于 WSL 2 现在运行在虚拟机中，因此你从 Windows 访问 Linux 网络应用程序需要使用该 VM 的 IP 地址，反之亦然，你需要 Windows 主机的 IP 地址才能从 Linux 中访问 Windows 网络应用程序。 WSL 2 的目标是尽可能使用 localhost 访问网络应用程序！可以在文档中找到有关如何执行此操作的完整详细信息和步骤。</p></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>微软: <a href="https://docs.microsoft.com/zh-cn/windows/wsl/wsl2-install">WSL 2 的安装说明</a><br>知乎: <a href="https://zhuanlan.zhihu.com/p/74489613">WSL 2中安装Docker</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> wsl </tag>
            
            <tag> wsl2 </tag>
            
            <tag> Ubuntu 18.04 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈节流(throttle)与防抖动(debounce)</title>
      <link href="/posts/3d731f17/"/>
      <url>/posts/3d731f17/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>节流与防抖是性能优化常见的方式，用于限制一些高频操作导致对cpu无意义的负担。<br>我搜索了网络上很多相关的文章，都没有办法直观表现出两者的区别。因此我自己总结了一下两者的区别，并用几个例子来解释一下两者区别</p><p>一下内容均以 <code>lodash</code> 的实现为例</p><h2 id="防抖动debounce"><a href="#防抖动debounce" class="headerlink" title="防抖动debounce"></a>防抖动debounce</h2><p>防抖动的核心概念是当停止调用函数一段时间后。调用该函数</p><p>example:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> d = _.debounce(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;call func&#x27;</span>), <span class="number">1000</span>, &#123;<span class="attr">leading</span>: <span class="literal">true</span>, <span class="attr">trailing</span>: <span class="literal">true</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dt = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;call timer&#x27;</span>);</span><br><span class="line">  d();</span><br><span class="line">&#125;, <span class="number">200</span>);</span><br></pre></td></tr></table></figure><p>输出结果如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">call func <span class="comment"># 如果 leading 为true</span></span><br><span class="line">call timer</span><br><span class="line">call timer</span><br><span class="line">call timer</span><br><span class="line">call timer</span><br><span class="line">call timer</span><br><span class="line">...</span><br><span class="line">call timer</span><br><span class="line">call timer</span><br><span class="line">call timer</span><br><span class="line">(执行clearInterval(dt))</span><br><span class="line">(等待1s后)</span><br><span class="line">call func <span class="comment"># 如果 trailing 为true</span></span><br></pre></td></tr></table></figure><p>即如果在限定时间(本例为1s)内不断调用防抖函数，则永远不会触发1s后的trailing的输出</p><h2 id="节流throttle"><a href="#节流throttle" class="headerlink" title="节流throttle"></a>节流throttle</h2><p>节流的核心概念是一段时间内，函数最多只能被调用一次。</p><p>example:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> t1 = _.throttle(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;call func&#x27;</span>), <span class="number">1000</span>, &#123;<span class="attr">leading</span>: <span class="literal">true</span>, <span class="attr">trailing</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">t1(); <span class="comment">// 立即输出call func</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> t2 = _.throttle(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;call func&#x27;</span>), <span class="number">1000</span>, &#123;<span class="attr">leading</span>: <span class="literal">false</span>, <span class="attr">trailing</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">t2(); <span class="comment">// 一秒后输出call func</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> t3 = _.throttle(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;call func&#x27;</span>), <span class="number">1000</span>, &#123;<span class="attr">leading</span>: <span class="literal">false</span>, <span class="attr">trailing</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">t3(); <span class="comment">// 无反应</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> t4 = _.throttle(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;call func&#x27;</span>), <span class="number">1000</span>, &#123;<span class="attr">leading</span>: <span class="literal">true</span>, <span class="attr">trailing</span>: <span class="literal">true</span>&#125;);</span><br><span class="line"><span class="keyword">const</span> t4t = <span class="built_in">setInterval</span>(t4, <span class="number">200</span>); <span class="comment">// 立即输出call func, 之后每秒输出一次</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> t5 = _.throttle(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;call func&#x27;</span>), <span class="number">1000</span>, &#123;<span class="attr">leading</span>: <span class="literal">false</span>, <span class="attr">trailing</span>: <span class="literal">true</span>&#125;);</span><br><span class="line"><span class="keyword">const</span> t5t = <span class="built_in">setInterval</span>(t5, <span class="number">200</span>); <span class="comment">// 一秒后输出call func, 之后每秒输出一次</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> t6 = _.throttle(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;call func&#x27;</span>), <span class="number">1000</span>, &#123;<span class="attr">leading</span>: <span class="literal">false</span>, <span class="attr">trailing</span>: <span class="literal">false</span>&#125;);</span><br><span class="line"><span class="keyword">const</span> t6t = <span class="built_in">setInterval</span>(t6, <span class="number">200</span>); <span class="comment">// 一秒后输出call func, 之后每秒输出一次 因为内部是通过 debounce 的 maxWait来实现的</span></span><br></pre></td></tr></table></figure><p>如果在 <code>throttle</code> 规定的时间内有多次触发的话。必定会在时间段结束时触发函数调用<br>如果只有一次触发的话。如果 <code>leading</code> 和 <code>trailing</code> 都为 <code>true</code> 。只会触发开始的那次函数调用</p><h2 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h2><p>对于lodash来说<br>throttle的实现是通过debounce来实现的</p><p><em><a href="https://github.com/lodash/lodash/blob/master/throttle.js">lodash 实现</a></em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">throttle(func, wait, options);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"></span><br><span class="line">debounce(func, wait, &#123;</span><br><span class="line">  options.leading || <span class="literal">true</span>,</span><br><span class="line">  options.trailing || <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&#x27;maxWait&#x27;</span>: wait</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://css-tricks.com/debouncing-throttling-explained-examples/">https://css-tricks.com/debouncing-throttling-explained-examples/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> throttle </tag>
            
            <tag> debounce </tag>
            
            <tag> lodash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Swarm 模型配合 traefik 实现集群sticky实践</title>
      <link href="/posts/3acd928b/"/>
      <url>/posts/3acd928b/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h4 id="为什么要用Docker-Swarm-相比-Kubernetes-有什么好处"><a href="#为什么要用Docker-Swarm-相比-Kubernetes-有什么好处" class="headerlink" title="为什么要用Docker Swarm, 相比 Kubernetes 有什么好处"></a>为什么要用Docker Swarm, 相比 Kubernetes 有什么好处</h4><p><code>Docker Swarm</code>可以看作是docker自带的一个简化版的<code>Kubernetes</code>, 拥有<code>Kubernetes</code>的基本功能如:</p><ul><li>更新</li><li>回滚</li><li>动态扩容</li><li>分布式部署</li></ul><p>而 <code>Docker Swarm</code> 的优势在于:</p><ul><li><code>Docker</code> 自带， 无需另外安装。学习成本低</li><li>单机也能很好的使用，也可以很方便的进行实例扩容与设备扩容</li><li><code>Swarm</code> 只有2层网络封装，而 <code>Kubernetes</code> 有5层网络封装</li><li><code>Swarm</code> 本身占用的内存只有100M左右，而 <code>Kubernetes</code> 的简化版 k3s 也需要512M的内存空间，对小资源机器友好</li></ul><h4 id="Traefik-是什么-为什么要使用它"><a href="#Traefik-是什么-为什么要使用它" class="headerlink" title="Traefik 是什么, 为什么要使用它"></a>Traefik 是什么, 为什么要使用它</h4><ul><li><a href="https://docs.traefik.io/">Traefik官方文档</a></li></ul><p><code>Traefik</code> 是一个反向代理软件，类似 <code>Nginx</code>但对于微服务有很好的优化。可以搭配各种分布式发现服务而无需另外配置。在本篇文章中我们会使用 <code>Docker Provider</code> 作为服务发现。</p><p>虽然 <code>Docker Swarm</code> 自带了http请求的分发，但是无法实现 <code>sticky</code> 功能(即同一用户的请求会分发到同一后端实例)，因此需要Traefik 作为请求的中间件来分发请求</p><h2 id="搭建-Docker-Swarm-环境"><a href="#搭建-Docker-Swarm-环境" class="headerlink" title="搭建 Docker Swarm 环境"></a>搭建 Docker Swarm 环境</h2><p><code>Docker Swarm</code> 环境非常好搭建，因为已经集成到Docker中了。我们安装好Docker以后就可以直接使用了</p><p>依赖:</p><ul><li>Docker 1.12+</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化swarm, 并将当前节点作为manager</span></span><br><span class="line">$ docker swarm init</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 或者使用--advertise-addr 和 --listen-addr参数来指定使用哪个IP作为沟通IP</span></span><br><span class="line"><span class="comment"># 两个参数一般保持一致即可</span></span><br><span class="line">$ docker swarm init --advertise-addr 10.0.0.1:2377 --listen-addr 10.0.0.1:2377</span><br></pre></td></tr></table></figure><h2 id="使用Docker快速搭建Traefik"><a href="#使用Docker快速搭建Traefik" class="headerlink" title="使用Docker快速搭建Traefik"></a>使用Docker快速搭建Traefik</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">reverse-proxy:</span></span><br><span class="line">    <span class="comment"># The official v2.0 Traefik docker image</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">traefik:v2.0</span></span><br><span class="line">    <span class="comment"># Enables the web UI and tells Traefik to listen to docker</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">--api.insecure=true</span> <span class="string">--providers.docker.endpoint=tcp://127.0.0.1:2377</span> <span class="string">--providers.docker.swarmMode=true</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="comment"># The HTTP port</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">      <span class="comment"># The Web UI (enabled by --api.insecure=true)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="comment"># So that Traefik can listen to the Docker events</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br></pre></td></tr></table></figure><ul><li><code>api.insecure</code>参数用于打开WEB UI. 可以访问<code>127.0.0.1:8080/api/rawdata</code>获取当前可以连接到的服务的相关信息</li><li><code>providers.docker.endpoint</code>指向docker的沟通端口。默认端口为<code>2377</code></li><li><code>providers.docker.swarmMode</code> 表示为swarm模式</li></ul><h2 id="创建测试服务"><a href="#创建测试服务" class="headerlink" title="创建测试服务"></a>创建测试服务</h2><p>此处使用 <code>whoami</code> 镜像提供的HTTP服务用于打印出集群连接相关信息</p><p>将以下文件保存为docker-compose.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">whoami:</span></span><br><span class="line">    <span class="comment"># A container that exposes an API to show its IP address</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">containous/whoami</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;traefik.http.routers.whoami.rule=Host(`whoami.docker.localhost`)&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;traefik.http.services.whoami.loadbalancer.server.port=80&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;traefik.http.services.whoami.loadbalancer.sticky=true&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;traefik.http.services.whoami.loadbalancer.sticky.cookie.name=foosession&quot;</span></span><br></pre></td></tr></table></figure><p>启动集群:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stack <span class="keyword">deploy</span> -c <span class="string">./docker-compose.yml</span> whoami</span><br></pre></td></tr></table></figure><p>测试命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -vs -c cookie.txt -b cookie.txt -H <span class="string">&quot;Host: whoami.docker.localhost&quot;</span> http://127.0.0.1</span><br></pre></td></tr></table></figure><p>注意需要带上 header <code>Host</code> 这样才能成功反向代理</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> swarm </tag>
            
            <tag> traefik </tag>
            
            <tag> 集群 </tag>
            
            <tag> sticky </tag>
            
            <tag> cluster </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim 操作笔记</title>
      <link href="/posts/49d9534d/"/>
      <url>/posts/49d9534d/</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>听说Vim对开发者开发效率有比较大的提升，正好最近在寻求突破，就开始尝试一下一直想尝试使用的vim</p><p>此处主要记录了配置vim的一些关键</p><p>系统环境:</p><ul><li>Mac</li><li>zsh</li></ul><h2 id="替换系统自带的vim"><a href="#替换系统自带的vim" class="headerlink" title="替换系统自带的vim"></a>替换系统自带的vim</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 brew 安装 vim</span></span><br><span class="line">$ brew install vim</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;vim=/usr/local/bin/vim&quot;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="安装包管理器"><a href="#安装包管理器" class="headerlink" title="安装包管理器"></a>安装包管理器</h2><p>使用<a href="https://github.com/junegunn/vim-plug">vim-plug</a> 作为包管理器</p><h2 id="划分vim配置-可选"><a href="#划分vim配置-可选" class="headerlink" title="划分vim配置(可选)"></a>划分vim配置(可选)</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">~</span><br><span class="line">├── <span class="selector-class">.vimrc</span></span><br><span class="line">└── <span class="selector-class">.vim</span></span><br><span class="line">    ├── <span class="selector-tag">autoload</span></span><br><span class="line">    ├── <span class="selector-tag">general</span><span class="selector-class">.vim</span></span><br><span class="line">    ├── <span class="selector-tag">mappings</span><span class="selector-class">.vim</span></span><br><span class="line">    └── <span class="selector-tag">plugins</span><span class="selector-class">.vim</span></span><br></pre></td></tr></table></figure><p>在<code>.vimrc</code>中使用如下命令进行子配置运行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">runtime</span>! <span class="selector-tag">mappings</span><span class="selector-class">.vim</span></span><br><span class="line"><span class="selector-tag">runtime</span>! <span class="selector-tag">general</span><span class="selector-class">.vim</span></span><br><span class="line"><span class="selector-tag">runtime</span>! <span class="selector-tag">plugins</span><span class="selector-class">.vim</span></span><br></pre></td></tr></table></figure><h2 id="插件、主题、配置"><a href="#插件、主题、配置" class="headerlink" title="插件、主题、配置"></a>插件、主题、配置</h2><!-- TODO --><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><h4 id="不常见但实用"><a href="#不常见但实用" class="headerlink" title="不常见但实用"></a>不常见但实用</h4><ul><li><p><code>Ctrl + o</code>: 跳到上一个位置</p></li><li><p><code>Ctrl + i</code>: 跳到下一个位置</p></li><li><p><code>Ctrl + u</code>: 上翻半页</p></li><li><p><code>Ctrl + d</code>: 下翻半页</p></li><li><p><code>Shift + *</code>: 在当前文件中搜索光标指定位置的文本</p></li><li><p><code>Ctrl + r</code>: 在命令模式如插入寄存器中的文本。如<code>Ctrl+r</code> <code>&quot;</code></p></li><li><p><code>cw</code>: 替换从光标所在位置后到一个单词结尾的字符</p></li></ul><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><ul><li><p>智能大小写匹配</p><p>如果搜索字符串有大写时则对大小写敏感</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">set</span> ignorecase</span><br><span class="line"><span class="builtin-name">set</span> smartcase</span><br></pre></td></tr></table></figure><p><strong>必须设置了ignorecase后smartcase才生效</strong></p></li><li><p>让vim支持系统剪切板</p><p>首先需要vim支持剪切板功能，如果没有的话就下载完整的包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim --version | grep clipboard</span><br></pre></td></tr></table></figure><p>如果<code>clipboard</code>属性前为+则说明vim已支持剪切板</p><p>然后设置<code>.vimrc</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">set</span> <span class="attribute">clipboard</span>=unnamed</span><br></pre></td></tr></table></figure></li><li><p>退出时保存会话并在下次打开时恢复</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">au</span> VimLeave * mks! ~/Session.<span class="keyword">vim</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">expand</span>(<span class="string">&quot;%&quot;</span>)==<span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">expand</span>(<span class="string">&quot;~/Session.vim&quot;</span>)==<span class="built_in">findfile</span>(<span class="string">&quot;~/Session.vim&quot;</span>))</span><br><span class="line">    <span class="keyword">silent</span> :<span class="keyword">source</span> ~/Session.<span class="keyword">vim</span></span><br><span class="line">  <span class="keyword">endif</span></span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://coolshell.cn/articles/5426.html">简明 VIM 练级攻略</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zIndex与层叠上下文Stacking Context</title>
      <link href="/posts/b0357b9f/"/>
      <url>/posts/b0357b9f/</url>
      
        <content type="html"><![CDATA[<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context">The stacking context</a></li><li><a href="https://juejin.im/post/5b53e4f751882519f6476a44">你不知道的CSS堆叠上下文(Stacking Context)</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> webpack-dev-server </tag>
            
            <tag> css </tag>
            
            <tag> z-index </tag>
            
            <tag> stacking context </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unicode编码解明</title>
      <link href="/posts/d0843649/"/>
      <url>/posts/d0843649/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文简述了Unicode编码解码相关知识。假设读者已经对此有一定的基本了解</p><ul><li><a href="https://zh.wikipedia.org/wiki/UTF-8">UTF-8</a></li></ul><h2 id="从Base64开始"><a href="#从Base64开始" class="headerlink" title="从Base64开始"></a>从Base64开始</h2><p>为了更好说明变长字符编码，我们从Base64编码开始。因为Base64是每个字节进行编码</p><p>编码如下字符串:</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你好, 世界!</span><br></pre></td></tr></table></figure><p>得到如下编码:</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>L<span class="number">2</span><span class="name">g5</span>aW<span class="number">9</span>LCDkuJb<span class="symbol">nlYwh</span></span><br></pre></td></tr></table></figure><p>将这段编码放入浏览器控制台中进行不进行任何处理的解密</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">atob(<span class="string">&#x27;5L2g5aW9LCDkuJbnlYwh&#x27;</span>);</span><br></pre></td></tr></table></figure><p>得到如下结果:</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ä½ å¥½, ä¸ç!</span><br></pre></td></tr></table></figure><p>可以阴影约约看到逗号和感叹号已经被解释出来，而中文没有被正确处理。因为英文的逗号和感叹号在128位ascii表中。而其他的中文字符就无法正确翻译了。</p><p>为了能正确翻译中文。我们需要对数据进行一些特殊处理。即实现utf8的编码规范来将二进制转换成一个unicode码，使其能对应上一个具体的字符。(unicode表是一个巨大的map, 每个数字都能对应一个具体的字符, 至于字符的具体渲染由系统提供的字体显示)</p><blockquote><p>atob<br>atob 是一个很基础的base64转二进制的方法。他只会单独的去处理每个字节而不管其具体的编码实现</p></blockquote><h2 id="UTF8解码"><a href="#UTF8解码" class="headerlink" title="UTF8解码"></a>UTF8解码</h2><p>我们先处理第一个字符<code>ä</code><br>很明显。这是因为浏览器错误的处理了这个字节的翻译。我们需要将其转换成二进制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;ä&#x27;</span>.charCodeAt(<span class="number">0</span>); <span class="comment">// 228</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将其转换成二进制</span></span><br><span class="line">(<span class="number">228</span>).toString(<span class="number">2</span>); <span class="comment">// 11100100</span></span><br></pre></td></tr></table></figure><p>我们查看一下 <a href="https://zh.wikipedia.org/wiki/UTF-8">utf8的编码规范</a> 。首字符前n个1表示由n个字节组成.以0表示收尾与分割。因此我们提取出其描述的二进制位为<code>1110</code>表示这个字由3个字节组成。那么我们继续提取接下来的2个字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;½&#x27;</span>.charCodeAt(<span class="number">0</span>).toString(<span class="number">2</span>); <span class="comment">// 10111101</span></span><br><span class="line"><span class="string">&#x27; &#x27;</span>.charCodeAt(<span class="number">0</span>).toString(<span class="number">2</span>); <span class="comment">// 10100000</span></span><br></pre></td></tr></table></figure><p>其中最前的二位<code>10</code>是描述位，是无效的。我们将这三个字节的有效的二进制位提取出来可得: <code>0100 111101 100000</code>。将其转换成16进制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">0b0100111101100000</span>).toString(<span class="number">16</span>); <span class="comment">// 4f60</span></span><br></pre></td></tr></table></figure><p>简单验证一下结果。直接在控制台输入:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;\u4f60&#x27;</span> <span class="comment">// 你</span></span><br></pre></td></tr></table></figure><p>我们成功提取出了第一个中文字符。那么剩下的中文字符也很简单了</p><p>而编码就是其逆过程</p><h2 id="UTF8编码"><a href="#UTF8编码" class="headerlink" title="UTF8编码"></a>UTF8编码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 你好, 世界! 编码成16进制字符</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;你好, 世界!&#x27;</span></span><br><span class="line"></span><br><span class="line">str</span><br><span class="line">  .split(<span class="string">&quot;&quot;</span>)</span><br><span class="line">  .map(<span class="function"><span class="params">char</span> =&gt;</span> char.charCodeAt(<span class="number">0</span>).toString(<span class="number">16</span>))</span><br><span class="line">  .map(<span class="function"><span class="params">hex</span> =&gt;</span> <span class="string">&quot;\\u&quot;</span> + hex.padStart(<span class="number">4</span>, <span class="string">&quot;0&quot;</span>))</span><br><span class="line">  .join(<span class="string">&quot;&quot;</span>); <span class="comment">// \u4f60\u597d\u002c\u0020\u4e16\u754c\u0021</span></span><br></pre></td></tr></table></figure><p>直接将输出的字符串复制到控制台可以看到自动转换出的中文</p><p><code>\u</code>表示的是只后面跟的是一个unicode。长度为4字节</p>]]></content>
      
      
      
        <tags>
            
            <tag> Unicode </tag>
            
            <tag> utf-8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单实现一个callback回调的包装器</title>
      <link href="/posts/2a644d07/"/>
      <url>/posts/2a644d07/</url>
      
        <content type="html"><![CDATA[<h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><ul><li>不使用await</li><li>不使用Promise</li><li>要求并行指定一系列有callback的函数，并取到返回值</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetch1</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  cb(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetch2</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  cb(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetch3</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cb(<span class="number">3</span>)</span><br><span class="line">  &#125;, <span class="number">10000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wrapFn</span>(<span class="params">fns</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">onCompleted</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> flag1 = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> flag2 = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> flags = fns.map(<span class="function">() =&gt;</span> <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">const</span> res = fns.map(<span class="function">() =&gt;</span> <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">const</span> check = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(!flags.includes(<span class="literal">false</span>)) &#123;</span><br><span class="line">        onCompleted(res);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fns.forEach(<span class="function">(<span class="params">fn, i</span>) =&gt;</span> &#123;</span><br><span class="line">      fn(<span class="function">(<span class="params">ret</span>) =&gt;</span> &#123;</span><br><span class="line">        flags[i] = <span class="literal">true</span>;</span><br><span class="line">        res[i] = ret;</span><br><span class="line">        check();</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 测试代码</span></span><br><span class="line">  wrapFn([fetch1, fetch2, fetch3])(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;全部执行完毕&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;结果:&#x27;</span>, res);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">main();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> callback </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git骚操作之从一个分支中批量将离散的commit 迁移到另一个分支</title>
      <link href="/posts/ec6df031/"/>
      <url>/posts/ec6df031/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>因为某些原因。分支A与分支B在某个点分叉了。且分叉出来的分支B拥有很多乱七八糟的commit。现在希望将分支B中的代码迁移到分支A中。但因为分支B中有很多其他的commit。因此希望把分支B舍弃，只保留想要的一些commit。</p><p>本例是指仅作者为我自己的commit</p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>使用<code>git log</code>将自己的commit选出来。然后切换到分支A上。将选出来的commit cherry-pick。</p><p>首先根据某些条件选出想要迁移的commit。最终输出成空格分割的hash号</p><p>bash语句如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本例假设起始commit为4524cb34ea4</span></span><br><span class="line"><span class="comment"># 当前所在分支: 分支B</span></span><br><span class="line">git <span class="built_in">log</span> --author moonrailgun --oneline 4524cb34ea4^1...HEAD | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | sed <span class="string">&#x27;1!G;h;$!d&#x27;</span> | xargs <span class="built_in">echo</span></span><br></pre></td></tr></table></figure><p>语句解释:</p><ul><li><code>git log --author moonrailgun --oneline 4524cb34ea4^1...HEAD</code> 获取范围<code>4524cb34ea4(包含该commit)~当前commit</code>的commit中作者是(包含)moonrailgun的列并用单行显示</li><li><code>awk &#39;&#123;print $1&#125;&#39;</code> 获取每行中以空格分割的第一列</li><li><code>sed &#39;1!G;h;$!d&#39;</code> 将输入按行倒序输出(因为<code>git log</code>输出的最后一行在最上面)</li><li><code>xargs echo</code> 将输入的行变成一行</li></ul><p>由此可以得到一串用空格分割的hash字符串</p><p>然后<code>git checkout A</code>切换到分支A。执行<code>git cherry-pick &lt;此处输入刚刚得到的字符串&gt;</code><br>如有冲突，解决冲突后<code>git cherry-pick --continue</code>即可</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul><li>不会丢失代码</li><li>若有冲突能马上解决</li><li>保留commit细节</li><li>解放生产力</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> cherry-pick </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Let&#39;s Encrypt免费通配符证书申请</title>
      <link href="/posts/5cf47e08/"/>
      <url>/posts/5cf47e08/</url>
      
        <content type="html"><![CDATA[<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/certbot/certbot.git</span><br></pre></td></tr></table></figure><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>示例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./certbot-auto certonly  -d *.moonrailgun.com --manual --preferred-challenges dns --server https://acme-v02.api.letsencrypt.org/directory</span><br></pre></td></tr></table></figure><p>参数说明:</p><ul><li><code>certonly</code> 表示安装模式，Certbot 有安装模式和验证模式两种类型的插件。</li><li><code>--manual</code> 表示手动安装插件，Certbot 有很多插件，不同的插件都可以申请证书，用户可以根据需要自行选择</li><li><code>-d</code> 为那些主机申请证书，如果是通配符，输入 *.yourdomain.com</li><li><code>--preferred-challenges dns</code> 使用 DNS 方式校验域名所有权</li><li><code>--server</code> Let’s Encrypt ACME v2 版本使用的服务器不同于 v1 版本，需要显示指定。</li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://www.jianshu.com/p/c5c9d071e395">Let’s Encrypt 终于支持通配符证书了</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> HTTPS </tag>
            
            <tag> SSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 查询优化笔记</title>
      <link href="/posts/c9e0808c/"/>
      <url>/posts/c9e0808c/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>正确的查询方式与正确的索引可以极大增加数据的查询效率，能极大提升服务器响应时间。对于较大的并发服务来说一点点提升也有比较大的收益。</p><h2 id="sql调优"><a href="#sql调优" class="headerlink" title="sql调优"></a>sql调优</h2><p>一条sql语句的执行过程:<br><img src="/images/mysql/sqlprocess.jpg"></p><blockquote><p>mysql分为server层和存储引擎层两个部分；<br>Server 层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySQL 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。<br>而存储引擎层负责数据的存储和提取。其架构模式是插件式的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。<br>现在最常用的存储引擎是 InnoDB，它从 MySQL 5.5.5 版本开始成为了默认存储引擎。</p></blockquote><h3 id="使用show-create-table-语句查看一张表的DDL"><a href="#使用show-create-table-语句查看一张表的DDL" class="headerlink" title="使用show create table 语句查看一张表的DDL"></a>使用show create table 语句查看一张表的DDL</h3><p><code>show create table user</code></p><h3 id="使用desc或explain调优sql语句"><a href="#使用desc或explain调优sql语句" class="headerlink" title="使用desc或explain调优sql语句"></a>使用desc或explain调优sql语句</h3><p>e.g. : <code>desc select * from user</code></p><p>即在要执行的语句前可以加上desc或explain查看该语句的查询操作。(两者操作是等价的)</p><p>该命令会列出以下项:</p><ul><li>id</li><li>select_type</li><li>table</li><li>partitions</li><li>type</li><li>possible_key</li><li>key</li><li>key_len</li><li>ref</li><li>rows</li><li>filterd</li><li>Extra</li></ul><p>其中我们主要需要关心的有三列: <code>key</code>, <code>rows</code> 与 <code>filtered</code></p><p>其中:<br>key主要是表示当前查询用到的键<br>rows表示查询后返回的行数<br>filtered表示当前查询过滤了多少。 <strong>100表示完全没有进行过滤，是最佳的情况</strong>。因为where操作是很消耗性能的</p><p>简单的，如<code>select count(1) from employees where gender = &#39;M&#39;</code><br>我们可以通过简单的增加一个索引来实现优化: <code>alter table employees add index(gender)</code><br><em>select count(1) 表示仅返回数据量而不关心数据值 减少其他变量影响结果</em></p><p>这样当我们使用<code>desc</code>语句时可以看到<code>key</code>变为了<code>gender</code>, <code>rows</code>数量为返回的数量，<code>filtered</code>变为了<code>100</code>。可以注意到的是，<code>Extra</code>的值从<code>Using where</code>变为<code>Using index</code>。说明我们这条语句使用了索引</p><p>而对于多条件的查询。我们可以通过联合索引来进行优化<br>如以下查询:<br><code>select count(1) from employees where gender = &#39;F&#39; and birth_date &gt; &#39;1964-01-01&#39;</code><br>则可以通过增加联合索引来进行优化<br><code>alter table employees add key (gender, birth_date)</code><br><strong>注意: 联合索引的顺序很重要，如果顺序不对则无法进行优化</strong></p><p>如果我们想在select时统计别的数据，如以下查询:<br><code>select count(distinct birth_date) from employees where gender = &#39;F&#39;</code><br>我们也可以使用联合索引进行调优<br><code>alter table employees add key (birth_date, gender)</code><br>同样的。需要注意顺序, 不过要注意<strong>比如是(birth_date, gender)</strong>, 虽然都是filtered: 100但是执行效率仍有区别<br>区别如下:</p><ul><li><code>(birth_date, gender)</code>: <code>key_len</code>为4, 即用到了两个键(gender是tiny,长度1，birth_date是日期,长度4)。<code>rows</code>为4788，Extra为<code>Using where; Using index for group-by</code></li><li><code>(gender, birth_date)</code>: <code>key_len</code>为1, 只用到了gender键。<code>rows</code>为149734，Extra为<code>Using index</code></li></ul><p>而对于一些无法优化的。如双向like操作，也可以通过联合索引来应用一部分索引增加部分速度（虽然只会应用一部分）<br>如<code>select count(1) from employees where gender = &#39;F&#39; and first_name like &#39;%a%&#39; and last_name like &#39;%b%&#39;;</code><br>可以增加联合索引实现索引下推功能:<br><code>alter table employees drop key gender, add key (gender, first_name, last_name);</code></p><h2 id="优化总结"><a href="#优化总结" class="headerlink" title="优化总结"></a>优化总结</h2><ul><li>每个索引都是一个BTree(MySQL一般是B+Tree)</li><li>什么时候加索引：搜索条件固定，数据分布不均(即需要全表搜索)</li><li>双向like是没法优化的</li><li>联合索引受顺序影响。而且如果最左索引是范围的话无法使用后面的</li><li>使用索引下推，可以减少从主键树上取数据的时间</li><li>大多数复杂情况or查询是无法优化的, 但是一些简单查询可以优化</li><li>尽量使用join查询而不是子查询，因为join查询能被优化而子查询不行</li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://github.com/datacharmer/test_db">一个简单的mysql测试库</a></li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/select-optimization.html">select优化官方文档</a></li><li><a href="https://blog.csdn.net/Debug_zhang/article/details/52168552">索引实现原理</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 小资源服务器使用经验总结</title>
      <link href="/posts/6769ba51/"/>
      <url>/posts/6769ba51/</url>
      
        <content type="html"><![CDATA[<h3 id="善用交换内存"><a href="#善用交换内存" class="headerlink" title="善用交换内存"></a>善用交换内存</h3><p>有些时候。作为个人用的服务器我们往往不会去购买一些性能很好的服务器。但是在某些情况下我们却要临时去使用一个比较高的内存去执行某个程序，但是我们当前服务器的资源却无法执行。因为linux为了防止自身系统崩溃，引入了一个OOM Killer机制。即当一个进程占用过多内存时，系统会直接kill掉这个进程并抛出Out of memory错误。<br>我们可以通过<code>grep &quot;Out of memory&quot; /var/log/messages</code>来查看相关日志。<br>这个时候我们就可以使用交换内存来用磁盘空间换内存了。</p><h5 id="第一步-创建一个空白文件"><a href="#第一步-创建一个空白文件" class="headerlink" title="第一步: 创建一个空白文件"></a>第一步: 创建一个空白文件</h5><p>切换到root权限</p><p>使用命令<code>dd if=/dev/zero of=/opt/swapfile bs=1M count=1024</code>来创建一个1GB的空白文件到<code>/opt/swapfile</code>。同样的可以按照这个方法创建其他大小的空白文件。我一般会创建和内存一样大小的交换空间</p><p>设置一下权限<code>chmod 600 /opt/swapfile</code></p><h5 id="第二步-创建交换空间"><a href="#第二步-创建交换空间" class="headerlink" title="第二步: 创建交换空间"></a>第二步: 创建交换空间</h5><p>使用命令<code>mkswap /opt/swapfile</code>来将这个空白文件变成一个swap文件。只有该文件才能将对应的磁盘空间作为一个临时内存。</p><h5 id="第三部-应用交换文件"><a href="#第三部-应用交换文件" class="headerlink" title="第三部: 应用交换文件"></a>第三部: 应用交换文件</h5><p>使用命令<code>swapon /opt/swapfile</code>将该交换空间应用到系统中。此时执行<code>free -h</code>可以看到swap一行多出了1GB空间</p><h3 id="交换空间应该设定多大？"><a href="#交换空间应该设定多大？" class="headerlink" title="交换空间应该设定多大？"></a>交换空间应该设定多大？</h3><table><thead><tr><th>实际内存</th><th>推荐交换空间</th><th>推荐交换空间(开启休眠模式)</th></tr></thead><tbody><tr><td>⩽ 2GB</td><td>2倍</td><td>3倍</td></tr><tr><td>2GB - 8GB</td><td>1倍</td><td>2倍</td></tr><tr><td>8GB - 64GB</td><td>至少4GB</td><td>1.5倍</td></tr><tr><td>&gt; 64GB</td><td>至少4GB</td><td>不推荐</td></tr></tbody></table><p>参考文章:</p><ul><li><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/installation_guide/s2-diskpartrecommend-ppc">redhat</a></li><li><a href="https://help.ubuntu.com/community/SwapFaq">ubuntu</a></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><code>swapoff -a</code> 移除所有的swap内存空间</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Swap </tag>
            
            <tag> OOM Killer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玩PUBG时运行VMware被禁止进入游戏的解决方案</title>
      <link href="/posts/f3750712/"/>
      <url>/posts/f3750712/</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>因为需要安装一些mysql之类的东西而不想在本机（主要用于娱乐）上安装这些东西。因此想到了在VMware上安装一个linux环境。然后当我完成了VMware的安装时。悲剧发生了。。我无法进行游戏</p><p>反外挂系统给我提出的警告是。<br>发现不允许应用程序VMware<br><img src="https://i.imgur.com/k9I6cHe.jpg"></p><h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h2><p>我看到上面的信息感觉很诧异。。因为BE在我打完了一局正在打第二局的时候把我踢出去了。看来BE的扫描是有个延时特性的。可能是为了防止电脑卡。那么这样的话。我关闭VMware不就好了？</p><p>结果是失败。。</p><p>一开始我还以为是BE的问题。然后经过一系列问题排查发现。是VMware会在后台不断得启动一系列VMware开头的后台进程。对用户来说没有什么影响，但是BE会检测到并禁止你进入游戏。而且就算在任务管理器中退出了进程他也会自动重启</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在window服务中将VMware的服务设为手动即可<br><img src="/images/misc/vmwareservice.png"></p><p>修改完毕后需要重启电脑后生效</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>作为代价。当使用VMware时会出现网络异常。只需要在用的时候手动找到服务将其打开即可（就是麻烦了一点）</p>]]></content>
      
      
      
        <tags>
            
            <tag> pubg </tag>
            
            <tag> vmware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TRPG Engine开发手册——数据库框架迁移</title>
      <link href="/posts/74202a7b/"/>
      <url>/posts/74202a7b/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要迁移"><a href="#为什么要迁移" class="headerlink" title="为什么要迁移"></a>为什么要迁移</h2><p>TRPG Engine一开始设计是基于<a href="https://github.com/dresende/node-orm2">node-orm</a>设计的数据库框架，对于一个后台系统来说。更换数据库框架是一件非常需要勇气的事情，其代价相当于项目重构。但是经过长时间的考虑，我还是决定将数据库框架从<a href="https://github.com/dresende/node-orm2">node-orm</a>迁移到<a href="https://github.com/sequelize/sequelize">sequelize</a></p><p>迁移的理由:</p><ul><li><code>sequelize</code>具有更加规范化的文档，便于学习</li><li><code>sequelize</code>天生支持<code>Promise</code>，而<code>node-orm</code>4版本以后虽然也支持<code>Promise</code>但是因为原函数为回调形式因此若要使用<code>find</code>的<code>Promise</code>版本需要使用<code>findAsync</code></li><li><code>sequelize</code>对连接池的支持更加好，并能很大程度上减少数据库连接释放的问题。</li><li><code>sequelize</code>天生支持事务，但<code>node-orm</code>需要第三方插件。</li><li><code>sequelize</code>天生继承了一些中大型后台项目需要的一些特性如<code>timestamp</code>, <code>migrations</code>。而<code>node-orm</code>只有第三方开发者提供的插件，并没有官方支持。</li><li><code>node-orm</code>是一个很老的项目了，开发者的维护已经不在提供维护了，对于一些问题可能没法得到很好地解决。而<code>sequelize</code>的开发社区依旧非常活跃</li><li><code>sequelize</code>的star数是所有node的orm框架中最高，同类的orm还有<a href="https://github.com/bookshelf/bookshelf">bookshelf</a>, <a href="https://github.com/coresmart/persistencejs">persistencejs</a></li></ul><h2 id="迁移手册"><a href="#迁移手册" class="headerlink" title="迁移手册"></a>迁移手册</h2><h3 id="注册方式"><a href="#注册方式" class="headerlink" title="注册方式"></a>注册方式</h3><p>注册模型的方式还是使用原先的设计。通过传输一个orm对象与一个db对象来将定义的模型注册到数据库实例中。不同的是需要修改模型字段的类型定义。</p><h3 id="连接方式"><a href="#连接方式" class="headerlink" title="连接方式"></a>连接方式</h3><p>首先<code>sequelize</code>是没有connect的概念的。它不像<code>node-orm</code>一样是需要在访问前先连接连接池。而是直接在操作连接实例上注册后操作数据库model即可。因此需要变更的部分为:</p><ul><li>去除所有的connect方法</li><li>调整model的注册方式</li><li>直接返回给各个event app.storage.db， 而不是创建连接后的值。</li></ul><h3 id="关联方式"><a href="#关联方式" class="headerlink" title="关联方式"></a>关联方式</h3><p><code>sequelize</code>框架和<code>node-orm</code>一样有一对一、一对多、多对多的关联关系<br>但是<code>node-orm</code>将其设定为两个接口，即hasOne和hasMany。其中hasOne同时可以是一对一关系和一对多关系<br>迁移到<code>sequelize</code>时需要手动改写相对的关系，这一点无法借助重写方法的实现，因为<code>sequelize</code>同样有hasOne和hasMany接口且其意义不同。因此为了防止二义性，应当手动改写其方法。</p><h3 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h3><p><code>sequelize</code>框架定义的hooks参数是(instance, options)。而<code>node-orm</code>则是(next)。给this设定了当前实例。这是由于两者的设计思路决定的。为了防止二义性应当手动修改hooks的定义</p><h3 id="数据库模型实例方法"><a href="#数据库模型实例方法" class="headerlink" title="数据库模型实例方法"></a>数据库模型实例方法</h3><p>在<code>node-orm</code>中模型的实例方法是在定义时的第二个参数中传入一个methods中的对象实现的，而<code>sequelize</code>是通过注册到模型对象的原型链<code>prototype</code>中实现。因此可以进行一个别名操作，即在注册数据库对象时重新定义define方法。将第二个参数的method提取出来并进行统一赋值。</p>]]></content>
      
      
      
        <tags>
            
            <tag> sequelizejs </tag>
            
            <tag> node-orm </tag>
            
            <tag> TRPG </tag>
            
            <tag> 后台 </tag>
            
            <tag> node </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zsh插件推荐</title>
      <link href="/posts/c2b55725/"/>
      <url>/posts/c2b55725/</url>
      
        <content type="html"><![CDATA[<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>需要已安装<code>zsh</code>和<code>oh-my-zsh</code>。如果没有安装请自行查找安装文档<br><a href="https://ohmyz.sh/">oh-my-zsh官方文档</a>  </p><h4 id="快速安装指令"><a href="#快速安装指令" class="headerlink" title="快速安装指令"></a>快速安装指令</h4><ul><li>通过curl: <code>$ sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</code></li><li>通过wget: <code>$ sh -c &quot;$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</code></li></ul><h2 id="优化显示"><a href="#优化显示" class="headerlink" title="优化显示"></a>优化显示</h2><ul><li><a href="https://github.com/zsh-users/zsh-syntax-highlighting"><strong>zsh-syntax-highlighting</strong></a> 输入可执行的程序与错误的命令会进行语法高亮提示<blockquote><p>git clone <a href="https://github.com/zsh-users/zsh-syntax-highlighting.git">https://github.com/zsh-users/zsh-syntax-highlighting.git</a> ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting</p></blockquote></li></ul><h2 id="效率提升"><a href="#效率提升" class="headerlink" title="效率提升"></a>效率提升</h2><ul><li><a href="https://github.com/zsh-users/zsh-autosuggestions"><strong>zsh-autosuggestions</strong></a> 命令自动补全<blockquote><p>git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</p></blockquote></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ohmyzsh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git使用方法简明教程 - 团队篇</title>
      <link href="/posts/87b6010f/"/>
      <url>/posts/87b6010f/</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>首先，如果你没有看过前文。我推荐你先看一下我的上一篇文章<a href="/posts/44a80e28/">git使用方法简明教程 - 个人篇</a>，这样你能对git这个程序员必用的软件能够有一定的了解。</p><h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><p>团队使用代码进行协作编程与个人使用不太一样。因为它一般来说是在多个分支上进行操作。这里涉及到一个<a href="#%E5%88%86%E6%94%AF">分支</a>(<code>branch</code>的概念，我稍后再讲)</p><p>一般来说一个团队的代码仓库至少会有2个以上的分支。有一个生产环境的<code>master</code> <em>(或者release)</em> 分支,一个用于内部内部开发的<code>dev</code>分支。<br>有两种模式，一种是小团队的快速开发。多个人在同一个分支开发。通过不断地进行push和pull进行代码间的同步。另一种是以开发分支为基础。每个人分出一个自己的分支，完成开发后合并到主开发分支。这种情况可以根据实际需求选择一个人一个个人分支或者一个人开发一个任务就分出一个分支两种情况。</p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>分支，英文名branch。可以通过<code>git branch</code>命令查看本地的分支。<br>使用<code>git checkout [分支名]</code>的方式来切换不同分支。<br>我们在使用<code>git log</code>命令查看提交简述的时候也能看到分支所在位置。</p><p>分支分为本地分支和远程分支。远程分支是远程代码仓库在本地的映射。我们可以通过<code>git fetch</code>命令进行同步本地的远程分支。通过<code>git branch -r</code>命令可以查看所有的远程分支。<br>我们正常操作都是操作的本地分支。</p><p>通过<code>git checkout -b [新分支名]</code>就可以从当前位置创建一个新的分支。并且切换到新的分支上来。<br>在完成代码编辑的时候我们可以通过<code>git merge</code>命令进行分支的合并操作。<br>举例:<br>我有两个分支<code>master</code>和<code>dev</code>.分别是主分支和开发分支。我在开发分支上完成了一些代码的提交后。想要把dev分支的变更合并到主分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">$ git merge dev</span><br></pre></td></tr></table></figure><p>如果有<a href="#%E4%BB%A3%E7%A0%81%E5%86%B2%E7%AA%81">代码冲突</a>的情况我们需要解决冲突，然后使用<code>git commit</code>命令提交合并<br>如果在代码冲突的过程中想要中断代码合并的过程，使用<code>git merge --abort</code>命令</p><h2 id="代码冲突"><a href="#代码冲突" class="headerlink" title="代码冲突"></a>代码冲突</h2><p>代码冲突是多人协作时常见的问题，因为你没法保证在你进行编辑的时候其他的不会对代码进行修改。在大多数情况下git会自动处理代码变更。但如果两个开发者共同修改了同一处代码时。git无法自动处理。那么就需要开发者手动解决冲突。<br>当git出现无法处理的冲突时，它会告知你冲突的文件，并修改文件共同修改处的代码变更为:</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt;head</span><br><span class="line">这里是当前代码</span><br><span class="line">=======</span><br><span class="line">这里是远程代码</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;xxxxxxxxxx(发生冲突的hash值)</span><br></pre></td></tr></table></figure><p>当出现这种情况时，作为开发者你需要做的是仔细比较两边的代码，并把多余的东西删除。然后把所有的冲突全部解决完毕后，提交代码。</p><h2 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h2><p><strong>NOTE:rebase是一种破坏性的行为, 请尽量不要在公共分支上进行操作</strong></p><p>当我们在自己的分支提交了一系列代码后，需要把完成的功能提交到公共开发分支，那么我们要做的第一步是先把公共分支的代码同步到我们自己的分支。简单的，我们当然可以使用<code>git merge</code>命令。但是，这样会留下一个git生成的merge commit点，而这个commit是无意义的。对于code review(代码审查)来说是一个比较影响的东西。当然了，merge commit 点的好处是所有的操作都是线性的。在进行合并个人分支到公共分支的过程中最好使用merge，而把公共分支同步到个人分支的时候，我建议使用<code>git rebase</code>, 他能让你看上去是从当前公共分支创建出来的个人分支进行往前编辑<br>rebase的原理是把往前一段距离的代码提交重新打开，然后重新提交一遍。因为是一种破坏性的行为，因此无法与远程服务器同步，需要使用<code>git push -f</code>命令强制覆盖远程分支。</p><p>举例:<br>我有一个个人开发的分支<code>moonrailgun</code>, 然后有一个开发分支<code>dev</code>。在经过一段时间的开发后，两个分支各向前跑了几个commit。现在我希望能够把我的<code>moonrailgun</code>合并到<code>dev</code>分支。为了保证冲突能现在我的个人分支解决，我需要先把<code>dev</code>的变更同步到<code>moonrailgun</code>分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当前在moonrailgun分支</span></span><br><span class="line">$ git rebase dev</span><br></pre></td></tr></table></figure><p>如果出现冲突。需要<a href="#%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81">解决冲突</a>,然后<code>git add</code>以后使用<code>git rebase --continue</code>命令继续操作。<br>如果想要中断rebase的过程，使用<code>git rebase --abort</code></p><p>然后你就能很方便的把moonrailgun分支合并到dev分支上了，并且代码的历史线会很干净。</p><p><em>P.S.</em>: 如果团队在分支上进行代码操作，那么常常会出现代码不同步的问题。那么为了保证代码分支线的干净。最好不要使用<code>git pull</code>命令(因为这会留下一个合并的commit点)。推荐的操作如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch</span><br><span class="line">$ git <span class="built_in">log</span> origin/master</span><br><span class="line"><span class="comment"># 查看最新的远程commit的hash值。复制下来</span></span><br><span class="line">$ git rebase &lt;<span class="built_in">hash</span>&gt;</span><br></pre></td></tr></table></figure><p>这样可以完美的处理单分支多用户进行代码提交。</p><h2 id="应用patch和使用patch"><a href="#应用patch和使用patch" class="headerlink" title="应用patch和使用patch"></a>应用patch和使用patch</h2><p>patch是一种线下通过文件传输同步变更的方式</p><p>基于历史原因, git有两套使用patch的方式</p><p>旧的:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git diff &gt; 1.patch <span class="comment"># 生成patch</span></span><br><span class="line">git apply --check 1.patch <span class="comment"># 检查patch是否可用，如果没有任何输出说明可以正常使用</span></span><br><span class="line">git apply 1.patch <span class="comment"># 应用patch</span></span><br></pre></td></tr></table></figure><p>新的:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git format-patch HEAD^ <span class="comment"># 等价于git format-patch -1</span></span><br><span class="line">git am &lt;patch file&gt;</span><br></pre></td></tr></table></figure><p>在一般情况下推荐使用新的方式，基于commit来控制。但是如果出现特殊情况，比如未提交的代码想要交换的话，可以考虑使用旧的patch方式。</p><p>这也是为什么git没有把旧方式移除的原因</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记</title>
      <link href="/posts/71513ccb/"/>
      <url>/posts/71513ccb/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本章内容主要记录一些在Vue开发过程中比较实用的一些工具，写法之类的东西</p><p>本章内容可能会不断、不定期的进行更新。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>好用的UI框架: <a href="https://github.com/ElemeFE/element">elementUI</a></p><h2 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h2><p>根据字符串动态生成不同组件:<a href="https://cn.vuejs.org/v2/api/#is">is属性</a><br>通过<a href="https://cn.vuejs.org/v2/api/#is">is属性</a>我们可以做一些比较特殊的定制化操作。比如我们可能定义一系列的控件，然后根据后台返回的表单对象自由组合成对应的表单。</p><h2 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h2><p>除了常见的Vuex以外。<code>Vue+RxJS+VueRx</code> 这套技术栈也是一个不错的选择</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何实现方法既能实现函数式编程又能获取结果进行比较——实现形如add(1)(2)(3)...(n)的方法</title>
      <link href="/posts/84bdf0ad/"/>
      <url>/posts/84bdf0ad/</url>
      
        <content type="html"><![CDATA[<p>面试的时候面试官出了一道题目很有意思。问的是这样的。假如我有一个方法add。如何实现形如<code>add(1)(2)</code>调用返回<code>3</code><br>这道题答案很简单，如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但我当时第一时间的反应是这样的: 如何实现形如<code>add(1)(2)(3)...(n)</code>这样的链式调用。<br>首先这个问题有两个难点:</p><ul><li>1.如何解决累加结果的存储问题</li><li>2.如何解决他返回的方法可以作为结果来使用</li></ul><p>首先这第一个问题是好解决的。只需要在内部存储计数器即可。而第二个问题是无法完全解决的。因为如果要实现链式调用那么返回必须是函数。而函数的<code>typeof</code>值是<code>function</code>, 永远不能作为一个<code>number</code>使用。但是如果放宽限制。我们可以用过重写方法的<code>toString</code>函数来实现对一些隐式调用转换为字符串的匹配。<br>代码如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  sum += x;</span><br><span class="line">  <span class="keyword">return</span> add;</span><br><span class="line">&#125;</span><br><span class="line">add.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> result); <span class="comment">// 返回function</span></span><br><span class="line"><span class="built_in">console</span>.log(result + <span class="string">&#x27;&#x27;</span>); <span class="comment">// 返回6</span></span><br><span class="line"><span class="built_in">console</span>.log(result == <span class="number">6</span>); <span class="comment">// 返回true</span></span><br></pre></td></tr></table></figure><p>当然，这里有个问题。就是封装性不好。会污染全局变量。那么我们把add方法做一下闭包处理进行优化一下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = x;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">tmp</span>(<span class="params">y</span>) </span>&#123;</span><br><span class="line">    sum += y;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  tmp.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> javascript </tag>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Firefox、safari的session无法匹配的原因</title>
      <link href="/posts/113e84a8/"/>
      <url>/posts/113e84a8/</url>
      
        <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>在测试服务器上出现一个这样奇怪的场景：在Firefox和Safari浏览器上出现session无法正确被识别，而Chrome浏览器能够正常被服务器识别session。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>服务端时间与客户端时间不匹配，客户端时间在服务端时间后并差距大于session过期时间(如session过期时间为30分钟, 那么客户端时间往后调30分钟以上或者服务端时间往前调30分钟以上都会出现这个问题)</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先我们看一下以下两张图:<br><img src="/images/common/firefox/001.png"><br>[图1]</p><p><img src="/images/common/firefox/002.png"><br>[图2]</p><p>其中图1是我在火狐浏览器发起的一次http请求的请求头，图2是我在chrome浏览器中发起的http请求的请求头<br>可以见当cookie过期的时候火狐浏览器发送的请求头中会自动过滤掉已经过期的cookie，而Chrome浏览器则不会。而我们知道服务端的session是根据浏览器发送的cookie进行匹配的。因此火狐浏览器当客户端时间与服务端时间差距过大的时候会出现session无法正常匹配的情况</p><p>同理，Safari也会过滤掉失效的cookie。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>暂时没有比较好的解决方案，只能确保服务端的时间是正常的即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> firefox </tag>
            
            <tag> safari </tag>
            
            <tag> session </tag>
            
            <tag> cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx使用笔记</title>
      <link href="/posts/5d639031/"/>
      <url>/posts/5d639031/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>主要记录一些使用nginx的一些特殊的技巧。常用的不会记录在内</p><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><h3 id="使用rewrite重定向时保留referer网站来源"><a href="#使用rewrite重定向时保留referer网站来源" class="headerlink" title="使用rewrite重定向时保留referer网站来源"></a>使用rewrite重定向时保留referer网站来源</h3><p>首先我们要知道referer是浏览器主动发起时带入的。跟服务端无关。而浏览器在进行rewrite重定向时并不会带入referer，而目前没有成熟的解决方案。这里记录一个骚操作: 通过cookie来进行同域之间的referer传递</p><p>比如我有一个页面<code>www.moonrailgun.com</code>,我想检测当用户是手机端访问时跳转到<code>m.moonrailgun.com</code><br>那么要这么做:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在www.moonrailgun.com把referer数据写入cookie:</span></span><br><span class="line">add_header Set-Cookie <span class="string">&quot;referer=<span class="variable">$http_referer</span>;Domain=moonrailgun.com&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#在m.moonrailgun.com把referer数据根据cookie信息重新构造出来:</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$http_cookie</span> ~* <span class="string">&quot;referer=(.+?)(?=;|$)&quot;</span>) &#123;</span><br><span class="line">  <span class="built_in">set</span> <span class="variable">$referer_cookie</span> <span class="variable">$1</span>;</span><br><span class="line">&#125;</span><br><span class="line">proxy_set_header Referer <span class="variable">$referer_cookie</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ReactNative踩坑记录与学习笔记</title>
      <link href="/posts/33f59699/"/>
      <url>/posts/33f59699/</url>
      
        <content type="html"><![CDATA[<h2 id="原生交互"><a href="#原生交互" class="headerlink" title="原生交互"></a>原生交互</h2><ul><li>在iOS9之后，网络请求默认为Https请求，如需支持Http，修改info.plist文件添加键值对设置允许http访问<br><img src="/images/react/001.png" alt="/images/react/001.png"></li><li>编译后抛出错误<code>$export is not a function</code>,原因: react-native 无法正常使用babel的runtime-transform插件,原因不明</li><li>react-native安卓端允许的最大长计时器时间为60000ms,而socket.io默认ping计时器为85000ms.为了解决这个警告你需要在服务端设置<code>pingInterval(默认25000)</code>和<code>pingTimeout(默认60000)</code>使两者之和小于等于60000ms</li></ul><h2 id="路由react-navigation"><a href="#路由react-navigation" class="headerlink" title="路由react-navigation"></a>路由react-navigation</h2><p><a href="https://github.com/react-navigation/react-navigation">Github</a></p><ul><li>路由插件解析需要依赖<code>babel-preset-react-native</code>插件:确保<code>.babelrc</code>文件中有<code>&quot;presets&quot;: [&quot;react-native&quot;]</code>。否则会抛出语法错误</li><li>当使用<code>redux</code>嵌套多个<code>Navigator</code>的时候。如果外面是一个<code>StackNavigator</code>然后子路由是一个<code>DrawerNavigator</code>或<code>TabNavigator</code>会抛出异常<code>Cannot read property &#39;undefined&#39; of undefined</code>。解决方案:<a href="https://github.com/react-navigation/react-navigation/issues/1919#issuecomment-313060644">react-navigation#issues#1919</a></li></ul><h2 id="FlatList"><a href="#FlatList" class="headerlink" title="FlatList"></a>FlatList</h2><p>不要把Array.reverse()和inverted一起使用! 更新时会有问题! 选一个即可</p><h2 id="编译打包"><a href="#编译打包" class="headerlink" title="编译打包"></a>编译打包</h2><p>安卓: <code>cd android &amp;&amp; ./gradlew assembleRelease</code></p><ul><li>当使用64位linux系统打包时抛出找不到<code>aapt</code>, 如果该路径下有aapt文件的话那么则是64位系统的问题。apktool需要32位编译环境。安装<code>ia32-libs</code>即可解决问题，如为centos则使用命令<code>yum install libstdc++.i686 glibc.i686 zlib.i686</code></li><li>如出现<code>:app:bundleReleaseJsAndAssets</code> 错误。可能是由于系统配置过低导致的编译文件超时的问题。解决方案是手动编译js文件后再打包(使用<code>-x &quot;:app:bundleReleaseJsAndAssets&quot;</code>参数跳过)<blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p android/app/build/intermediates/assets/release</span><br><span class="line">mkdir -p android/app/build/intermediates/res/merged</span><br><span class="line">node node_modules/react-native/local-cli/cli.js bundle --platform android --dev <span class="literal">false</span> --reset-cache --entry-file src/app/index.js --bundle-output android/app/build/intermediates/assets/release/index.android.bundle --assets-dest android/app/build/intermediates/res/merged/release</span><br></pre></td></tr></table></figure></blockquote></li></ul><h2 id="测试环境使用独立包名-Android"><a href="#测试环境使用独立包名-Android" class="headerlink" title="测试环境使用独立包名(Android)"></a>测试环境使用独立包名(Android)</h2><p><em>android/app/build.gradle</em></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">android</span> &#123;</span><br><span class="line">  <span class="section">buildTypes</span> &#123;</span><br><span class="line">    <span class="section">debug</span> &#123;</span><br><span class="line">      <span class="attribute">applicationIdSuffix</span> <span class="string">&quot;.test&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即在debug模式下。为包名增加后缀<code>.test</code>。</p><h2 id="在gradle-properties中保存敏感信息"><a href="#在gradle-properties中保存敏感信息" class="headerlink" title="在gradle.properties中保存敏感信息"></a>在gradle.properties中保存敏感信息</h2><p>因为<code>gradle.properties</code>可能会同时存在项目需要的信息与敏感信息。为了不把敏感数据上传到版本控制仓库，可以考虑使用git的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git update-index --assume-unchanged android/gradle.properties</span><br></pre></td></tr></table></figure><p>使用方式是先提交需要上传的部分，然后执行上述命令即可</p><p>撤销标识</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git update-index --no-assume-unchanged android/gradle.properties</span><br></pre></td></tr></table></figure><h2 id="升级到新版本"><a href="#升级到新版本" class="headerlink" title="升级到新版本"></a>升级到新版本</h2><h4 id="使用自动迁移脚本"><a href="#使用自动迁移脚本" class="headerlink" title="使用自动迁移脚本"></a>使用自动迁移脚本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx react-native upgrade [version]</span><br></pre></td></tr></table></figure><h4 id="手动迁移"><a href="#手动迁移" class="headerlink" title="手动迁移"></a>手动迁移</h4><p>查看迁移网站<a href="https://react-native-community.github.io/upgrade-helper/">https://react-native-community.github.io/upgrade-helper/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> ReactNative </tag>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令记录</title>
      <link href="/posts/30a497b6/"/>
      <url>/posts/30a497b6/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>主要是为了记录一下linux使用过程中常用的命令。方便日后检索</p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li><code>ctrl+z</code> 将当前任务暂停，回到终端页面。可以使用<code>fg</code>回到任务或使用<code>bg</code>将当前任务挂到后台</li></ul><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li><code>cp from to</code> 复制</li><li><code>mv from to</code> 移动</li><li><code>rm file</code> 删除</li><li><code>cat file</code> 输出文件</li><li><code>pwd</code> 输出当前工作空间</li><li><code>who</code> 当前登录所有用户</li><li><code>whoami</code> 当前登录用户名</li><li><code>wget url</code> 下载文件</li><li><code>curl url</code> 发送请求</li><li><code>free -h</code> 查看系统内存</li><li><code>df -h</code> 查看硬盘空间</li><li><code>du -h ./</code> 查看文件占用</li><li><code>tail -f</code> 持续跟踪文件</li><li><code>uname -a</code> 查看系统信息</li><li><code>netstat -tulpn</code> 查看系统网络情况</li><li><code>lsof -i:80</code> 查看系统端口监听</li><li><code>grep -r &quot;str&quot; ./</code> 在文件中查找字符串</li><li><code>find ./ -name filename</code> 在路径下根据文件名查找文件</li><li><code>top</code> 任务管理器</li><li><code>uptime</code> 启动时间，登录用户数，系统资源占用率</li><li><code>kill -9 pid</code> 杀死进程</li><li><code>ps aux | grep name</code> 查看某进程情况</li><li><code>nohup command &amp;</code> 后台运行某命令</li><li><code>scp [[user@]host1:]file1 [[user@]host2:]file2</code> ssh cp</li><li><code>su username</code> 切换用户</li></ul><h2 id="有用但不常用命令"><a href="#有用但不常用命令" class="headerlink" title="有用但不常用命令"></a>有用但不常用命令</h2><ul><li><code>mount --bind test1 test2</code> 挂载文件</li><li><code>tree</code> 生成文件结构</li><li><code>history</code> 查看用户历史命令</li><li><code>last</code> 查看用户登录记录</li><li><code>lastb</code> 查看用户登录失败记录</li><li><code>dmesg</code> 查看系统诊断日志</li><li><code>dd if=/dev/zero of=/root/swapfile bs=1M count=1024</code> 创建一个1024*1M大小的文件。位置为of,内容为if</li><li><code>mkswap /root/swapfile</code> 创建交换空间</li><li><code>swapon /root/swapfile</code> 开启交换空间</li></ul><h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><ul><li><code>tar -cvf jpg.tar *.jpg</code> 将目录里所有jpg文件打包成tar.jpg</li><li><code>tar -czf jpg.tar.gz *.jpg</code> 将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz</li><li><code>tar -cjf jpg.tar.bz2 *.jpg</code> 将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2</li><li><code>tar -cZf jpg.tar.Z *.jpg</code> 将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z</li><li><code>rar a jpg.rar *.jpg</code> rar格式的压缩，需要先下载rar for linux</li><li><code>zip jpg.zip *.jpg</code> zip格式的压缩，需要先下载zip for linux</li></ul><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><ul><li><code>tar -xvf file.tar</code> 解压 tar包</li><li><code>tar -zxvf file.tar.gz</code> 解压tar.gz</li><li><code>tar -jxvf file.tar.bz2</code> 解压 tar.bz2</li><li><code>tar -Zxvf file.tar.Z</code> 解压tar.Z</li><li><code>unrar e file.rar</code> 解压rar</li><li><code>unzip file.zip</code> 解压zip</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信开发踩过的坑</title>
      <link href="/posts/1555da82/"/>
      <url>/posts/1555da82/</url>
      
        <content type="html"><![CDATA[<h2 id="JSSDK"><a href="#JSSDK" class="headerlink" title="JSSDK"></a>JSSDK</h2><ul><li>微信使用方法<code>wx.config</code>时需要输入appid, 否则会直接抛出config:fail而不会有具体的错误提示。如果你的应用的appid来源比较复杂的话有必要检查一下appid</li><li>微信在分享时如果<code>link</code>参数非法, 则会出现debug内容一切 <strong>正常</strong> 但是无法正常进行分享内容自定义。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> weixin </tag>
            
            <tag> 微信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux服务安全——记一次网络攻击</title>
      <link href="/posts/61069dee/"/>
      <url>/posts/61069dee/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>使用linode服务器第二天就经历一次网络攻击，对方通过暴力破解root账号成功攻陷了我密码强度相对较低的服务器并通过我的服务器向外发起DDOS攻击导致在2小时间流失上行流量500G。造成了相当的损失</p><h2 id="日志查询"><a href="#日志查询" class="headerlink" title="日志查询"></a>日志查询</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># lastb</span></span><br></pre></td></tr></table></figure><p><code>lastb</code>命令查询试图通过SSH访问服务器密码失败的记录。可以查询到有来自印度，韩国与一个不知名国家的ip的重复尝试请求，由于访问次数多、频率高，可以看出是通过脚本来实现暴力破解的行为</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># last</span></span><br></pre></td></tr></table></figure><p><code>last</code> 查询登录记录，在登录记录中查看到在事发时间没有任何登录请求。可能原因有二：</p><ul><li>对方在拿到root权限账号后清除了自己的登录记录</li><li>对方在之前就拿到了root权限并留下了木马之类的后门，在事发时间通过服务端口远程访问</li></ul><p>同时可以通过查看<code>/var/log/secure</code>日志文件查询用户登录记录</p><h2 id="安全策略"><a href="#安全策略" class="headerlink" title="安全策略"></a>安全策略</h2><p><a href="https://www.linode.com/docs/security/securing-your-server/">https://www.linode.com/docs/security/securing-your-server/</a><br><a href="https://www.cnblogs.com/alimac/p/5848372.html">https://www.cnblogs.com/alimac/p/5848372.html</a></p><h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 查看当前网络服务</span></span><br><span class="line">sudo netstat -tulpn</span><br><span class="line"></span><br><span class="line"><span class="meta"># 重启sshd</span></span><br><span class="line">sudo service sshd restart</span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul><li>yum update</li><li>增加第二管理员账号</li><li>增加第二管理员sudo权限</li><li>禁止root用户直接通过ssh登录</li><li>关闭密码登录，使用秘钥对登录</li><li>配置iptables(可选)</li></ul><h3 id="ssh文件权限"><a href="#ssh文件权限" class="headerlink" title=".ssh文件权限"></a>.ssh文件权限</h3><ul><li><code>700</code> .ssh</li><li><code>600</code> authorized_keys</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记</title>
      <link href="/posts/743c31e9/"/>
      <url>/posts/743c31e9/</url>
      
        <content type="html"><![CDATA[<h2 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h2><p><code>flask</code>是一个轻量级的web框架。</p><h2 id="PIL-相关内容"><a href="#PIL-相关内容" class="headerlink" title="PIL 相关内容"></a>PIL 相关内容</h2><ul><li><p><strong>混合半透明图片与半透明图片时会出现中空透明项目的问题</strong></p><p><code>im</code> 与 <code>layer</code> 为两张半透明图，如下图所示:<br><img src="/images/img1.png"><br><em>im(100x100)</em><br><img src="/images/img2.png"><br><em>layer(100x100)</em>  </p><p>执行:</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">im.paste(<span class="symbol">layer</span>, mask=<span class="symbol">layer</span>)</span><br></pre></td></tr></table></figure><p>返回<br><img src="/images/after1.png"></p><p>会发现里面有透明像素，而不是我们想要的<code>layer</code>叠加到<code>im</code>上的效果<br>这是因为layer本身拥有一个渐变的alpha通道，通过<code>mask</code>指定的alpha通道蒙版会在<code>im</code>抠出一个渐变的圆形。然后再把拥有渐变效果的<code>layer</code>叠加到<code>im</code>上。<br>这就相当于在两个地方处理了两次透明处理。解决方法很简单，就是在粘贴<code>layer</code>的时候丢弃掉它的alpha通道即可</p><p>返回<br><img src="/images/after2.png"></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端编写全栈应用技术选型——rn、weex、apicloud到底选哪个</title>
      <link href="/posts/481f2de4/"/>
      <url>/posts/481f2de4/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要是经过部分调研，几种技术栈的初步调研与入门使用。以及部分网络资料的整理下得出的带有一部分主观判断的结论，并因互联网发展迅速的关系可能会有一定的时效性，因此在阅读本文的时候请读者酌情根据当前情况进行自己的思考与结论。</p><h2 id="关于Apicloud"><a href="#关于Apicloud" class="headerlink" title="关于Apicloud"></a>关于Apicloud</h2><p><a href="http://www.apicloud.com/">apicloud</a>是国内一家闭源的html5移动端app解决方案提供商。用纯html的方式生成页面并通过原生注入jsbridge来与js进行交互。处理原生事件与页面切换。对于开发人员来说，是纯html+一个api事件。无需接触到任何底层，并如果有特殊需求可以自行开发原生应用模块来进行拓展。<br>因为闭源的关系，国内社区并不是很火。因此名气不是很大。<br>类似产品有<a href="http://www.appcan.cn/">AppCan</a>、<a href="http://www.dcloud.io/">Dcloud</a>、<a href="http://www.wex5.com/wex5/">WeX5</a></p><h2 id="技术比较"><a href="#技术比较" class="headerlink" title="技术比较"></a>技术比较</h2><p>首先是一个对比表来区别几种技术栈。</p><table><thead><tr><th align="center">技术特点</th><th align="center">Native</th><th align="center">ReactNative</th><th align="center">Weex</th><th align="center">Apicloud</th></tr></thead><tbody><tr><td align="center">学习成本</td><td align="center">高</td><td align="center">中</td><td align="center">中</td><td align="center"><strong>低</strong></td></tr><tr><td align="center">开发成本</td><td align="center">高</td><td align="center">中</td><td align="center"><strong>低</strong></td><td align="center"><strong>低</strong></td></tr><tr><td align="center">调试难度</td><td align="center">难</td><td align="center">难</td><td align="center"><strong>简单</strong></td><td align="center">中</td></tr><tr><td align="center">控制台输出</td><td align="center"><strong>支持</strong></td><td align="center"><strong>支持</strong></td><td align="center"><strong>支持</strong></td><td align="center">不支持</td></tr><tr><td align="center">断点调试</td><td align="center"><strong>支持</strong></td><td align="center"><strong>支持</strong></td><td align="center"><strong>支持</strong></td><td align="center">不支持</td></tr><tr><td align="center">开发工具</td><td align="center"><strong>官方提供IDE</strong></td><td align="center">官方提供终端</td><td align="center">官方提供终端</td><td align="center"><strong>官方提供IDE</strong></td></tr><tr><td align="center">模拟器/真机</td><td align="center">必须</td><td align="center">必须</td><td align="center"><strong>非必须</strong></td><td align="center">必须</td></tr><tr><td align="center">开发硬件需求(ios)</td><td align="center">Mac</td><td align="center">Mac</td><td align="center"><strong>无</strong></td><td align="center"><strong>无</strong></td></tr><tr><td align="center">应用硬件需求(ios)</td><td align="center"><strong>All</strong></td><td align="center">Android 4.1 (API 16), iOS 8.0+</td><td align="center">Android 4.1 (API 16), iOS 8.0+ and WebKit 534.30+</td><td align="center"><em>(未找到)</em></td></tr><tr><td align="center">可拓展性</td><td align="center"><strong>高</strong></td><td align="center">中</td><td align="center">中</td><td align="center">低</td></tr><tr><td align="center">优化难度</td><td align="center"><strong>低</strong></td><td align="center">中</td><td align="center">中</td><td align="center">高</td></tr><tr><td align="center">渲染流畅</td><td align="center"><strong>高</strong></td><td align="center"><strong>高</strong></td><td align="center"><strong>高</strong></td><td align="center">中</td></tr><tr><td align="center">渲染方式</td><td align="center"><strong>原生图形库</strong></td><td align="center">Virtual DOM</td><td align="center">Virtual DOM</td><td align="center">Webview</td></tr><tr><td align="center">布局方式</td><td align="center">XML</td><td align="center">React</td><td align="center">Vue</td><td align="center"><strong>Html</strong></td></tr><tr><td align="center">样式写法</td><td align="center">属性</td><td align="center">基于css的对象</td><td align="center">阉割版css</td><td align="center"><strong>原生css</strong></td></tr><tr><td align="center">代码结构</td><td align="center"><strong>基于类</strong></td><td align="center"><strong>基于类</strong></td><td align="center"><strong>基于类</strong></td><td align="center">基于Page</td></tr><tr><td align="center">代码架构</td><td align="center">MVC</td><td align="center"><strong>MVVM</strong></td><td align="center"><strong>MVVM</strong></td><td align="center">无</td></tr><tr><td align="center">技术栈</td><td align="center">JAVA+Android SDK;<br>OC/Swift + cocoa</td><td align="center">React+ReactNative</td><td align="center">Vue+Weex</td><td align="center"><strong>Html+Apicloud api</strong></td></tr><tr><td align="center">社区活跃度</td><td align="center"><strong>活跃</strong></td><td align="center"><strong>活跃</strong></td><td align="center">一般</td><td align="center">不活跃</td></tr><tr><td align="center">开源闭源</td><td align="center">开源(安卓,核心代码闭源);<br>闭源(ios)</td><td align="center">开源</td><td align="center">开源</td><td align="center">闭源</td></tr><tr><td align="center">开源协议</td><td align="center">Apache(安卓)</td><td align="center"><a href="https://github.com/facebook/react-native/blob/master/LICENSE">BSD</a></td><td align="center"><a href="https://github.com/apache/incubator-weex/blob/master/LICENSE">Apache</a></td><td align="center">/</td></tr><tr><td align="center">支持公司</td><td align="center"><strong>谷歌苹果</strong></td><td align="center"><strong>Facebook</strong></td><td align="center"><strong>阿里巴巴</strong></td><td align="center">活了3年的小公司</td></tr><tr><td align="center">坑量</td><td align="center"><strong>少</strong></td><td align="center">多</td><td align="center">多</td><td align="center"><strong>少</strong></td></tr><tr><td align="center">遇坑概率</td><td align="center"><strong>小</strong></td><td align="center">大</td><td align="center">大</td><td align="center"><strong>小</strong></td></tr><tr><td align="center">专业著作</td><td align="center">《Android从入门到翻墙》;<br>《IOS从买Mac到装Windows》</td><td align="center">《ReactNative从入坑到弃坑》</td><td align="center">《Weex从信任到骂KPI》</td><td align="center">无</td></tr></tbody></table><p>以上大概是我个人总结出来的各个技术栈的区别。</p><h2 id="关于KPI"><a href="#关于KPI" class="headerlink" title="关于KPI"></a>关于KPI</h2><p>为什么要在这里提一下KPI呢。就不得不说一说阿里传统。阿里的工资水平是基于 <em>关键绩效指标</em> 来进行升迁评估。因此为了个人、小组的工资待遇，必须要给上级做出点成绩来。也就是说要考虑到阿里的项目是不是基于这个原则来开源的项目。<br>(PS: 据网络流传阿里内部自己都不用weex)<br>这就是为什么业内普遍对weex很冷淡，而weex本身也没有花太多力气去推广。</p><h2 id="关于技术选择"><a href="#关于技术选择" class="headerlink" title="关于技术选择"></a>关于技术选择</h2><p>为什么说是技术选择呢？因为技术不是产品，技术是一种创新的态度。产品，要求的是稳，快。而技术，要的是新。如果是考虑技术的话。我会选择ReactNative 或者 Weex。这两者都是基于现代前端的MVVM架构诞生的以HTML技术编写原生应用的产品。它们不是用的手机端的html解释器与渲染引擎，而是以标签与嵌套描述原生组件的技术。因此它们的渲染效率可以直追原生应用。<br>但是，它们尚不是一个很成熟的技术，不像原生技术有多年沉淀，不像html有厚重的历史。它们作为前端最前沿的技术（应当还要算上<code>NativeScript</code>），它们还比较年轻，换种说法就是坑比较多。在网上找找，大部分文章都是ReactNative踩坑大全、Weex踩过的坑。不可否认它们能够做出比较成熟，渲染效率也不错的APP应用。但是如果是作为一个产品的话，我们不得不计算上使用这个技术所需要花费的时间成本。</p><h2 id="关于产品选择"><a href="#关于产品选择" class="headerlink" title="关于产品选择"></a>关于产品选择</h2><p>如果只是为了实现一个产品的话。那么我推荐使用<code>Apicloud</code>等以html渲染方式的技术。其内核是<code>cordova</code>，前身是<code>phonegap</code>，也是前段跨平台编写原生应用的老前辈了。技术也是已经达到了一个相对成熟的地步。因为野心不大，所以坑少。牺牲一部分不明显的渲染效率来换取稳定且成熟的实现方式，我认为是一种很明智的选择。举个最简单例子。一个页面，原生渲染需要消耗10ms,而cordova需要消耗50ms。其中渲染效率相差整整5倍，然而实际上用户并不能感受到这之间明显的差别。当然如果是需要比较复杂的动画效果的话，这个问题可能会被放大。(人眼辨别连续运动的物体只需要每秒24帧，但是却可以很明显的感觉到每秒60帧与每秒30帧的区别)<br>其问题还在于，对于喜欢折腾的技术人员来说，使用旧技术去做产品是一件很无趣的事情。如果是我自己的项目，我绝对不会去使用该类技术。因为真的很无聊。</p><h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><p>代码风格很重要，因为很明显的可以影响程序员的编写效率。一个好的框架可以极大程度上改变工作的进度。<br>这里截取一部分代码，来感受下各个技术栈之间的差异。  </p><p>React: <a href="https://github.com/fbsamples/f8app">F8App</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">&#x27;React&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> AppState = <span class="built_in">require</span>(<span class="string">&#x27;AppState&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> LoginScreen = <span class="built_in">require</span>(<span class="string">&#x27;./login/LoginScreen&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> PushNotificationsController = <span class="built_in">require</span>(<span class="string">&#x27;./PushNotificationsController&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> StyleSheet = <span class="built_in">require</span>(<span class="string">&#x27;StyleSheet&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> F8Navigator = <span class="built_in">require</span>(<span class="string">&#x27;F8Navigator&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> CodePush = <span class="built_in">require</span>(<span class="string">&#x27;react-native-code-push&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> View = <span class="built_in">require</span>(<span class="string">&#x27;View&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> StatusBar = <span class="built_in">require</span>(<span class="string">&#x27;StatusBar&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> &#123;</span><br><span class="line">  loadConfig,</span><br><span class="line">  loadMaps,</span><br><span class="line">  loadNotifications,</span><br><span class="line">  loadSessions,</span><br><span class="line">  loadFriendsSchedules,</span><br><span class="line">  loadSurveys,</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">&#x27;./actions&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> &#123; updateInstallation &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./actions/installation&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> &#123; connect &#125; = <span class="built_in">require</span>(<span class="string">&#x27;react-redux&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123; version &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./env.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> F8App = React.createClass(&#123;</span><br><span class="line">  componentDidMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    AppState.addEventListener(<span class="string">&#x27;change&#x27;</span>, <span class="built_in">this</span>.handleAppStateChange);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Make this list smaller, we basically download the whole internet</span></span><br><span class="line">    <span class="built_in">this</span>.props.dispatch(loadNotifications());</span><br><span class="line">    <span class="built_in">this</span>.props.dispatch(loadMaps());</span><br><span class="line">    <span class="built_in">this</span>.props.dispatch(loadConfig());</span><br><span class="line">    <span class="built_in">this</span>.props.dispatch(loadSessions());</span><br><span class="line">    <span class="built_in">this</span>.props.dispatch(loadFriendsSchedules());</span><br><span class="line">    <span class="built_in">this</span>.props.dispatch(loadSurveys());</span><br><span class="line"></span><br><span class="line">    updateInstallation(&#123;version&#125;);</span><br><span class="line">    CodePush.sync(&#123;<span class="attr">installMode</span>: CodePush.InstallMode.ON_NEXT_RESUME&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  componentWillUnmount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    AppState.removeEventListener(<span class="string">&#x27;change&#x27;</span>, <span class="built_in">this</span>.handleAppStateChange);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  handleAppStateChange: <span class="function"><span class="keyword">function</span>(<span class="params">appState</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (appState === <span class="string">&#x27;active&#x27;</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.props.dispatch(loadSessions());</span><br><span class="line">      <span class="built_in">this</span>.props.dispatch(loadNotifications());</span><br><span class="line">      <span class="built_in">this</span>.props.dispatch(loadSurveys());</span><br><span class="line">      CodePush.sync(&#123;<span class="attr">installMode</span>: CodePush.InstallMode.ON_NEXT_RESUME&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.props.isLoggedIn) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">LoginScreen</span> /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;StatusBar</span><br><span class="line">          translucent=&#123;<span class="literal">true</span>&#125;</span><br><span class="line">          backgroundColor=<span class="string">&quot;rgba(0, 0, 0, 0.2)&quot;</span></span><br><span class="line">          barStyle=<span class="string">&quot;light-content&quot;</span></span><br><span class="line">         /&gt;</span><br><span class="line">        &lt;F8Navigator /&gt;</span><br><span class="line">        &lt;PushNotificationsController /&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> styles = StyleSheet.create(&#123;</span><br><span class="line">  container: &#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">select</span>(<span class="params">store</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    isLoggedIn: store.user.isLoggedIn || store.user.hasSkippedLogin,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = connect(select)(F8App);</span><br></pre></td></tr></table></figure><p>React 应用是基于组件(或者说类)，其特点是不直接接触html代码，而是返回一个虚拟dom，根据虚拟dom来修改前端显示。其所有的组件(包括根容器)都是基于<code>React.Component</code>这个类进行实现的，开发者要做的都是复写他的方法(主要是<code>render</code>方法)</p><hr><p>Weex: <a href="https://github.com/zwwill/yanxuan-weex-demo">yanxuan-weex-demo</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span><br><span class="line">        &lt;text <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;tlt iconfont&quot;</span>&gt;&#123;&#123;title&#125;&#125; &amp;#xe74b;&lt;/text&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;box-item&quot;</span> v-<span class="keyword">for</span>=<span class="string">&quot;i in items&quot;</span> @click=<span class="string">&quot;jumpWeb(i.url)&quot;</span>&gt;</span><br><span class="line">                &lt;image <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;i-image&quot;</span> resize=<span class="string">&quot;cover&quot;</span> :src=<span class="string">&quot;i.bg&quot;</span>&gt;&lt;/image&gt;</span><br><span class="line">                &lt;text <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;i-name&quot;</span>&gt;&#123;&#123;i.name&#125;&#125;&lt;/text&gt;</span><br><span class="line">                &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;i-price&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;i-price-n&quot;</span>&gt;</span>&#123;&#123;i.price&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;i-price-t&quot;</span>&gt;</span>元起<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span>&lt;/div&gt;</span><br><span class="line">                &lt;text <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;i-state&quot;</span> v-<span class="keyword">if</span>=<span class="string">&quot;i.state&quot;</span>&gt;&#123;&#123;i.state&#125;&#125;&lt;/text&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .iconfont &#123;</span><br><span class="line">        font-family:iconfont;</span><br><span class="line">    &#125;</span><br><span class="line">    .wrapper&#123;</span><br><span class="line">        background-color: #fff;</span><br><span class="line">        padding-bottom: 6px;</span><br><span class="line">    &#125;</span><br><span class="line">    .tlt&#123;</span><br><span class="line">        text-align: center;</span><br><span class="line">        font-size: 30px;</span><br><span class="line">        margin-top: 30px;</span><br><span class="line">        margin-bottom: 26px;</span><br><span class="line">        color:#333;</span><br><span class="line">    &#125;</span><br><span class="line">    .box&#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        flex-direction: row;</span><br><span class="line">        flex-wrap: wrap;</span><br><span class="line">        justify-content: center;</span><br><span class="line">        width: 750px;</span><br><span class="line">    &#125;</span><br><span class="line">    .box-item&#123;</span><br><span class="line">        width: 350px;</span><br><span class="line">        height: 226px;</span><br><span class="line">        margin: 5px;</span><br><span class="line">        padding: 20px;</span><br><span class="line">        background-color: #efefef;</span><br><span class="line">    &#125;</span><br><span class="line">    .i-name&#123;</span><br><span class="line">        position: relative;</span><br><span class="line">        color:#333;</span><br><span class="line">        font-size: 28px;</span><br><span class="line">        width: 300px;</span><br><span class="line">    &#125;</span><br><span class="line">    .i-price&#123;</span><br><span class="line">        position: relative;</span><br><span class="line">        margin-top: 10px;</span><br><span class="line">        display: flex;</span><br><span class="line">        flex-direction: row;</span><br><span class="line">    &#125;</span><br><span class="line">    .i-price-n&#123;</span><br><span class="line">        color:#333;</span><br><span class="line">        font-size: 36px;</span><br><span class="line">    &#125;</span><br><span class="line">    .i-price-t&#123;</span><br><span class="line">        color:#333;</span><br><span class="line">        font-size: 24px;</span><br><span class="line">        margin-top: 12px;</span><br><span class="line">    &#125;</span><br><span class="line">    .i-state&#123;</span><br><span class="line">        position: relative;</span><br><span class="line">        font-size: 20px;</span><br><span class="line">        color:#b8a989;</span><br><span class="line">        width: 70px;</span><br><span class="line">        margin-top: 10px;</span><br><span class="line">        padding: 5px;</span><br><span class="line">        line-height: 20px;</span><br><span class="line">        text-align: center;</span><br><span class="line">        border-width: 1px;</span><br><span class="line">        border-color: #b8a989;</span><br><span class="line">        border-radius: 4px;</span><br><span class="line">    &#125;</span><br><span class="line">    .i-image&#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        top:<span class="number">0</span>;</span><br><span class="line">        left: <span class="number">0</span>;</span><br><span class="line">        width: 350px;</span><br><span class="line">        height: 226px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> navigator = weex.requireModule(<span class="string">&#x27;navigator&#x27;</span>)</span><br><span class="line">    <span class="keyword">import</span> util <span class="keyword">from</span> <span class="string">&#x27;../../src/assets/util&#x27;</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        props:[<span class="string">&quot;title&quot;</span>,<span class="string">&quot;items&quot;</span>],</span><br><span class="line">        data () &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            jumpWeb (_url) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!_url) <span class="keyword">return</span>;</span><br><span class="line">                <span class="keyword">const</span> url = <span class="built_in">this</span>.$getConfig().bundleUrl;</span><br><span class="line">                navigator.push(&#123;</span><br><span class="line">                    url: util.setBundleUrl(url, <span class="string">&#x27;page/web.js?weburl=&#x27;</span>+_url) ,</span><br><span class="line">                    animated: <span class="string">&quot;true&quot;</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>Weex2.x 是基于Vue作为前端驱动。一个vue文件是由<code>template</code>, <code>script</code>, <code>style</code>三个标签组成的。相比<code>React</code>更加趋近与网页端的写法。最后返回给解释器一个大对象，来对dom进行操作。当然我个人是不喜欢这种返回一个大对象的方式的。曾经也有一个类似操作一个大对象的前端工具叫<code>grunt</code>，然后被<code>gulp</code>取代了。。。</p><hr><p>Apicloud: <a href="https://github.com/moonrailgun/Answer">Answer</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">&quot;maximum-scale=1.0,minimum-scale=1.0,user-scalable=0,width=device-width,initial-scale=1.0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;format-detection&quot;</span> <span class="attr">content</span>=<span class="string">&quot;telephone=no,email=no,date=no,address=no&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../../css/api.css&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../../css/aui.css&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#userHeader</span> &#123;</span></span><br><span class="line">            text-align: center;</span><br><span class="line">            padding: 10px 0;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#FFFFFF</span>;</span></span><br><span class="line">            margin-bottom: 10px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#userHeader</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">            border-radius: 100%;</span><br><span class="line">            width: 120px;</span><br><span class="line">            height: 120px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#userHeader</span> <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line">            font-size: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#userButton</span> &#123;</span></span><br><span class="line">            display: -webkit-box;</span><br><span class="line">            padding-bottom: 10px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#userButton</span> <span class="selector-class">.aui-col-xs-6</span> &#123;</span></span><br><span class="line">            padding: 0 6px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#userButton</span> <span class="selector-class">.aui-col-xs-6</span> <span class="selector-class">.aui-btn</span> &#123;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">            line-height: 26px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#userInfo</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#FFFFFF</span>;</span></span><br><span class="line">            padding: 0 12px;</span><br><span class="line">            margin-bottom: 10px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#userInfo</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#e3e3e3</span>;</span></span><br><span class="line">            line-height: 56px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#userInfo</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;</span></span><br><span class="line">            border-bottom: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#userInfo</span> <span class="selector-tag">li</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line">            display: inline-block;</span><br><span class="line">            margin-right: 15px;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#8f8f94</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aui-content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;userHeader&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;info-head&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../../image/default_head.jpg&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;info-name&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;userInfo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;info-sex&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>学校<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;info-school&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>身份<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;info-role&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>简介<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;info-intro&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;li&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;div&gt;话题&lt;/div&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;span id=&quot;info-topic-num&quot;&gt;&amp;nbsp;&lt;/span&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;/li&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;li&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;div&gt;回复&lt;/div&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;span id=&quot;info-reply-num&quot;&gt;&amp;nbsp;&lt;/span&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;/li&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;userButton&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aui-col-xs-6&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aui-btn aui-btn-default&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;AddFriend();&quot;</span>&gt;</span>关注<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aui-col-xs-6&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aui-btn aui-btn-danger&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;SendMessage();&quot;</span>&gt;</span>发消息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../../script/api.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> userId;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> userName, headImgUrl;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> defaultHeadImg = <span class="string">&#x27;../../image/default_head.jpg&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    apiready = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $api.fixStatusBar($api.dom(<span class="string">&#x27;header&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> pageParam = api.pageParam;</span></span><br><span class="line">        userId = pageParam.userId;</span><br><span class="line">        UpdateUserInfo(userId);</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">UpdateUserInfo</span>(<span class="params">userId</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(!!userId)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> model = api.require(<span class="string">&#x27;model&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> query = api.require(<span class="string">&#x27;query&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            query.createQuery(<span class="function"><span class="keyword">function</span> (<span class="params">ret, err</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (ret &amp;&amp; ret.qid) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> queryId = ret.qid;</span></span><br><span class="line"><span class="javascript">                    query.whereEqual(&#123;<span class="attr">qid</span>: ret.qid, <span class="attr">column</span>: <span class="string">&#x27;id&#x27;</span>, <span class="attr">value</span>: userId&#125;);</span></span><br><span class="line"><span class="javascript">                    query.include(&#123;<span class="attr">qid</span>: ret.qid, <span class="attr">column</span>: <span class="string">&#x27;profile&#x27;</span>&#125;);</span></span><br><span class="line">                    model.findAll(&#123;</span><br><span class="line">                        class: &quot;user&quot;,</span><br><span class="line">                        qid: queryId</span><br><span class="line"><span class="javascript">                    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">ret, err</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span> (ret) &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> userInfo = ret[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> nickname = userName = userInfo.nickname;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> url = headImgUrl = userInfo.avatar ? userInfo.avatar.url : defaultHeadImg;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> profile = userInfo.profile || &#123;</span></span><br><span class="line"><span class="javascript">                                        role: <span class="string">&#x27;未知&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                                        school: <span class="string">&#x27;未知&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                                        intro: <span class="string">&#x27;这家伙很懒什么都没写&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                                        sex: <span class="string">&#x27;未知&#x27;</span></span></span><br><span class="line">                                    &#125;;</span><br><span class="line"><span class="javascript">                            $api.attr($api.byId(<span class="string">&#x27;info-head&#x27;</span>), <span class="string">&#x27;src&#x27;</span>, url);</span></span><br><span class="line"><span class="javascript">                            $api.html($api.byId(<span class="string">&#x27;info-name&#x27;</span>), nickname);</span></span><br><span class="line"><span class="javascript">                            $api.html($api.byId(<span class="string">&#x27;info-sex&#x27;</span>), profile.sex);</span></span><br><span class="line"><span class="javascript">                            $api.html($api.byId(<span class="string">&#x27;info-school&#x27;</span>), profile.school);</span></span><br><span class="line"><span class="javascript">                            $api.html($api.byId(<span class="string">&#x27;info-role&#x27;</span>), profile.school);</span></span><br><span class="line"><span class="javascript">                            $api.html($api.byId(<span class="string">&#x27;info-intro&#x27;</span>), profile.intro);</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">//添加好友</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">AddFriend</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> myUserInfo = $api.getStorage(<span class="string">&#x27;userInfo&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!!myUserInfo &amp;&amp; !!myUserInfo.userId &amp;&amp; !!userId) &#123;</span></span><br><span class="line">            api.showProgress(&#123;</span><br><span class="line"><span class="javascript">                style: <span class="string">&#x27;default&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                animationType: <span class="string">&#x27;fade&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                title: <span class="string">&#x27;努力加载中...&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                text: <span class="string">&#x27;先喝杯茶...&#x27;</span></span></span><br><span class="line">            &#125;);</span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> myUserId = myUserInfo.userId;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> model = api.require(<span class="string">&#x27;model&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> query = api.require(<span class="string">&#x27;query&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            query.createQuery(<span class="function"><span class="keyword">function</span> (<span class="params">ret, err</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (ret &amp;&amp; ret.qid) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> queryId = ret.qid;</span></span><br><span class="line"><span class="javascript">                    query.whereEqual(&#123;<span class="attr">qid</span>: queryId, <span class="attr">column</span>: <span class="string">&#x27;userId&#x27;</span>, <span class="attr">value</span>: myUserId&#125;);</span></span><br><span class="line">                    model.findAll(&#123;</span><br><span class="line">                        class: &quot;Friends&quot;,</span><br><span class="line">                        qid: queryId</span><br><span class="line"><span class="javascript">                    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">ret, err</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span> (!!ret &amp;&amp; ret.length &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">//有该条数据</span></span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> data = ret[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> id = data.id;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> friends = data.friends;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">if</span> (!!friends.default) &#123;</span></span><br><span class="line"><span class="javascript">                                <span class="keyword">if</span> (friends.default.indexOf(userId) &gt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">                                    <span class="comment">//已经添加过</span></span></span><br><span class="line"><span class="javascript">                                    api.toast(&#123;<span class="attr">msg</span>: <span class="string">&#x27;已经添加过该好友了&#x27;</span>&#125;);</span></span><br><span class="line"><span class="javascript">                                    <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">                                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line">                                    friends.default.push(userId);</span><br><span class="line">                                &#125;</span><br><span class="line"><span class="javascript">                            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line">                                friends.default = [userId];</span><br><span class="line">                            &#125;</span><br><span class="line">                            model.updateById(&#123;</span><br><span class="line">                                class: &#x27;Friends&#x27;,</span><br><span class="line">                                id: id,</span><br><span class="line">                                value: &#123;</span><br><span class="line">                                    friends: friends</span><br><span class="line">                                &#125;</span><br><span class="line"><span class="javascript">                            &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">ret, err</span>) </span>&#123;</span></span><br><span class="line">                                api.hideProgress();</span><br><span class="line"><span class="javascript">                                <span class="keyword">if</span> (!!ret) &#123;</span></span><br><span class="line"><span class="javascript">                                    api.toast(&#123;<span class="attr">msg</span>: <span class="string">&#x27;添加好友成功&#x27;</span>&#125;);</span></span><br><span class="line"><span class="javascript">                                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                                    api.toast(&#123;<span class="attr">msg</span>: <span class="string">&#x27;网络异常&#x27;</span>&#125;);</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;)</span><br><span class="line"><span class="javascript">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!!ret &amp;&amp; ret.length == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">//没有该条数据</span></span></span><br><span class="line">                            api.hideProgress();</span><br><span class="line">                            model.insert(&#123;</span><br><span class="line">                                class: &#x27;Friends&#x27;,</span><br><span class="line">                                value: &#123;</span><br><span class="line">                                    userId: userId,</span><br><span class="line">                                    friends: &#123;</span><br><span class="line"><span class="javascript">                                        <span class="keyword">default</span>: [userId]</span></span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line"><span class="javascript">                            api.toast(&#123;<span class="attr">msg</span>: <span class="string">&#x27;添加好友成功&#x27;</span>&#125;);</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            api.toast(&#123;<span class="attr">msg</span>: <span class="string">&#x27;您尚未登录&#x27;</span>&#125;);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">//发送消息</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">SendMessage</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!!userId &amp;&amp; !!userName &amp;&amp; !!headImgUrl) &#123;</span></span><br><span class="line">            api.openWin(&#123;</span><br><span class="line"><span class="javascript">                name: <span class="string">&#x27;chattingFrame&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                url: <span class="string">&#x27;../message/chattingFrame.html&#x27;</span>,</span></span><br><span class="line">                pageParam: &#123;</span><br><span class="line">                    targetId: userId,</span><br><span class="line">                    targetName: userName,</span><br><span class="line">                    headImgUrl: headImgUrl,</span><br><span class="line"><span class="javascript">                    conversationType: <span class="string">&#x27;PRIVATE&#x27;</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而<code>Apicloud</code>这种技术就是基于html实现的，而每个html对应一个网页对应一个窗口。和普通的网页编写非常类似。这也就是为什么该项技术成熟的原因。因为完全就是玩个的编写方式。当然区别就是提供了一个可以供js调用的原生服务的接口。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>具体选择哪项技术，要根据自己的实际需求来决定。任何脱离实际需求的选择都是耍流氓。<br>但是，如果决定选择ReactNative或者Weex这样注定是未来趋势的新技术的话。就必须做好不断踩坑的打算，毕竟我们需要给予这些技术以发展的时间。当然，reactjs与vue已经是相对成熟的技术了，如果是为了学习的话。顺便学习一门新的技术也是一个不错的决定。</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> ReactNative </tag>
            
            <tag> Weex </tag>
            
            <tag> Apicloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node遇见问题汇总</title>
      <link href="/posts/e5320d32/"/>
      <url>/posts/e5320d32/</url>
      
        <content type="html"><![CDATA[<ul><li>使用<code>npm adduser</code>出现错误</li></ul><p>在确定用户名密码无误的情况下出现如下错误：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Username</span>: moonrailgun</span><br><span class="line"><span class="attribute">Password</span>:</span><br><span class="line"><span class="attribute">Email</span>: (this IS public) moonrailgun<span class="variable">@gmail</span>.com</span><br><span class="line">npm WARN adduser Incorrect username or password</span><br><span class="line">npm WARN adduser You can reset your account by <span class="attribute">visiting</span>:</span><br><span class="line">npm WARN adduser</span><br><span class="line">npm WARN adduser     <span class="attribute">https</span>:<span class="comment">//npmjs.org/forgot</span></span><br><span class="line">npm WARN adduser</span><br><span class="line">npm ERR! code E401</span><br><span class="line">npm ERR! unauthorized Login <span class="attribute">first</span>: -/user/org.couchdb.<span class="attribute">user</span>:moonrailgun/-rev/undefined</span><br></pre></td></tr></table></figure><p>如果你在全局设定过 <strong>淘宝镜像</strong>，那么你有可能是 <strong>淘宝镜像</strong> 的受害者。</p><p><strong>解决方案</strong><br>删除在个人用户文件夹目录下的<code>.npmrc</code>文件即可。<br>如<code>window</code>则是在<code>C:\Users\username</code>文件夹下</p><ul><li>使用<code>npm install</code>时不安装devDependencies需要的包</li></ul><p>如果发生这种情况那么你有可能是因为升级到了<code>npm@5</code>。解决方案要么降级npm，要么进行一下npm配置。因为<code>npm@5</code>以后默认为生产环境。尝试输入：<br><code>npm config set -g production false</code><br>来解决这个问题</p><ul><li>相对路径过长导致无法很方便的定位路径</li></ul><p>除了在webpack、babel等工具定义绝对路径的map以外，package.json文件也能提供类似的子包管理的功能。详见文章:<a href="https://medium.com/@davidjwoody/how-to-use-absolute-paths-in-react-native-6b06ae3f65d1">How to Use Absolute Paths in React Native</a></p><ul><li>在多包共存的项目中，明明两个对象看上去一模一样但是不相等</li></ul><p>需要检查一下这两个对象是否来自于不同的包。这个问题很难被发现，因为没有好的办法去检查一个对象的来源。需要人肉检查。这是node这种树形结构的包管理所必然会遇到的一个问题(即你安装的A包与B包依赖的A包可能是两个同名但不同版本的依赖)。</p><ul><li>在Node中经常会需要编译原生模块的包，很多c的环境对于不熟悉的开发者来说搭建这些环境是很没有必要的一件事，特别是window环境下缺失很多编译环境，如python，vs</li></ul><p>在window下可以用管理员权限的终端安装<code>npm install --global windows-build-tools</code>，该模块会一键帮你安装大部分的编译环境。更多细节可以查看<a href="https://github.com/felixrieseberg/windows-build-tools">Github</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blender学习笔记 - 权重传递</title>
      <link href="/posts/13f139b9/"/>
      <url>/posts/13f139b9/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在使用Blender为角色做衣服，特别是贴身衣物的时候，会出现这样的一个问题：权重不好刷，没法完全的和人物基础模型保持一致。为了解决这个问题，blender给我们提供了一个非常好用的工具：权重传递。</p><h2 id="使用前提"><a href="#使用前提" class="headerlink" title="使用前提"></a>使用前提</h2><p>权重传递需要几个前提：</p><ul><li>一个已经刷好权重的身体</li><li>一个适配身体的骨架</li><li>一个在基础建模上已经匹配身体的衣服模型</li></ul><h2 id="传递权重"><a href="#传递权重" class="headerlink" title="传递权重"></a>传递权重</h2><p>首先确保两个模型都绑定在同一个骨骼上（为了防止出现错误与方便测试），然后先选中身体模型，再选中衣服模型，衣服模型切换到权重模式以保证T栏出现权重工具。<br>点击权重工具，即可完成传递权重的操作。按下<code>F6</code>可以对传递权重进行一些细微的修改上的配置。一般默认即可。<br>那么现在就可以开始随便动动骨骼测试一下结果啦。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Blender </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何配置Apache虚拟主机服务</title>
      <link href="/posts/484f55d5/"/>
      <url>/posts/484f55d5/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为什么要配置虚拟主机？</p><ul><li>为了让多个项目能同时放在一个服务器上，且相对路径都是服务器根目录</li><li>为了在一个服务器上分配多个2级域名指向的项目</li></ul><h2 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h2><ul><li>首先找到Apache安装目录。修改<code>/conf/httpd.conf</code>,将<code>Include conf/extra/httpd-vhosts.conf</code>这行启用。即引入<code>httpd-vhosts.conf</code>配置文件。</li><li>修改<code>/conf/extra/httpd-vhosts.conf</code>配置文件。可以看到已经提供了两个demo如下：<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:<span class="number">80</span>&gt;</span><br><span class="line">  ServerAdmin webmaster@dummy-host<span class="selector-class">.example</span>.com</span><br><span class="line">  DocumentRoot <span class="string">&quot;E:/XAMPP/htdocs/dummy-host.example.com&quot;</span></span><br><span class="line">  ServerName dummy-host<span class="selector-class">.example</span>.com</span><br><span class="line">  ServerAlias www<span class="selector-class">.dummy-host</span><span class="selector-class">.example</span>.com</span><br><span class="line">  ErrorLog <span class="string">&quot;logs/dummy-host.example.com-error.log&quot;</span></span><br><span class="line">  CustomLog <span class="string">&quot;logs/dummy-host.example.com-access.log&quot;</span> common</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>其中最主要的是<code>DocumentRoot</code>,<code>ServerName</code>两个字段。分别代表了<code>项目路径</code>与<code>服务器名</code>。这里需要注意服务器名就是完整的URL路径如<code>test.example.com</code>这样的2级域名或者三级域名。如果有特殊的需求也可以写作顶级域名。这个字段的作用是把监听端口的请求网址为服务名的请求指向对应的虚拟主机项目路径。</li><li>重启Apache服务器</li></ul><h2 id="访问虚拟主机"><a href="#访问虚拟主机" class="headerlink" title="访问虚拟主机"></a>访问虚拟主机</h2><p>如果该服务器配置的顶级域名已经被DNS服务器解析完毕，则可以直接在浏览器中输入<code>ServerName</code>访问。如果该服务器域名未被解析，可以通过修改<code>HOSTS</code>方法强制指向服务器来访问</p><h2 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h2><p>在添加虚拟主机以后，可能会出现原始项目路径不可用的情况。如果想保留原始访问地址可以引入别名模块。<br>在<code>/conf/httd.conf</code>中打开<code>LoadModule vhost_alias_module modules/mod_vhost_alias.so</code>这项来载入模块。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Apache </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gulp工具使用笔记</title>
      <link href="/posts/82986f1f/"/>
      <url>/posts/82986f1f/</url>
      
        <content type="html"><![CDATA[<p>gulp是一款非常好用的前端工具，自从用了gulp以后我马上就抛弃了grunt投入的gulp的怀抱。<br>比起grunt的配置型，我更加喜欢gulp的函数型。通过编写各种各样的gulp任务函数来配置一系列任务来完成各种各样的需求。</p><p>总得来说，就很爽</p><h2 id="常用的gulp插件"><a href="#常用的gulp插件" class="headerlink" title="常用的gulp插件"></a>常用的gulp插件</h2><p>gulp-sourcemaps<br>gulp-sass<br>gulp-clean<br>gulp-rev<br>gulp-fingerprint<br>gulp-plumber<br>gulp-compass</p><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><p><code>gulp.start()</code> //执行任务<br><code>gulp.task()</code> //注册任务<br><code>gulp.watch()</code> //监听文件<br><code>gulp.src()</code> //获取匹配文件</p><h2 id="gulp能干什么"><a href="#gulp能干什么" class="headerlink" title="gulp能干什么?"></a>gulp能干什么?</h2><ul><li>gulp可以监听文件修改，自动执行一些任务比如自动编译。提升工作效率</li><li>gulp可以通过一些插件来开启简易端口，方便前端调试</li><li>gulp可以压缩JS文件，CSS文件，img图片</li><li>gulp可以统一封装你的代码。调用node来执行任务。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> gulp </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack打包工具性能优化</title>
      <link href="/posts/993cf839/"/>
      <url>/posts/993cf839/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="为什么要写这篇文章"><a href="#为什么要写这篇文章" class="headerlink" title="为什么要写这篇文章"></a>为什么要写这篇文章</h3><p>在最近的项目中顺便学习了一下<code>React</code>.而<code>React</code>推荐使用<code>ES6</code>所以也顺便学习了一下<code>ES6</code>.然后现有浏览器不能直接支持<code>ES6</code>的语法因此需要第三方打包工具.这里学习使用了<code>Webpack</code>.然而<code>React</code>本身大小就有1M+.每次<code>Webpack</code>进行打包操作的时候总是会显得过于臃肿.消费时间近10s.因此写下本篇文章来记录自己的打包优化之路</p><h2 id="externals"><a href="#externals" class="headerlink" title="externals"></a>externals</h2><h3 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h3><p>对于<code>React</code>这类第三方库而言.我们是不需要多次进行打包的因为我们本身不会对其源码进行操作修改.因此多次打包同一个包是一件多余的事情.因此我们要告诉<code>Webpack</code>我们不需要打包这个包.而只需要用手动的方式来直接引入预编译好的js版本即可.</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>在网上下载预编译好的js文件</li><li>在HTML代码中(在调用打包过后的js文件前)引入预编译好的js文件</li><li>在<code>webpack.config.js</code>中添加<code>externals</code>字段.如以下写法:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  externals: &#123;</span><br><span class="line">    <span class="string">&#x27;react&#x27;</span>: <span class="string">&#x27;React&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;react-dom&#x27;</span>: <span class="string">&#x27;ReactDOM&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>删除不必要的node库,减小项目体积(如React:<code>npm uninstall --save react react-dom</code>)</li></ul><h2 id="devtool"><a href="#devtool" class="headerlink" title="devtool"></a>devtool</h2><p>如果打包时启用了devtool, 请在生产环境下关闭或打到独立的sourcemap文件中。可以大大减少打包后的文件体积</p><h2 id="DllPlugin"><a href="#DllPlugin" class="headerlink" title="DllPlugin"></a>DllPlugin</h2><p>dll是一种非常棒的优化手段。它直接以比较粗暴的方式将一些常用的，不修改的第三方库打包到独立的文件，使日常开发中不会去编译他。这种方式非常类似于<a href="https://www.jianshu.com/p/9248db0349fb">用CDN引用第三方库</a>不过可以顺便对其进行一些特殊的处理。</p><p>首先创建一个 <code>webpack.dll.config.js</code> 文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原则上是需要全量导入 且共用的模块</span></span><br><span class="line"><span class="keyword">const</span> dllModules = [<span class="string">&#x27;react&#x27;</span>, <span class="string">&#x27;react-dom&#x27;</span>, <span class="string">&#x27;moment&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    vendor: [...dllModules],</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">&#x27;dll_[name].js&#x27;</span>,</span><br><span class="line">    library: <span class="string">&#x27;[name]_[hash]&#x27;</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">&#x27;./dll&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">      path: path.resolve(__dirname, <span class="string">&#x27;./dll/[name]-manifest.json&#x27;</span>),</span><br><span class="line">      name: <span class="string">&#x27;[name]_[hash]&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 该命令使仅打包moment的zh-cn语言文件</span></span><br><span class="line">    <span class="keyword">new</span> webpack.ContextReplacementPlugin(<span class="regexp">/moment[\/\\]locale$/</span>, <span class="regexp">/zh-cn/</span>),</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>独立编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ webpack --config webpack.dll.config.js</span><br></pre></td></tr></table></figure><p>生成一个 <code>manifest.json</code> 和 一个 <code>dll_vendor.js</code> 文件</p><p>我们在我们正常的<code>webpack.config.js</code>文件中引用他</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;copy-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> dllConfig = <span class="built_in">require</span>(<span class="string">&#x27;./dll/vendor-manifest.json&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">      manifest: dllConfig,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> CopyWebpackPlugin([</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">from</span>: path.resolve(BUILD_PATH, <span class="string">&#x27;./dll/dll_vendor.js&#x27;</span>),</span><br><span class="line">        to: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ]),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在HTML模板中手动增加该文件的引入即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/dll_vendor.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>你也可以通过<code>dllConfig</code>的name属性来增加hash来实现更好的更新</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Webpack </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>团队使用git方法简明教程</title>
      <link href="/posts/8857c74e/"/>
      <url>/posts/8857c74e/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习团队使用需要先学习如何个人使用git来管理自己的项目，如何使用git来管理自己的独立项目可以查看我之前的文章<br><a href="/2015/12/19/%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8git%E6%96%B9%E6%B3%95%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/">个人使用git方法简明教程</a></p><p>本篇文章使用git bash作为说明工具。是为了让读者能够更好的了解git的原理（作为程序员来说了解原理比仅仅知道如何使用可能更加简单入门）。对于git原理方便以后我会专门开一篇文章介绍更加深入的内容这里不做累述</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="一般操作流程"><a href="#一般操作流程" class="headerlink" title="一般操作流程"></a>一般操作流程</h3><p><strong>初次使用</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#已有在远程仓库有项目</span></span><br><span class="line">$ git <span class="built_in">clone</span> [项目地址]</span><br><span class="line"></span><br><span class="line"><span class="comment">#本地新建项目</span></span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure><p><strong>平时代码</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开始写项目前,拉取远程git仓库代码保证不会出现大的错误</span></span><br><span class="line">$ git pull</span><br><span class="line"></span><br><span class="line"><span class="comment">#写完部分代码（即完成一阶段任务或者功能）</span></span><br><span class="line"><span class="comment">#一般推荐阶段划分小而多的原则</span></span><br><span class="line">$ git status <span class="comment">#查看变动</span></span><br><span class="line">$ git add . <span class="comment">#添加所有改动到准备提交队列，符号.代表所有文件</span></span><br><span class="line"><span class="comment">##如果仅想要单个文件或者单个文件夹下所有改动可以使用命令  git add [文件完整地址/文件夹地址]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#提交修改</span></span><br><span class="line">$ git commit</span><br><span class="line"><span class="comment">##注意这里会弹出一个命令行编辑框，默认是使用nano，建议修改默认的命令行编辑器为vim</span></span><br><span class="line">:wq 结束编辑</span><br><span class="line"><span class="comment">#简洁提交</span></span><br><span class="line">$ git commit -m [message]<span class="comment">#平时更贱推荐的方法，不方便做出比较复杂的格式只能一行，不允许有空格，换行使用\n转义字符</span></span><br><span class="line">user</span><br><span class="line"><span class="comment">#将代码提交到远程</span></span><br><span class="line">$ git push</span><br><span class="line"><span class="comment">#如果出现文件冲突，会导致push被拒绝。解决方案是git pull远程代码后检查冲突文件并手动解决，然后再走一遍add —&gt; commit —&gt; push</span></span><br></pre></td></tr></table></figure><p>简单的说流程就是pull —&gt; add —&gt; commit —&gt; push</p><p><strong>特殊远程</strong><br>我们在pull和push的时候可以通过在后面添加<code>远程仓库地址 分支名</code>的方式管理pull和push的来源。默认的远程仓库名为<code>origin</code></p><p><strong>分支管理</strong><br>首先了解几个常用命令:</p><ul><li><code>git branch</code> 查看分支，带<code>*</code>号的是当前分支</li><li><code>git branch [分支名]</code> 创建一个分支</li><li><code>git branch -d [分支名]</code> 删除一个分支</li><li><code>git checkout [文件名或文件夹路径]</code> 检出本地库中最新的文件（一般用于撤销文件的修改）</li><li><code>git checkout [分支名]</code> 切换到某个分支</li><li><code>git checkout -b [分支名]</code> 创建并切换分支</li><li><code>git merge [分支名]</code> 将该分支合并到当前分支</li></ul><p>操作流程:创建分支 —&gt; 进行改动 —&gt; 完成改动 —&gt; 合并到主分支 —&gt; 如有冲突手动处理冲突 —&gt; 删除开发分支<br>example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建分支并切换到该分支</span></span><br><span class="line">$ git branch dev</span><br><span class="line">$ git checkout dev</span><br><span class="line">或</span><br><span class="line">$ git checkout -b dev</span><br><span class="line"></span><br><span class="line"><span class="comment">#change file</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#融合分支到主分支并删除开发分支</span></span><br><span class="line">$ git checkout master</span><br><span class="line">$ git merge dev</span><br><span class="line">$ git branch -d dev</span><br></pre></td></tr></table></figure><p><strong>暂存工作</strong><br>很多时候会遇见这样一个问题：我现在在一个独立的分支工作。而另一个分支出现了一个bug需要的紧急修改并提交，而我手头的工作还没完成一阶段内容（即无法提交一个新的commit），那么我们要如何临时保存自己的进度去切换到出现问题的分支呢？git给我们提供了一个非常实用的工具：<code>git stash</code><br>用法很简单,简单使用只要记住两个命令即可:</p><ul><li><code>git stash</code> 暂存当前工作</li><li><code>git statsh pop</code> 还原最近一次的暂存工作<br>同时我们可以使用<code>git stash list</code>方法查看git栈中有几个工作节点</li></ul><p><strong>不建议在git栈中保存多个节点容易导致混乱</strong></p><hr><p>知道以上几点即可简单方便的使用git工具进行团队开发了。</p><h2 id="使用GUI进行git管理"><a href="#使用GUI进行git管理" class="headerlink" title="使用GUI进行git管理"></a>使用GUI进行git管理</h2><p>在个人版已经推荐过了<code>github的git客户端</code>，但是在团队协作，特别是多人单分支团队协作中优势很不明显，无法很直观的看见各个协作者的提交情况。这里推荐另一款git图形化界面客户端：</p><p><a href="https://wiki.gnome.org/Apps/Gitg/">gitg</a><br><a href="https://www.gitkraken.com/">GitKraken</a><br>PS:GitKraken默认会自动设置所有项目的作者信息为统一。多身份项目的用户需要注意一下</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blender渲染笔记 - Cycle渲染</title>
      <link href="/posts/3d280206/"/>
      <url>/posts/3d280206/</url>
      
        <content type="html"><![CDATA[<h1 id="麦克娘"><a href="#麦克娘" class="headerlink" title="麦克娘"></a>麦克娘</h1><p><img src="/images/blender/%E9%BA%A6%E5%85%8B%E5%A8%98.png"></p><h1 id="钻石"><a href="#钻石" class="headerlink" title="钻石"></a>钻石</h1><p><img src="/images/blender/%E9%92%BB%E7%9F%B3.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> blender </tag>
            
            <tag> cycle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blender建模笔记 - 多拉多</title>
      <link href="/posts/a1900bf0/"/>
      <url>/posts/a1900bf0/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>这次准备建一个守望先锋多拉多的模型。因此在这篇文章下记录一下每天的建模记录算是对自已的一个激励</p><h2 id="部分场景"><a href="#部分场景" class="headerlink" title="部分场景"></a>部分场景</h2><ul><li><p>中央水池<br><img src="/images/blender/%E5%A4%9A%E6%8B%89%E5%A4%9A1.png"></p></li><li><p>椅子<br><img src="/images/blender/%E5%A4%9A%E6%8B%89%E5%A4%9A2.png"></p></li></ul><h2 id="成品"><a href="#成品" class="headerlink" title="成品"></a>成品</h2><p>正在努力加工中……</p>]]></content>
      
      
      
        <tags>
            
            <tag> blender </tag>
            
            <tag> 守望先锋 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Atom编辑器使用记录</title>
      <link href="/posts/546fd07e/"/>
      <url>/posts/546fd07e/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>今天安装了Github开发的开源文本编辑软件Atom感觉很不错。而且对于markdown的编写也很友好。写篇文章记录一下对于atom的使用经历。同时也可以为后来人对atom这款非常棒的编辑器的使用进行一个参考。<br>PS：我感觉我的 <em>markdown pad2</em> 和 <em>sublime</em> 这两款软件可以删了</p><h3 id="为什么选择atom"><a href="#为什么选择atom" class="headerlink" title="为什么选择atom"></a>为什么选择atom</h3><p>我是一个喜欢写很多语言的人。而我一般常使用的语言都是不需要太多编译器的（如C++、JAVA之类的）。因此我会经常在很多语言中来回切换：比如js、python、php这些。而运行这些语言需要的只是一个终端。我认为与其去开webstorm这样的重量级的IDE。我认为我只是需要一个编写代码的编辑器而已。因此我选择了atom。一款适合于脚本语言编写的轻量级编辑器。<br>我喜欢atom。我认为他在编辑器的地位就相当于chrome在浏览器的地位一样。现代、快捷、功能强大、可扩展性高，但是一般用户很少会选择。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>网址:<br><a href="https://github.com/atom/atom">Github</a><br><a href="https://atom.io/">官网</a><br>下载发布版本:<br><a href="https://github.com/atom/atom/releases">releases</a>  </p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="基础快捷键"><a href="#基础快捷键" class="headerlink" title="基础快捷键"></a>基础快捷键</h2><p><strong>调出命令控制面板</strong> <code>Ctrl</code>+<code>Shift</code>+<code>P</code></p><h2 id="添加中文语言包"><a href="#添加中文语言包" class="headerlink" title="添加中文语言包"></a>添加中文语言包</h2><p>打开Settings-&gt;Install。搜索扩展包<code>simplifed-chinese-menu</code>，安装。实现对界面的本地化(也可以使用英文原版)。</p><h2 id="添加中文拼写检查"><a href="#添加中文拼写检查" class="headerlink" title="添加中文拼写检查"></a>添加中文拼写检查</h2><p>在 <strong>扩展</strong> 项中搜索<code>spell-check</code>扩展。打开 <strong>设置</strong>。在<code>locales</code>项中写入<code>zh_CN</code>。完成中文拼写检测的设置(然而并没有实际拼写检查的作用)。</p><h2 id="娱乐插件"><a href="#娱乐插件" class="headerlink" title="娱乐插件"></a>娱乐插件</h2><p>在atom社区有一款神奇的应用。名为<code>activate-power-mode</code>。在文本输入框内输入文本的时候会有神奇的效果(计数，震动，粒子效果)。虽然实际上对于编程没有什么好处。但是在实际的代码编辑中不失为一种娱乐的方式。毕竟我们需要一些乐趣来为一成不变的代码编写增加娱乐。特别是当我们灵感勃发的时候<br><em>PS：如果不适应屏幕抖动的效果感觉晃眼睛的话建议关闭屏幕抖动效果仅保留粒子效果</em></p><h2 id="代码测试插件"><a href="#代码测试插件" class="headerlink" title="代码测试插件"></a>代码测试插件</h2><p>传统情况下我们要测试一行代码的结果必须运行。往往需要切出窗口然后运行代码。而atom有一个插件可以实现在编辑器中运行代码查看结果。 <code>Script</code></p><blockquote><p>Run scripts based on file name, a selection of code, or by line number.</p></blockquote><h2 id="代码美化插件"><a href="#代码美化插件" class="headerlink" title="代码美化插件"></a>代码美化插件</h2><p>支持多种代码的美化操作。其名为<code>atom-beautify</code>。可以再设置面板中对每个语言代码进行设置。</p><blockquote><p>Beautify HTML, CSS, JavaScript, PHP, Python, Ruby, Java, C, C++, C#, Objective-C, CoffeeScript, TypeScript, Coldfusion, SQL, and more in Atom</p></blockquote><h2 id="图标美化插件"><a href="#图标美化插件" class="headerlink" title="图标美化插件"></a>图标美化插件</h2><p>原始图标仅有文件夹和文件两种类型。使用<code>file-icons</code>插件将各个不同类型后缀的文件应用不同的图标。方便快速区分文件。</p><blockquote><p>Assign file extension icons and colours for improved visual grepping<br><img src="https://i.github-camo.com/7c2229cb27f3dd0e944e1ad95d65a6f03da9b316/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f44616e42726f6f6b65722f66696c652d69636f6e732f6d61737465722f707265766965772e706e67"></p></blockquote><h2 id="选中高亮插件"><a href="#选中高亮插件" class="headerlink" title="选中高亮插件"></a>选中高亮插件</h2><p>用过sublime的用户一定会知道。sublime有个特性非常好用那就是可以高亮该文档中所有被选中的文字。对于快速查找该变量的使用非常方便。而atom原生并不自带这个功能。因此有个插件能够帮助用户实现这个功能。那就是<code>highlight-selected</code>。简单安装后即可使用</p><h2 id="浏览器插件"><a href="#浏览器插件" class="headerlink" title="浏览器插件"></a>浏览器插件</h2><p>做html技术的可能会需要。因为很多时候我们并不想开个多余的浏览器(或者浏览器的标签页)。那么在编辑器中打开一个浏览器的标签页也许是个不错的选择。我喜欢atom给我拖曳的方式让我自由的修改我的工作空间。那么多多使用多个子面板。其中一个用于显示输出的结果。也许是小窗口的用户一个不错的选择<br>这个插件的名字叫<code>browser-plus</code></p><h2 id="网页服务器插件"><a href="#网页服务器插件" class="headerlink" title="网页服务器插件"></a>网页服务器插件</h2><p><code>atom-live-server</code>插件可以在本地快速开启一个网页服务器，并且还自带ws服务可以提供热更新（即文件保存自动刷新）。可以说是网页、网站前端开发者必备的插件。轻量级、快速。</p><h2 id="代码地图"><a href="#代码地图" class="headerlink" title="代码地图"></a>代码地图</h2><p>小地图<code>minimap</code>。不多说你懂的，要是不懂我也没办法。Atom上minimap还附带一堆实用相关插件可以根据需求自行安装</p><h2 id="Makedown文件预览插件"><a href="#Makedown文件预览插件" class="headerlink" title="Makedown文件预览插件"></a>Makedown文件预览插件</h2><p>用于md文件的结果的预览，可以直接使用git css进行预览（需要设置）。对于用md写文章和写软件README说明很方便。</p><h2 id="拾色器"><a href="#拾色器" class="headerlink" title="拾色器"></a>拾色器</h2><p>插件名为<code>color-picker</code>。用交互式的方式快速让用户选取想要的颜色，并支持多种颜色格式的输出与美化</p><h2 id="版本控制插件"><a href="#版本控制插件" class="headerlink" title="版本控制插件"></a>版本控制插件</h2><p><code>git-plus</code>。一个好用的git控制插件。虽然我个人觉得命令行更加好用但是使用图形化界面万一习惯了也是挺带感的说不定呢？</p><h2 id="终端控制插件"><a href="#终端控制插件" class="headerlink" title="终端控制插件"></a>终端控制插件</h2><p><code>platformio-ide-terminal</code>在Atom里面试了很多个唯一能用的终端插件。虽然还有很多部分不足但是作为一个简单的终端已经够用了。当然如果喜欢用外部终端开一堆窗口的话那就不需要这款插件了。而笔者在这里是推荐能够将atom作为一个集成的环境来进行开发用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> atom </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unreal学习笔记 - 扇形攻击范围检测</title>
      <link href="/posts/6eb62c08/"/>
      <url>/posts/6eb62c08/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/unreal/CheckInRadius.png" alt="/images/unreal/CheckInRadius.png"></p><p>输入参数:</p><ul><li>NormalAttackAngle - 攻击范围夹角(0~360)</li><li>NormalAttackRadius - 攻击距离</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Unreal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unreal学习笔记 - 创建边沿发光材质</title>
      <link href="/posts/78c43660/"/>
      <url>/posts/78c43660/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/unreal/EdgeLightCube.jpg" alt="/images/unreal/EdgeLightCube.jpg"></p><h2 id="单色发光"><a href="#单色发光" class="headerlink" title="单色发光"></a>单色发光</h2><p><img src="/images/unreal/M_EdgeLight.jpg" alt="/images/unreal/M_EdgeLight.jpg"></p><h2 id="呼吸灯发光"><a href="#呼吸灯发光" class="headerlink" title="呼吸灯发光"></a>呼吸灯发光</h2><p>将单色发光的颜色节点替换为下面的时间循环节点即可实现呼吸灯特效<br><img src="/images/unreal/M_EdgeCircleLight.jpg" alt="/images/unreal/M_EdgeCircleLight.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Unreal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MikuMikuCombat开发笔记 - 武器</title>
      <link href="/posts/bf34fac6/"/>
      <url>/posts/bf34fac6/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>角色人物拿的或使用的武器</p><h1 id="武器设计"><a href="#武器设计" class="headerlink" title="武器设计"></a>武器设计</h1><p><img src="/images/mmc/funnel.png"><br><img src="/images/mmc/funnel2.png">  </p><ul><li>武器名：浮游炮</li><li>功能：可以射出伤害为10的子弹，射速为每秒2发。最多可以同时存在三个浮游炮。自带40点生命值可以被摧毁<blockquote><p>吃我大浮游炮</p></blockquote></li></ul><p><img src="/images/mmc/rifle_min.png">  </p><ul><li>武器名：来复枪</li><li>功能：射出高射速的子弹。对敌人造成平稳的伤害。每发子弹伤害15。用特殊攻击模式可以射出伤害为100的高爆子弹。<blockquote><p>我看见你们了</p></blockquote></li></ul><p><img src="/images/mmc/blade_min.png">  </p><ul><li>武器名：黑刃</li><li>功能：普通挥砍能造成60点的高额输出。特殊攻击模式可以发射出伤害200的黑色剑气。(贯穿伤不能穿透建筑物)<blockquote><p>人剑合一！</p></blockquote></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> MikuMikuCombat </tag>
            
            <tag> 开发笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MikuMikuCombat开发笔记 - 道具</title>
      <link href="/posts/e6d9d22d/"/>
      <url>/posts/e6d9d22d/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在游戏中会出现的道具。拥有各种各样的功能</p><h1 id="道具设计"><a href="#道具设计" class="headerlink" title="道具设计"></a>道具设计</h1><p><img src="/images/mmc/%E5%B0%8F%E8%A1%80%E5%8C%85.png"></p><ul><li>道具名：小血包</li><li>功能：可以恢复50点HP值<blockquote><p>来自伟大的暴雪爸爸</p></blockquote></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> MikuMikuCombat </tag>
            
            <tag> 开发笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MikuMikuCombat开发笔记 - 角色</title>
      <link href="/posts/fbf9499/"/>
      <url>/posts/fbf9499/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>目前有基于mmd的v家两位来自日本的明星初音未来与亚北加入了MMC的战场。不但能跳舞。打架也是非常的擅长!</p><h1 id="技能设计"><a href="#技能设计" class="headerlink" title="技能设计"></a>技能设计</h1><h2 id="Miku"><a href="#Miku" class="headerlink" title="Miku"></a>Miku</h2><p><img src="/images/mmc/character_miku.png"></p><ul><li>生命值：200</li><li>充能需求：1000</li><li>使用武器：连射机枪</li><li>伤害：15/发</li><li>弹夹容量：30<blockquote><p>没有什么事一发子弹解决不了的。如果有，那就一梭子<br>把你mikumiku掉</p></blockquote></li></ul><h2 id="Akita"><a href="#Akita" class="headerlink" title="Akita"></a>Akita</h2><p><img src="/images/mmc/character_akita.png"></p><ul><li>生命值：200</li><li>充能需求：800</li><li>使用武器：野太刀</li><li>伤害：40</li><li>弹夹容量：无限<blockquote><p>竜人の剣を喰え(雾)</p></blockquote></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> MikuMikuCombat </tag>
            
            <tag> 开发笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unreal学习笔记 - 蓝图使用手册</title>
      <link href="/posts/e8bbfe80/"/>
      <url>/posts/e8bbfe80/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>来源于官方蓝图简明手册说明<br><a href="/files/unreal/BlueprintCheatSheet-1989117414.pdf">英文版PDF源文件</a></p><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><h2 id="图表操作"><a href="#图表操作" class="headerlink" title="图表操作"></a>图表操作</h2><ul><li>图表操作菜单    <code>在蓝图右键</code><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2></li><li>选择节点    <code>点击节点</code></li><li>添加选择    <code>Shift+点击节点</code></li><li>切换选择    <code>Ctrl+点击节点</code></li><li>框选（替换当前）    <code>左键拖曳</code></li><li>框选（添加）    <code>Shift+左键拖曳</code></li><li>框选（移除）    <code>Ctrl+左键拖曳</code><h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2></li><li>拖动图表    <code>右键拖曳</code></li><li>缩放合适大小    <code>Home</code></li><li>缩放大小    <code>鼠标滚轮</code></li><li>缩放大小    <code>按住鼠标左右键并拖曳</code></li><li>超过1:1放大    <code>Ctrl+放大</code></li><li>进入子视图    <code>PageDn</code></li><li>进入父视图    <code>PageUp</code><h2 id="生成命令"><a href="#生成命令" class="headerlink" title="生成命令"></a>生成命令</h2></li><li>在内容浏览器中查找    <code>Ctrl+B</code></li><li>保存蓝图    <code>Ctrl+S</code></li><li>重做 <code>Ctrl+Y</code></li><li>撤销 <code>Ctrl+Z</code></li><li>在当前蓝图中查找    <code>Ctrl+F</code></li><li>在所有蓝图中查找    <code>Ctrl+Shift+F</code></li><li>编译蓝图    <code>F7</code><h2 id="变量操作-我的蓝图"><a href="#变量操作-我的蓝图" class="headerlink" title="变量操作(我的蓝图)"></a>变量操作(我的蓝图)</h2></li><li>根据条件的Get/Set变量    <code>拖动到兼容的引脚</code></li><li>Get/Set变量（通过菜单）    <code>拖动到图表</code></li><li>Get变量    <code>Ctrl+拖动到图表</code></li><li>Set变量    <code>Alt+拖动到图表</code></li><li>修改已存在的节点    <code>拖动到Get/Set的边缘</code></li><li>修改目录/排列 <code>在我的蓝图中拖动</code><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2></li><li>节点相关操作菜单    <code>右键节点</code></li><li>跳转到声明节点/图表    <code>双击节点</code></li><li>移动节点    <code>左键拖动节点</code></li><li>移动选中节点    <code>方向键</code></li><li>删除选中节点    <code>Delete</code></li><li>重命名节点/修改注释    <code>点击标题</code></li><li>重命名节点/修改注释    <code>F2</code></li><li>切换断点    <code>F9</code></li><li>清除所有断点    <code>Ctrl+Shift+F9</code></li><li>剪切选中内容    <code>Ctrl+X</code></li><li>复制选中内容    <code>Ctrl+C</code></li><li>粘贴节点    <code>Ctrl+V</code></li><li>重复节点    <code>Ctrl+W</code></li><li>在选中内容上添加注释    <code>C</code><h2 id="引脚操作"><a href="#引脚操作" class="headerlink" title="引脚操作"></a>引脚操作</h2></li><li>引脚相关操作    <code>右键引脚</code></li><li>高亮连接的线    <code>鼠标在引脚上悬浮</code></li><li>连接到另一个引脚    <code>点击并拖曳到引脚</code></li><li>打开引脚相关操作菜单并连接    <code>点击并拖曳到图表</code></li><li>断开所有连接    <code>Alt+点击引脚</code></li><li>移动所有连接    <code>Ctrl+左键拖动到引脚</code><h2 id="创建节点快捷键"><a href="#创建节点快捷键" class="headerlink" title="创建节点快捷键"></a>创建节点快捷键</h2></li><li>数组获得节点    <code>A+点击</code></li><li>分支节点    <code>B+点击</code></li><li>注释框节点    <code>C</code></li><li>延时节点    <code>D+点击</code></li><li>序列节点    <code>S+点击</code></li><li>开关节点    <code>G+点击</code></li><li>For-Each循环节点    <code>F+点击</code></li><li>多重开关节点    <code>M+点击</code></li><li>Do N times节点    <code>N+点击</code></li><li>Do Once节点    <code>O+点击</code></li><li>开始运行事件    <code>P+点击</code></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Unreal </tag>
            
            <tag> 蓝图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blender学习笔记 - 常用快捷键</title>
      <link href="/posts/b9028042/"/>
      <url>/posts/b9028042/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在使用blender的过程中。快捷键是必不可少，因此我将我实际操作过程中的一些快捷键整理一下。方便后人学习</p><h2 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h2><ul><li><p><code>G</code> 平移(按两下为沿线位移)</p></li><li><p><code>R</code> 旋转(按两下垂直于屏幕操作)</p></li><li><p><code>S</code> 缩放</p><blockquote><p>可以在后面加上<code>X``Y``Z</code>按键表示按照XYZ方向进行操作<br>在后面加上<code>Shift+X``Shift+Y``Shift+Z</code>表示锁定XYZ方向进行操作<br>一次为全局。两次当前选中项相关方向(如自身)</p></blockquote></li><li><p><code>C</code> 刷选</p></li><li><p><code>B</code> 框选</p></li><li><p><code>A</code> 全选</p></li><li><p><code>Z</code> 线框模式</p></li><li><p><code>T</code> 左侧页</p></li><li><p><code>N</code> 右侧页</p></li><li><p><code>W</code> 更多选项(一些不常用但偶尔会用到的操作)</p></li><li><p><code>F</code> 建面</p></li><li><p><code>E</code> 挤出</p></li><li><p><code>K</code> 切割(按住切割，回车确定)</p></li><li><p><code>Y</code> 分割</p></li><li><p><code>P</code> 分离(单独个体)</p></li><li><p><code>X</code> 删除(融并)</p></li><li><p><code>V</code> 分割</p></li><li><p><code>M</code> 移动到层</p></li><li><p><code>H</code> 隐藏</p></li><li><p><code>I</code> 内插面</p></li><li><p><code>Alt+H</code> 显示隐藏项</p></li><li><p><code>Alt+S</code> 法向缩放</p></li><li><p><code>Shift+S</code> 吸附</p></li><li><p><code>Shift+C</code> 重置3D游标位置并使视图能展示所有物体</p></li><li><p><code>Ctrl+A</code> 添加</p></li><li><p><code>Ctrl+R</code> 环切</p></li><li><p><code>Ctrl+L</code> 选中相连项</p></li><li><p><code>Ctrl+D</code> 复制</p></li><li><p><code>Ctrl+P</code> 设定父级</p></li><li><p><code>Ctrl+J</code> 合并</p></li><li><p><code>Ctrl+B</code> 边倒角</p></li><li><p><code>Ctrl+Shift+B</code> 点倒角</p></li><li><p><code>Ctrl+Alt+Q</code> 切换四格视图</p></li></ul><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><ul><li><code>小键盘1</code> 前视图</li><li><code>小键盘3</code> 右视图</li><li><code>小键盘7</code> 顶视图</li><li><code>小键盘5</code> 透视</li><li><code>小键盘9</code> 切换到当前视图背面</li><li><code>小键盘0</code> 摄像机视角</li><li><code>小键盘.</code> 以当前活动项为中心</li><li><code>F12</code> 渲染</li><li><code>Shitf+空格</code> 最大化当前视图</li></ul><h2 id="雕刻"><a href="#雕刻" class="headerlink" title="雕刻"></a>雕刻</h2><ul><li><code>F</code> 调整笔刷大小</li><li><code>LMB</code> 突出</li><li><code>Ctrl+LMB</code> 凹陷</li><li><code>Shift+LMB</code> 平滑</li></ul><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><ul><li><code>Shift+E</code> 手动中间帧</li><li><code>Ctrl+C</code> 复制当前姿态</li><li><code>Ctrl+V</code> 粘贴复制的姿态</li><li><code>Ctrl+Shift+V</code> 粘贴复制的镜像姿态</li><li><code>T</code> 关键帧过渡样式</li></ul><h2 id="一些实用技巧"><a href="#一些实用技巧" class="headerlink" title="一些实用技巧"></a>一些实用技巧</h2><ul><li>在N面板有一个选项是<code>锁定到视图</code>。点选可以在摄像机视图模式实现航拍效果,对于动画来说就非常实用</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Blender </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unreal学习笔记 - 绘制准心</title>
      <link href="/posts/bbd25313/"/>
      <url>/posts/bbd25313/</url>
      
        <content type="html"><![CDATA[<h1 id="在屏幕中央绘制准心"><a href="#在屏幕中央绘制准心" class="headerlink" title="在屏幕中央绘制准心"></a>在屏幕中央绘制准心</h1><p>创建继承于HUD的蓝图类。在Gamemode中将原始HUD指向到新的HUD蓝图上  </p><p>然后在创建的蓝图类中加入如下节点：<br><img src="" alt="/images/unreal/HudDrawTexture.png"><br>ReceiveDrawHUD为绘制事件调用<br>DrawTexture为绘制贴图的方法，需要传入绘制贴图，屏幕坐标，绘制大小，UV宽高，填充颜色（纯白贴图可以通过修改填充颜色的方法来修改绘制图形颜色）</p>]]></content>
      
      
      
        <tags>
            
            <tag> Unreal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unreal学习笔记 - 图形选项</title>
      <link href="/posts/4b5cc73c/"/>
      <url>/posts/4b5cc73c/</url>
      
        <content type="html"><![CDATA[<h3 id="在选项中用户根据自己的环境调整游戏的画质"><a href="#在选项中用户根据自己的环境调整游戏的画质" class="headerlink" title="在选项中用户根据自己的环境调整游戏的画质"></a>在选项中用户根据自己的环境调整游戏的画质</h3><p><strong>使用<code>Execute Console Command</code>输入指令</strong></p><ul><li>屏幕缩放 r.screenPercentage [百分比][0~100]</li><li>视距 sg.ViewDistanceQuality [Low|Medium|High|Wow][0|1|2|3]</li><li>抗锯齿 sg.AntiAliasingQuality [Low|Medium|High|Epic][0|1|2|3]</li><li>后期处理特效(视觉效果) sg.PostProcessQuality [Low|Medium|High|Epic][0|1|2|3]</li><li>阴影质量 sg.ShadowQuality [Low|Medium|High|Epic][0|1|2|3]</li><li>贴图质量 sg.TextureQuality [Low|Medium|High|Epic][0|1|2|3]</li><li>特效 sg.EffectsQuality [Low|Medium|High|Epic][0|1|2|3]</li><li>垂直同步 r.VSync [0|1]</li><li>设置屏幕分辨率 r.SetRest [640x480|1280x720|1366x768|1920x1080|..(格式为 宽度x长度 后缀可以跟上<code>w</code>或<code>f</code>表示window或fullscreen)]</li><li>设置全屏模式 r.FullScreenMode [0|1|2]<blockquote><p>0: normal full screen (renders faster, more control over vsync, less GPU memory, 10bit color if possible)<br>1: windowed full screen, desktop resolution (quick switch between applications and window mode, full quality)<br>2: windowed full screen, specified resolution (like 1 but no unintuitive performance cliff, can be blurry, default)</p></blockquote></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Unreal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blender学习笔记 - 自动切换透视模式</title>
      <link href="/posts/a16e855a/"/>
      <url>/posts/a16e855a/</url>
      
        <content type="html"><![CDATA[<h3 id="问题概述"><a href="#问题概述" class="headerlink" title="问题概述"></a>问题概述</h3><p>版本：2.78<br>使用小键盘时无法和以前版本一样自动切换透视/正交模式</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>在用户设置——界面中有一项<code>自动透视模式</code>。勾选上即可</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://blender.stackexchange.com/questions/13387/how-do-i-switch-auto-perspective-on">http://blender.stackexchange.com/questions/13387/how-do-i-switch-auto-perspective-on</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Blender </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unreal学习笔记 - 使用JoinSession成功加入服务器但是无法跳转到服务器当前地图</title>
      <link href="/posts/67516082/"/>
      <url>/posts/67516082/</url>
      
        <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>创建session后。第二个找到可用的session，但是当前玩家数量显示为0。并且加入后无法跳转到服务器当前的地图。<br>日志如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">LogGameMode:</span><span class="attr">Display:</span> Match State Changed from InProgress to LeavingMap</span><br><span class="line"><span class="attr">LogGameState:</span> Match State Changed from InProgress to LeavingMap</span><br><span class="line"><span class="attr">LogNet:</span> <span class="attr">Browse:</span> <span class="number">10.10</span><span class="number">.85</span><span class="number">.66</span>:<span class="number">0</span><span class="comment">//Game/Maps/StartLevel</span></span><br><span class="line"><span class="attr">LogInit:</span> <span class="attr">WinSock:</span> Socket queue <span class="number">32768</span> / <span class="number">32768</span></span><br><span class="line"><span class="attr">PacketHandlerLog:</span> Loaded PacketHandler <span class="attr">component:</span> Engine.EngineHandlerComponentFactory (StatelessConnectHandlerComponent)</span><br><span class="line"><span class="attr">LogNet:</span> Game client on port <span class="number">0</span>, rate <span class="number">10000</span></span><br><span class="line"><span class="attr">LogNet:</span> <span class="attr">UPendingNetGame:</span>:<span class="attr">InitNetDriver:</span> Sending hello. [UNetConnection] <span class="attr">RemoteAddr:</span> <span class="number">10.10</span><span class="number">.85</span><span class="number">.66</span>:<span class="number">0</span>, <span class="attr">Name:</span> IpConnection_78, <span class="attr">Driver:</span> PendingNetDriver IpNetDriver_77, <span class="attr">IsServer:</span> NO, <span class="attr">PC:</span> NULL, <span class="attr">Owner:</span> NULL</span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>原因在于使用<code>CreateSession</code>创建完毕后使用<code>OpenLevel</code>进行跳转。需要给予<code>OpenLevel</code>参数<code>Options</code>中写入<code>listen</code>关键字才可以成功跳转</p><p>具体原因可以查看Unreal控制台命令相关说明</p>]]></content>
      
      
      
        <tags>
            
            <tag> Unreal </tag>
            
            <tag> Session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unreal学习笔记 - 使用steam来进行多人联机</title>
      <link href="/posts/4de36f08/"/>
      <url>/posts/4de36f08/</url>
      
        <content type="html"><![CDATA[<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在DefaultEngine.ini添加如下设置</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[/Script/Engine.GameEngine]</span><br><span class="line">+NetDriverDefinitions=(<span class="attribute">DefName</span>=<span class="string">&quot;GameNetDriver&quot;</span>,DriverClassName=&quot;OnlineSubsystemSteam.SteamNetDriver&quot;,DriverClassNameFallback=&quot;OnlineSubsystemUtils.IpNetDriver&quot;)</span><br><span class="line"></span><br><span class="line">[OnlineSubsystem]</span><br><span class="line"><span class="attribute">DefaultPlatformService</span>=Steam</span><br><span class="line"></span><br><span class="line">[OnlineSubsystemSteam]</span><br><span class="line"><span class="attribute">bEnabled</span>=<span class="literal">true</span></span><br><span class="line"><span class="attribute">SteamDevAppId</span>=480</span><br><span class="line"></span><br><span class="line">[/Script/OnlineSubsystemSteam.SteamNetDriver]</span><br><span class="line"><span class="attribute">NetConnectionClassName</span>=<span class="string">&quot;OnlineSubsystemSteam.SteamNetConnection&quot;</span></span><br></pre></td></tr></table></figure><p>完成对steam的引用。其中</p><blockquote><p>480 SteamDevAppId 是 Valve 的测试应用 ID，所有人共享。随着工作的深入您需要自己的应用 Id，但 Steam 的大部分功能均可通过测试 ID 使用。</p></blockquote><p>如果仅需要本地LAN联机。可以值添加</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[OnlineSubsystem]</span></span><br><span class="line"><span class="attr">DefaultPlatformService</span>=Steam</span><br></pre></td></tr></table></figure><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>在项目插件选项中勾选<code>OnlineSubsystemSteam</code>完成steam在线子系统模块的导入。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="创建会话"><a href="#创建会话" class="headerlink" title="创建会话"></a>创建会话</h3><p><img src="/images/unreal/CreateSession.jpg"></p><h3 id="加入会话"><a href="#加入会话" class="headerlink" title="加入会话"></a>加入会话</h3><p><img src="/images/unreal/JoinSession.jpg"></p><h3 id="查找会话"><a href="#查找会话" class="headerlink" title="查找会话"></a>查找会话</h3><p><img src="/images/unreal/FindSessions.jpg"></p><h3 id="销毁会话"><a href="#销毁会话" class="headerlink" title="销毁会话"></a>销毁会话</h3><p><img src="/images/unreal/DestroySession.jpg"></p><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><p>不满足于默认的功能？想要诸如好友、成就、语音…这些steam的拓展功能？在UnrealForum有一款插件正是满足了这些需求<a href="https://forums.unrealengine.com/showthread.php?69901-Advanced-Sessions-Plugin">Advanced Sessions Plugin</a>而且这款插件是完全免费的</p>]]></content>
      
      
      
        <tags>
            
            <tag> Unreal </tag>
            
            <tag> Steam </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unreal学习笔记 - 修复右键菜单</title>
      <link href="/posts/754e67fa/"/>
      <url>/posts/754e67fa/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>重装了一下Unreal。发现不知道为什么.uproject文件没有被自动关联。谷歌了一下找到了修复的解决方案。<br>原文：<a href="http://www.davidmoore.info/blog/2014/09/05/fix-the-missing-right-click-menu-for-unreal-engine-projects-uproject/">http://www.davidmoore.info/blog/2014/09/05/fix-the-missing-right-click-menu-for-unreal-engine-projects-uproject/</a></p><p><del>不过可能是因为适用于老版本的Unreal。新版本的Unreal的文件结构发生了变化。包括很多谷歌上的描述也是使用的原文的结构。而我用的Unreal 4.13.1版本并不适用。因此进行了一些修改。贴出解决方案cmd命令行文件。</del><br>不过该版本适用于自编译的Unreal引擎。对于使用Launcher安装的版本来说并不适用因此在原来的基础上进行了一些修改具体代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">:: UnrealProjectMenuRegistration.cmd</span><br><span class="line">::</span><br><span class="line">:: This batch file will try to find <span class="built_in">where</span> the Unreal Engine is installed, <span class="keyword">then</span> update your registry</span><br><span class="line">:: to register the Unreal Project File <span class="built_in">type</span> (and its right click menu <span class="keyword">for</span> things such as generating</span><br><span class="line">:: Visual Studio project files, and launching)</span><br><span class="line">::</span><br><span class="line">:: Run as an Administrator, as it<span class="string">&#x27;s required for writing to HKLM.</span></span><br><span class="line"><span class="string">::</span></span><br><span class="line"><span class="string">:: Author: David Moore &lt;david@sadrobot.co.nz&gt;</span></span><br><span class="line"><span class="string">:: </span></span><br><span class="line"><span class="string">:: 二次修改:moonrailgun</span></span><br><span class="line"><span class="string">:: http://www.moonrailgun.com/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">::@ECHO OFF</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">echo.</span></span><br><span class="line"><span class="string">echo Locating where Unreal Engine Launcher...</span></span><br><span class="line"><span class="string">set UnrealLauncherDir= %~pd0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">IF &quot;%UnrealLauncherDir%&quot;==&quot;&quot; GOTO CannotFindUnrealEngine</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">echo.</span></span><br><span class="line"><span class="string">echo Using Unreal Engine directory: %UnrealLauncherDir%</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set LauncherPath=%UnrealLauncherDir%Engine\Binaries\Win64\UnrealVersionSelector.exe</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">echo.</span></span><br><span class="line"><span class="string">echo Adding registry keys for the Unreal Project right click menu...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">:: HKLM\SOFTWARE\Classes\.uproject</span></span><br><span class="line"><span class="string">reg ADD &quot;HKLM\Software\Classes\.uproject&quot; /ve /d Unreal.ProjectFile /f</span></span><br><span class="line"><span class="string">IF ERRORLEVEL 1 (</span></span><br><span class="line"><span class="string">    echo Couldn&#x27;</span>t write to registry. Did you forget to run this batch file as an administrator?</span><br><span class="line">    goto TheEnd</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">:: HKLM\SOFTWARE\Classes\Unreal.ProjectFile</span><br><span class="line">reg ADD <span class="string">&quot;HKLM\Software\Classes\Unreal.ProjectFile&quot;</span> /ve /d <span class="string">&quot;Unreal Engine Project File&quot;</span> /f</span><br><span class="line"></span><br><span class="line">:: HKLM\SOFTWARE\Classes\Unreal.ProjectFile\DefaultIcon</span><br><span class="line">reg ADD <span class="string">&quot;HKLM\Software\Classes\Unreal.ProjectFile\DefaultIcon&quot;</span> /ve /d <span class="string">&quot;\&quot;%LauncherPath%\&quot;&quot;</span> /f</span><br><span class="line"></span><br><span class="line">:: HKLM\SOFTWARE\Classes\Unreal.ProjectFile\shell\open</span><br><span class="line">reg ADD <span class="string">&quot;HKLM\Software\Classes\Unreal.ProjectFile\shell\open&quot;</span> /ve /d <span class="string">&quot;Open&quot;</span> /f</span><br><span class="line">reg ADD <span class="string">&quot;HKLM\Software\Classes\Unreal.ProjectFile\shell\open\command&quot;</span> /ve /d <span class="string">&quot;\&quot;%LauncherPath%\&quot; /editor \&quot;%%1\&quot;&quot;</span> /f</span><br><span class="line"></span><br><span class="line">:: HKLM\SOFTWARE\Classes\Unreal.ProjectFile\shell\run</span><br><span class="line">reg ADD <span class="string">&quot;HKLM\Software\Classes\Unreal.ProjectFile\shell\run&quot;</span> /ve /d <span class="string">&quot;Launch game&quot;</span> /f</span><br><span class="line">reg ADD <span class="string">&quot;HKLM\Software\Classes\Unreal.ProjectFile\shell\run&quot;</span> /v Icon /t REG_SZ /d <span class="string">&quot;\&quot;%LauncherPath%\&quot;&quot;</span> /f</span><br><span class="line">reg ADD <span class="string">&quot;HKLM\Software\Classes\Unreal.ProjectFile\shell\run\command&quot;</span> /ve /d <span class="string">&quot;\&quot;%LauncherPath%\&quot; /game \&quot;%%1\&quot;&quot;</span> /f</span><br><span class="line"></span><br><span class="line">:: HKLM\SOFTWARE\Classes\Unreal.ProjectFile\shell\rungenproj</span><br><span class="line">reg ADD <span class="string">&quot;HKLM\Software\Classes\Unreal.ProjectFile\shell\rungenproj&quot;</span> /ve /d <span class="string">&quot;Generate Visual Studio project files&quot;</span> /f</span><br><span class="line">reg ADD <span class="string">&quot;HKLM\Software\Classes\Unreal.ProjectFile\shell\rungenproj&quot;</span> /v Icon /t REG_SZ /d <span class="string">&quot;\&quot;%LauncherPath%\&quot;&quot;</span> /f</span><br><span class="line">reg ADD <span class="string">&quot;HKLM\Software\Classes\Unreal.ProjectFile\shell\rungenproj\command&quot;</span> /ve /d <span class="string">&quot;\&quot;%LauncherPath%\&quot; /projectfiles \&quot;%%1\&quot;&quot;</span> /f</span><br><span class="line"></span><br><span class="line">:: HKLM\SOFTWARE\Classes\Unreal.ProjectFile\shell\switchversion</span><br><span class="line">reg ADD <span class="string">&quot;HKLM\Software\Classes\Unreal.ProjectFile\shell\switchversion&quot;</span> /ve /d <span class="string">&quot;Switch Unreal Engine version...&quot;</span> /f</span><br><span class="line">reg ADD <span class="string">&quot;HKLM\Software\Classes\Unreal.ProjectFile\shell\switchversion&quot;</span> /v Icon /t REG_SZ /d <span class="string">&quot;\&quot;%LauncherPath%\&quot;&quot;</span> /f</span><br><span class="line">reg ADD <span class="string">&quot;HKLM\Software\Classes\Unreal.ProjectFile\shell\switchversion\command&quot;</span> /ve /d <span class="string">&quot;\&quot;%LauncherPath%\&quot; /switchversion \&quot;%%1\&quot;&quot;</span> /f</span><br><span class="line"></span><br><span class="line">:Done</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> Done.</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line">goto TheEnd</span><br><span class="line"></span><br><span class="line">:CannotFindUnrealEngine</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> DOH! Can<span class="string">&#x27;t find the Unreal Engine.</span></span><br><span class="line"><span class="string">echo.</span></span><br><span class="line"><span class="string">goto TheEnd</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">:TheEnd</span></span><br><span class="line"><span class="string">pause</span></span><br></pre></td></tr></table></figure><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>将文件保存为<code>UnrealProjectMenuRegistration.cmd</code>到Epic Game根目录下(<code>Epic Games\Launcher\UnrealProjectMenuRegistration.cmd</code>)<br>右键点击以<code>管理员的身份运行</code>。如果有杀软拦截请选择允许<br>完成后尝试重启电脑/重启Epic Games Launcher完成关联操作</p>]]></content>
      
      
      
        <tags>
            
            <tag> Unreal </tag>
            
            <tag> 注册表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unreal学习笔记 - 综合</title>
      <link href="/posts/bc2e19a6/"/>
      <url>/posts/bc2e19a6/</url>
      
        <content type="html"><![CDATA[<h2 id="材质"><a href="#材质" class="headerlink" title="材质"></a>材质</h2><h3 id="通过绘制顶点贴图来让一个材质混合两种贴图"><a href="#通过绘制顶点贴图来让一个材质混合两种贴图" class="headerlink" title="通过绘制顶点贴图来让一个材质混合两种贴图"></a>通过绘制顶点贴图来让一个材质混合两种贴图</h3><p><strong>用于地面水潭。墙上青苔等等</strong></p><p>在材质中获取顶点颜色vertex color 。选中RBGA任意一数值将两种贴图（漫反射，法线，高光贴图）以插值的方式混合起来。连接到对应输出</p><p>然后在unreal编辑器中用画笔工具进行绘制（注意选择的颜色通道）</p><h2 id="蓝图"><a href="#蓝图" class="headerlink" title="蓝图"></a>蓝图</h2><p>蓝图是通过调用Unreal预先写好的API与基本C++语法以及内置标准宏指令将图形编译成c++语言的一种方式。简单易懂，不需要考虑复杂的内存操作而使得程序员能够专注于逻辑上的操作。<br>缺点：有些时候复杂的逻辑可能会导致蓝图的线路布的一团糟，减少可读性</p><h2 id="骨骼"><a href="#骨骼" class="headerlink" title="骨骼"></a>骨骼</h2><h2 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h2><h3 id="免费资源"><a href="#免费资源" class="headerlink" title="免费资源"></a>免费资源</h3><p>在<a href="https://www.mixamo.com/">mixamo</a>上可以下载到很多丰富的游戏动作与角色资源。更重要的是。这些资源都是免费的！你只需要申请一个免费的Adobe账号就能拥有它。</p><h3 id="使用blender-ridigy导出动画"><a href="#使用blender-ridigy导出动画" class="headerlink" title="使用blender+ridigy导出动画"></a>使用blender+ridigy导出动画</h3><p><strong>非常重要!</strong><br><a href="https://www.youtube.com/watch?v=jiXwDxCZtOc">https://www.youtube.com/watch?v=jiXwDxCZtOc</a><br>解决Blender与Unreal接合时的很多奇怪的问题</p><h3 id="动画偏移"><a href="#动画偏移" class="headerlink" title="动画偏移"></a>动画偏移</h3><p>动画偏移即在一个pose中根据一些参数混合多个pose。可以实现如角色转头。枪指向的目标和玩家想要指向的一致。一样的效果。</p><h3 id="混合空间"><a href="#混合空间" class="headerlink" title="混合空间"></a>混合空间</h3><h3 id="动画蒙太奇"><a href="#动画蒙太奇" class="headerlink" title="动画蒙太奇"></a>动画蒙太奇</h3><h3 id="根骨骼运动"><a href="#根骨骼运动" class="headerlink" title="根骨骼运动"></a>根骨骼运动</h3><h2 id="UMG"><a href="#UMG" class="headerlink" title="UMG"></a>UMG</h2><p>在原始stale UI架构上更新的一种UI方式。比之前的UI系统更为友好</p><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="事件复制"><a href="#事件复制" class="headerlink" title="事件复制"></a>事件复制</h3><p>Unreal 有三种RPC方式进行事件的网络调用</p><ul><li><code>多路传输</code>：已在位置为服务器。向客户端执行该流程</li><li><code>只在客户端运行</code>：已在位置为服务器。向所属客户端执行该流程</li><li><code>只在服务端运行</code>：已在位置为客户端，想所属服务端执行该流程</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Unreal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MMD静画渲染2</title>
      <link href="/posts/7e9cc815/"/>
      <url>/posts/7e9cc815/</url>
      
        <content type="html"><![CDATA[<p>想了想还是不要一直在一个文章里更新会不会比较好？<br><em>(:зゝ∠)</em><br><img src="/images/mmd/006.jpg"></p><h2 id="waiting-girl"><a href="#waiting-girl" class="headerlink" title="waiting girl"></a>waiting girl</h2><p><img src="/images/mmd/007.jpg"></p><h2 id="极乐净土"><a href="#极乐净土" class="headerlink" title="极乐净土"></a>极乐净土</h2><p><img src="/images/mmd/008.jpg"></p><h2 id="祈祷"><a href="#祈祷" class="headerlink" title="祈祷"></a>祈祷</h2><p><img src="/images/mmd/009.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> MMD </tag>
            
            <tag> 渲染 </tag>
            
            <tag> 壁纸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ionic——使用本地代理服务器解决http跨域问题</title>
      <link href="/posts/d0f79e7e/"/>
      <url>/posts/d0f79e7e/</url>
      
        <content type="html"><![CDATA[<p>在ionic开发中我们常常会遇到http请求相关问题。在设备中我们常用的方法是使用白名单插件<code>cordova-plugin-whitelist</code>。通过在<code>config.xml</code>中配置<code>&lt;access origin=&quot;*&quot;/&gt;</code>参数来对http请求进行本地化而解决跨域问题。但是我们在实际开发中我们经常使用<code>ionic serve</code>或<code>ionic run ios -l -c -s</code>来进行调试工作。使用白名单插件无法正常运行。这里就要使用代理服务器了。</p><h1 id="什么是代理服务器"><a href="#什么是代理服务器" class="headerlink" title="什么是代理服务器"></a>什么是代理服务器</h1><p>代理服务器就是一个将http请求进行中转的服务器。以代理服务器的名义去访问远程服务器。而<code>ionic CLI</code>就提供了一个本地的代理服务器来解决<code>$http</code>跨域的问题</p><h1 id="如何使用代理服务器"><a href="#如何使用代理服务器" class="headerlink" title="如何使用代理服务器"></a>如何使用代理服务器</h1><p>在项目根目录下找到文件<code>ionic.config.json</code>添加<code>proxies</code>字段。如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;app_id&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;proxies&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/api&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;proxyUrl&quot;</span>: <span class="string">&quot;http://api.yourdomain.com&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使代理服务器监控<code>path</code>字段的http请求。将相应请求通过代理服务器中转发送到<code>proxyUrl</code>字段的地址上</p><p>当你访问<code>/api</code>的时候。实际上是发送到<code>http://api.yourdomain.com</code>。如请求<code>/api/data.json</code>。实际上请求的是远程服务器<code>http://api.yourdomain.com/data.json</code>的数据。在项目目录中<code>api文件夹</code>其实不存在</p><p>同时代理服务器能设置多个以满足不同的需求</p><h1 id="定义常量方便切换开发环境与发布环境"><a href="#定义常量方便切换开发环境与发布环境" class="headerlink" title="定义常量方便切换开发环境与发布环境"></a>定义常量方便切换开发环境与发布环境</h1><p>代理服务器的使用仅在<code>ionic CLI</code>环境在才能工作。在真机下实际上是会真的访问<code>/api</code>目录导致<code>404错误</code>的。为了解决问题需要设置全局常量以方便不同环境下的切换。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.constant(<span class="string">&#x27;ApiServer&#x27;</span>, <span class="string">&#x27;/api&#x27;</span>)</span><br><span class="line"><span class="comment">//.constant(&#x27;ApiServer&#x27;, &#x27;http://api.yourdomain.com&#x27;)</span></span><br></pre></td></tr></table></figure><p>使用如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.controller(<span class="string">&#x27;test&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope, ApiServer</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> url = ApiServer + <span class="string">&quot;/data.json&quot;</span></span><br><span class="line">$http.get(url)</span><br><span class="line">  .success(<span class="function"><span class="keyword">function</span>(<span class="params">data,status,headers,config</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;).error(<span class="function"><span class="keyword">function</span>(<span class="params">data,status,headers,config</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(status);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ionic </tag>
            
            <tag> http </tag>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MMD静画渲染</title>
      <link href="/posts/22ded819/"/>
      <url>/posts/22ded819/</url>
      
        <content type="html"><![CDATA[<p>最近花了几天时间去入了一下MMD的大坑。想着渲染几张静画来当一下桌面的壁纸。不过裙子什么的真是太难弄了。物理引擎有点坑。<br><img src="/images/mmd/001.jpg"><br><img src="/images/mmd/001-2.jpg"></p><h2 id="第二弹"><a href="#第二弹" class="headerlink" title="第二弹"></a>第二弹</h2><p>纯黑背景下的微笑miku<br><img src="/images/mmd/002.jpg"></p><h2 id="第三弹"><a href="#第三弹" class="headerlink" title="第三弹"></a>第三弹</h2><p>天台miku<br><img src="/images/mmd/003.jpg"></p><h2 id="第四弹"><a href="#第四弹" class="headerlink" title="第四弹"></a>第四弹</h2><p>黄昏下的教室之新房45°<br><img src="/images/mmd/004.jpg"></p><h2 id="第五弹"><a href="#第五弹" class="headerlink" title="第五弹"></a>第五弹</h2><p>星夜下的爱蜜莉雅<br><img src="/images/mmd/005.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> MMD </tag>
            
            <tag> 渲染 </tag>
            
            <tag> 壁纸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络不好怎么办？通过分析找出原因</title>
      <link href="/posts/b97c82c9/"/>
      <url>/posts/b97c82c9/</url>
      
        <content type="html"><![CDATA[<p>我们经常会遇到这样那样的网络问题。比如游戏玩着玩着卡死了。游戏丢包。网速上不去等等。可能的原因多种多样。我们要通过一些科学的分析找出原因，才能对症下药。</p><p>【可能原因一：电脑&lt;—&gt;路由器】<br>这种情况其实并不少见。其根本原因是在于网络传输的可靠性低。可能的原因的有很多。比如网卡、网线、路由器过热、路由器老化等等。如何检测？按下win+r输入cmd打开命令行。输入<code>ipconfig</code>找到我们使用的网卡。比如：<br><img src="/images/common/%E7%BD%91%E7%BB%9C/002.png"><br>找到网关比如我的网关设置是<code>192.168.1.1</code>。那么在命令行中输入命令<code>ping 192.168.1.1 -t</code>对我们的网关进行<code>ping</code>。具体地址视自己情况而定。后面跟上<code>-t</code>表示无限期。也就是一直<code>ping</code>下去。观察返回结果。如果出现如下情况:<br><img src="/images/common/%E7%BD%91%E7%BB%9C/001.png"><br>在一堆低延时中出现一个高延时。甚至超时。那么就是电脑到路由器之间发生了问题。可能的解决方案如下</p><ul><li>重启电脑</li><li>重启路由</li><li>换个路由器</li><li>换个网卡</li></ul><p>PS：按下 <code>Ctrl+C</code> 结束ping</p><p>如果出现一直是高延时甚至是超时，那么就是长期不稳定。可能的解决方案如下：</p><ul><li>关闭电脑一段时间</li><li>关闭路由一段时间</li><li>更换网线(如为无线可以视信号情况尝试使用无线信号放大器)</li><li>更换路由</li><li>更换网卡</li></ul><p>【可能原因二：路由器&lt;—&gt;运营商】<br>最常见的问题。个人的电脑虽然很卡。但是其实路由器到运营商的线路其实已经满负荷了。说明可能是有陌生人连入了wifi。或者有舍友或者同事占用了网速。唯一的方法是进入路由器的后台界面。查看各个用户的使用情况。把不认识的人的mac地址屏蔽。<br>相信大家都知道这些方法。网络上也有很多。在此不加赘述。</p><p>【可能原因三：运营商&lt;—&gt;因特网】<br>这种情况多出现在铁通，长宽等二级运营商。这些运营商是从电信、网通等一级运营商购买了他们的带宽，然后再经过一定的分流与调整。下放到普通用户中。其特点是价格便宜，网络不稳定。偶尔还会出现网页无法访问，DNS劫持等情况。这些是用户个人无法解决的。唯一的方法就是上网时段避开高峰期，网络情况就会有所改良。<br>所以建议不要贪便宜购买二级运营商的网络服务</p><p>【可能原因四：因特网&lt;—&gt;服务器】<br>如果出现其他都正常，就一个不正常。那么很可能是远程服务器出现了故障。比如用户量太大，被黑客攻击，服务器瘫痪、维护、关闭等等。当然也有可能是DNS解析出错。查查自己的<code>HOSTS文件</code>。看看有没有奇怪的东西。如果有，删掉或在前面加<code>#</code>号注释掉<br>HOSTS文件路径:<code>C:\windows\system32\drivers\etc</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> 常用技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity物理碰撞</title>
      <link href="/posts/8efd96c8/"/>
      <url>/posts/8efd96c8/</url>
      
        <content type="html"><![CDATA[<p>unity物理碰撞大致能分为两大类：碰撞与触发。其碰撞具体属性由物体上的碰撞器组件（Collider）决定。而物体的物理性质由物体上的刚体组件（Rigidbody）决定。为使两个物体满足碰撞/触发条件。必须满足如下条件：</p><ul><li>两个物体所在的层（Layer）为可相互碰撞的两个层</li><li>两个物体都必须有碰撞器组件</li><li>两个物体中至少有一个物体拥有刚体组件</li></ul><p>满足如上条件方可使物体产生碰撞事件</p><p>碰撞与触发不同。碰撞会阻碍物体运动而触发不会。其区别由碰撞器组件上Is Trigger标识区别<br>碰撞函数：<br>OnCollisionEnter/OnCollisionExit/OnCollisionStay<br>触发函数：<br>OnTriggerEnter/OnTriggerExit/OnTriggerStay</p>]]></content>
      
      
      
        <tags>
            
            <tag> 游戏开发 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>总结一些好用的ios第三方库</title>
      <link href="/posts/39072aba/"/>
      <url>/posts/39072aba/</url>
      
        <content type="html"><![CDATA[<p>进行ios开发有一段时间了，也真实使用了一些好用的第三方库。这里开始进行一些总结。也算为后来者提供一个方向</p><p><strong>AFNetworking</strong></p><blockquote><p>进行基于webservice开发的必备互联网套件，然而其实我就没用。个人喜欢比较轻量级一点的东西。相对其他第三方库来说有些重了<br><a href="https://github.com/AFNetworking/AFNetworking">github</a><br><a href="https://cocoapods.org/pods/AFNetworking">cocoapods</a></p></blockquote><p><strong>SDWebImage</strong></p><blockquote><p>好用的网络图片加载工具。一行代码解决异步懒加载图片与本地缓存<br><a href="https://github.com/rs/SDWebImage">github</a><br><a href="https://cocoapods.org/pods/SDWebImage">cocoapods</a></p></blockquote><p><strong>MJRefresh</strong></p><blockquote><p>一个国人自产的ios下拉刷新与上拉加载的库，支持纯文字，静态图片与gif动图<br><a href="https://github.com/CoderMJLee/MJRefresh">github</a><br><a href="https://cocoapods.org/pods/MJRefresh">cocoapods</a></p></blockquote><p><strong>SwiftyJSON</strong></p><blockquote><p>Swift原生JSON解析库。感觉一般。但是是Swift的，所以我用了<br><a href="https://github.com/SwiftyJSON/SwiftyJSON">github</a><br><a href="https://cocoapods.org/pods/SwiftyJSON">cocoapods</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ios </tag>
            
            <tag> pod </tag>
            
            <tag> cocoapods </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS编程——让NSURL认识特殊字符</title>
      <link href="/posts/61ce6e4d/"/>
      <url>/posts/61ce6e4d/</url>
      
        <content type="html"><![CDATA[<p>正如我之前所说。其实<code>NSURL(string:String)</code>这个用法对于输入参数的字符串验证是很蠢的。因为他有自己的一套判定机制。比如在Github API编程中使用如下网址：</p><blockquote><p><a href="https://api.github.com/search/repositories?sort=stars&amp;order=desc&amp;q=stars:&gt;500">https://api.github.com/search/repositories?sort=stars&amp;order=desc&amp;q=stars:&gt;500</a></p></blockquote><p>NSURL就不认识。因为在他的q字段中有一个特殊字符<code>&gt;</code>。如果将这段网址直接输入浏览器是毫无问题的。然而NSURL不认。<br>因为NSURL使用的是web服务最底层的API判定。事实上最基础的浏览器也是无法直接输入这段网址的。因为这是个不合法的网址。之所以我们能在浏览器直接使用是因为浏览器本身对输入的网址进行了转译的操作。这个操作是不可见的。因此解决方案也是让iOS在处理这段带有特殊字符的网址进行转译操作。解决方案如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">&quot;https://api.github.com/search/repositories?sort=stars&amp;order=desc&amp;q=stars:&gt;500&quot;</span></span><br><span class="line"><span class="keyword">let</span> _url = <span class="type">NSURL</span>(string:url.stringByAddingPercentEscapesUsingEncoding(<span class="type">NSUTF8StringEncoding</span>)!)</span><br></pre></td></tr></table></figure><p>通过<code>stringByAddingPercentEscapesUsingEncoding</code>方法将网址转译。成功通过编译。</p><p>转译后的网址：</p><blockquote><p><a href="https://api.github.com/search/repositories?sort=stars&amp;order=desc&amp;q=stars:%3E500">https://api.github.com/search/repositories?sort=stars&amp;order=desc&amp;q=stars:%3E500</a></p></blockquote><p>输入浏览器后会发现和原来的一样。地址栏自动将<code>%3E</code>转译成<code>&gt;</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> NSURL </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>任务栏快速启动真实地址</title>
      <link href="/posts/5d2107c5/"/>
      <url>/posts/5d2107c5/</url>
      
        <content type="html"><![CDATA[<p>最近被流氓软件劫持了浏览器主页。打开chrome后会自动跳转到hao360上。真实原因是快捷方式启动时被加入了网站地址的参数。只要删除了就好了。然而桌面上的快捷方式很好修改。但是任务栏中的快速启动栏的快捷方式怎么也不好修改。取消固定重新弄也没办法消除。因此在多番查询后终于找到了其真实地址</p><p>任务栏快速启动文件真实地址：<br>当前用户文件夹下的<br><code>\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> 网站劫持 </tag>
            
            <tag> 快捷方式 </tag>
            
            <tag> hao360 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS编程时需要注意的一些问题</title>
      <link href="/posts/47ac9736/"/>
      <url>/posts/47ac9736/</url>
      
        <content type="html"><![CDATA[<ul><li><strong>异步编程</strong><br>很多时候我们需要异步获取数据然后在用户界面上实时的反应异步获取到的数据。如果发现会卡。不能马上将界面上的数据修改。不妨试试强制将代码在主线程中执行。因为异步代码的执行线程和界面绘制的主线程是两个独立的线程<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dispatch_sync(dispatch_get_main_queue()) &#123; </span><br><span class="line">    <span class="comment">//code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国际化标准时间格式</title>
      <link href="/posts/bb904004/"/>
      <url>/posts/bb904004/</url>
      
        <content type="html"><![CDATA[<table border="0" cellpadding="0" cellspacing="3"><tbody><tr><th> Letter </th><th> Date or Time Component </th><th> Presentation </th><th> Examples </th></tr><tr><td> G </td><td> Era designator </td><td> Text </td><td> AD </td></tr><tr><td> y </td><td> Year </td><td> Year </td><td> 1996;96 </td></tr><tr><td> M </td><td> Month in year </td><td> Month </td><td> July;Jul;07 </td></tr><tr><td> w </td><td> Week in year </td><td> Number </td><td> 27 </td></tr><tr><td> W </td><td> Week in month </td><td> Number </td><td> 2 </td></tr><tr><td> D </td><td> Day in year </td><td> Number </td><td> 189 </td></tr><tr><td> d </td><td> Day in month </td><td> Number </td><td> 10 </td></tr><tr><td> F </td><td> Day of week in month </td><td> Number </td><td> 2 </td></tr><tr><td> E </td><td> Day in week </td><td> Text </td><td> Tuesday;Tue </td></tr><tr><td> a </td><td> Am/pm marker </td><td> Text </td><td> PM </td></tr><tr><td> H </td><td> Hour in day (0-23) </td><td> Number </td><td> 0 </td></tr><tr><td> k </td><td> Hour in day (1-24) </td><td> Number </td><td> 24 </td></tr><tr><td> K </td><td> Hour in am/pm (0-11) </td><td> Number </td><td> 0 </td></tr><tr><td> h </td><td> Hour in am/pm (1-12) </td><td> Number </td><td> 12 </td></tr><tr><td> m </td><td> Minute in hour </td><td> Number </td><td> 30 </td></tr><tr><td> s </td><td> Second in minute </td><td> Number </td><td> 55 </td></tr><tr><td> S </td><td> Millisecond </td><td> Number </td><td> 978 </td></tr><tr><td> z </td><td> Time zone </td><td> General time zone </td><td> Pacific Standard Time;PST;GMT-08:00 </td></tr><tr><td> Z </td><td> Time zone </td><td> RFC 822 time zone </td><td> -0800 </td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> GMT </tag>
            
            <tag> 时间格式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac中的字符中英文问题</title>
      <link href="/posts/862a051d/"/>
      <url>/posts/862a051d/</url>
      
        <content type="html"><![CDATA[<p>NSURL 是 OC 或 Swift编程中对http网络通信很常见的一个方法。常用的方法是<code>NSURL(string: &quot;http://.../&quot;)</code><br>在这里要注意一点。string的参数中不能有中文字符。否则会报错。</p><blockquote><p>fatal error: unexpectedly found nil while unwrapping an Optional value</p></blockquote><p>需要注意的是。在mac中，和windows不同的是，有很多windows中英文通用的字符在mac中并不通用。比如在Mac中中文的<code>=</code>与英文的<code>=</code>并不等价。这点可以在Mac中打开记事本在两个输入法中切换一下输入试试。以及其他的很多字符都会出现这种问题。而两者的差别非常大。又因为输入的是字符串。编译器并不会提示这种问题。因此当编写OC或Swift的时候出现这种摸不着头脑的事情。不放重新输入一遍试试。或许会有意外的收获</p>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> NSURL </tag>
            
            <tag> objective-c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Unity跑酷模板Endless Run中shader报错的问题</title>
      <link href="/posts/49910e89/"/>
      <url>/posts/49910e89/</url>
      
        <content type="html"><![CDATA[<p>对于shader问题。很多处于中低级的Unity开发者都束手无策。在使用Endless Run模板项目的时候会出现报错：<br><code>Shader error in &#39;Custom/Curved&#39;: variable &#39;o&#39; used without having been completely initialized at line 42 (on d3d9)</code></p><p>这个问题是说返回的<code>参数o</code>不完整。解决方案如下：<br>打开<code>/Assets/Endless Run/Curved.shader</code>文件。找到<code>v2f vert (appdata_full v)&#123;&#125;</code>函数。在返回<code>变量o</code>之前进行参数补全。添加如下两行代码：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">o.viewDir = v.texcoord1;</span><br><span class="line">o.color = v.color;</span><br></pre></td></tr></table></figure><p>自此你的项目就能够正常运行了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 游戏开发 </tag>
            
            <tag> Unity </tag>
            
            <tag> Shader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cocos2dx学习笔记——lambda表达式的引用捕获</title>
      <link href="/posts/49add7c0/"/>
      <url>/posts/49add7c0/</url>
      
        <content type="html"><![CDATA[<p>lambda表达式:<br><code>[capture] (params) &#123;body&#125;</code></p><p>lambda表达式是一种cpp的匿名闭包函数。为了使body中的逻辑与外界数据进行交互。我们需要用<code>[capture]</code>来捕获外界数据。如使用<code>[a,b]</code>来捕获外界的变量a，b。<br>默认的捕获当lambda表达式建立时变量a，b的副本。也就是所谓的<strong>以值的方式被捕获</strong>。在body中修改a，b不会影响到外界的数据(参考函数与调用函数的关系)。但是为了实现某些目的：比如计数。我们需要在body中修改外部的变量。那么我们就需要<strong>以引用的方式捕获</strong>外部变量。有两种写法：<br>1.以引用的方式捕获所有的外部自动变量。<br>适用范围：<strong>对整个类进行操作</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[&amp;]()&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;b = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.以引用的方式捕获某个值<br>适用范围：<strong>进行小范围的计数等不需要被其他方法引用的变量</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>* a;<span class="comment">//必须是指针才能被正常的引用</span></span><br><span class="line">[&amp;a]()&#123;</span><br><span class="line">*a = <span class="number">2</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> cocos2dx </tag>
            
            <tag> 游戏开发 </tag>
            
            <tag> c++ </tag>
            
            <tag> lambda表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cocos2dx学习笔记——Ref对象管理之保留与释放</title>
      <link href="/posts/922ef0f9/"/>
      <url>/posts/922ef0f9/</url>
      
        <content type="html"><![CDATA[<p>在Cocos中，我们一切的智能类都继承于Ref引用类。方便内存的优化与管理。这是推荐的自定义类方法。<br>而推荐的创建（对象实例化）方法是在头文件中使用<code>CREATE_FUNC(__TYPE__)</code>方法来创建。创建的时候需要配上一个自定义init()来对类数据进行初始化。</p><p>这里需要注意一点。那就是对象的自动释放:<br><code>pRet-&gt;autorelease();</code><br>cocos在<code>CREATE_FUNC</code>宏中配置自动释放的机制。这个方法使得内存的管理变得很方便。因为很多时候一些数据只需要调用一次。<br>我们来看看<code>autorelease()</code>方法的说明：</p><blockquote><p>Ref *  autorelease ()<br>  在下一帧自动释放 Ref 对象的所有权。  </p></blockquote><p>那么如果当我们需要让这个类能够长久的存在下去、比如全局管理类。那么这个方法就会很明显的影响到代码的逻辑实现。因为在下一帧以后数据都被自动释放掉了。如果我们还想访问的话就会报错。因为此时地址都指向<code>0xfeeefeee</code>（该指针指向的对象已经被释放，地址就会指向<code>0xfeeefeee</code>）。</p><p>解决方案：<strong>在该对象初始化的时候接管对象的所有权。即保留该对象不让它被自动释放。</strong></p><p>如在init()函数中声明：<code>this-&gt;retain();</code><br>当需要释放的时候手动释放：<code>this-&gt;this-&gt;retain();</code></p><p>我们来看一下这两个方法的说明</p><blockquote><p>void  retain ()<br>保留 Ref 对象的所有权。 会将 Ref 对象的引用计数 +1。 </p></blockquote><blockquote><p>void  release ()<br>释放 Ref 对象的所有权。 会将 Ref 对象的引用计数 -1 </p></blockquote><p>注意：多层对象需要每个都进行保留处理。<br>比如如下结构：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span> <span class="keyword">public</span> Ref&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Ref* a;</span><br><span class="line">Ref* b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在一个Test中存了a,b两个对象的地址。那么我们对内存进行管理的时候需要把每个都进行retain()方法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>-&gt;retain();</span><br><span class="line">a-&gt;retain();</span><br><span class="line">b-&gt;retain();</span><br></pre></td></tr></table></figure><p>如果仅仅执行<code>this-&gt;retain();</code>操作。那么只会保留a,b两个对象的引用不被释放。而a和b里面可以被自动释放的引用都会被自动释放。<br>为什么要这么做？如果一个<code>Node* node</code>对象没有立刻（这一帧）中被addChild。那么在下一帧以后进行addChild就会失败因为addChild会判定该对象的父节点是否为空。如果不为空则不能被添加。在代码中的判定是node-&gt;_parent == nullptr。即node-&gt;_parent地址是否为0,而我们都知道释放后的地址会指向<code>0xfeeefeee</code>。因此会出现bug。</p>]]></content>
      
      
      
        <tags>
            
            <tag> cocos2dx </tag>
            
            <tag> 游戏开发 </tag>
            
            <tag> Ref </tag>
            
            <tag> autorelease </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cocos2dx学习笔记——编译器提示LINK1104无法打开文件“libcocos2d_2013.lib”的问题</title>
      <link href="/posts/664de550/"/>
      <url>/posts/664de550/</url>
      
        <content type="html"><![CDATA[<p>在编译项目的时候可能会出现这样的错误：</p><blockquote><p>LINK1104无法打开文件“libcocos2d_2013.lib”</p></blockquote><p>这是因为VS无法找到这个库的原因。<br>解决方案有两个：</p><ul><li><p>如果你的项目是带有完整源代码的版本，找到main.cpp文件。找到一段代码，删掉：</p><blockquote><p>#if _MSC_VER &gt; 1800<br>#pragma comment(lib,”libcocos2d_2015.lib”)<br>#pragma comment(lib,”libbox2d_2015.lib”)<br>#pragma comment(lib,”libSpine_2015.lib”)<br>#pragma comment(lib,”librecast_2015.lib”)<br>#pragma comment(lib,”libbullet_2015.lib”)<br>#else<br>#pragma comment(lib,”libcocos2d_2013.lib”)<br>#pragma comment(lib,”libbox2d_2013.lib”)<br>#pragma comment(lib,”libSpine_2013.lib”)<br>#pragma comment(lib,”librecast_2013.lib”)<br>#pragma comment(lib,”libbullet_2013.lib”)<br>#endif</p></blockquote><p>  这是VS请求连接原始版本cocos应对不同版本的预编译vs依赖库。在源代码版本的项目中是没有这些文件的。在第一次生成的时候会生成对应vs的库文件。</p></li><li><p>如果你的项目是预编译版本的项目工程文件。则右键项目—–&gt;属性—-&gt;链接器——&gt;常规 ——-&gt; 附加库目录。添加原始cocos文件已经编译好的预编译库文件路径到新的一行。如果不知道文件的目录可以直接用windows自带的文件名搜索<code>libcocos2d_2013.lib</code>文件。其他同理</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> cocos2dx </tag>
            
            <tag> 游戏开发 </tag>
            
            <tag> LINK1104 </tag>
            
            <tag> libcocos2d_2013.lib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何获取TexturePacker 1年免费软件授权</title>
      <link href="/posts/e80f349e/"/>
      <url>/posts/e80f349e/</url>
      
        <content type="html"><![CDATA[<p>怎么说呢。非常感谢<a href="https://www.codeandweb.com/texturepacker">TexturePacker</a>以及Andreas Loew提供的免费1年授权。为我们这些独立游戏开发者提供了方便。<br><a href="https://www.codeandweb.com/texturepacker">TexturePacker</a>是一款非常好用的图集打包程序。能够将多个零散的图片打包成一个大图来使用。降低了游戏图形渲染的效率。支持多种格式的输出。在游戏开发特别是cocos2d引擎的开发中收到了广泛的应用。</p><p>现在记录一下申请1年免费授权的过程：<br>首先需要满足如下条件：</p><blockquote><p>Bloggers and framework developers can get a free 1-year-license for my tools.</p></blockquote><blockquote><p>My requirements to you are:</p></blockquote><blockquote><ul><li>You write your own blog about game/software/web development</li></ul></blockquote><ul><li>Your blog has<ul><li>10 recent blog posts (2015/2016) about game / web development</li><li>at least 1000 words/post</li><li>own content, no copy / scraping from other blogs</li></ul></li><li>No Facebook, no Twitter, no Weibo — except you have 10.000 followers</li></ul><blockquote><p>I would be happy if you do a small blog post about my tools in return - but this is not a requirement.</p></blockquote><ul><li>拥有一个关于游戏/网页开发的博客。博客的内容不得少于10篇（近两年），至少有1000+字，完全原创的博文。</li><li>这个博客不能是facebook、Twitter、微博除非有10000以上关注。</li></ul><p>满足以上条件即可申请免费的1年授权。申请的网站如下<br><a href="https://www.codeandweb.com/request-free-license">https://www.codeandweb.com/request-free-license</a></p><p>按照表单填入相关信息以后静等一天（因为有时区的关系不可能马上回复），不建议使用qq邮箱因为在国外的支持并不好（我使用的是hotmail）。当然此时会收到自动回复的邮件。内容如下：</p><blockquote><p>You signed up for the newsletter on <a href="http://www.codeandweb.com/">www.codeandweb.com</a>. The newsletter contains: Getting started with the free blogger license for TexturePacker, SpriteIlluminator and PhysicsEditor..<br>Please ignore this mail if you did not signup for the newsletter. You only receive the newsletter if you confirm the subscription by clicking on the button below.<br>You can unsubscribe from receiving mails at any time.<br>Best<br>Andreas</p></blockquote><p>过了一段时间会收到如下邮件：</p><blockquote><p>Hi ####,<br>you’ve requested a license for TexturePacker.<br>Congratulations: Your blog qualifies for a free license!<br>Please verify that this is really your blog by adding the following code somewhere on the blog page.<br>TP:#####<br>You can remove the code in about 1-4 days. Click on the button below after you’ve added the code.<br>Best<br>Andreas</p></blockquote><p>他需要你在你的博客上添加一段字符串来表示你是这个博客的主人。添加完后按下他给的链接更新你的数据。<br>注意：建议将代码添加到网页的首页。如底部栏之类的。否则别人不一定马上能知道。我就放在了别的地方结果第二天TexturePacker用繁体中文翻译了一遍又发了一遍邮件=-=</p><p>末了，会收到邮件：</p><blockquote><p>Hi ####,<br>you requested a license for TexturePacker:<br>TexturePacker: TP-####-####-####-####<br>Have fun with the license. I would be happy if you would write blog post about my tools in return.<br>Please let me know if you write a tutorial or review - we might link back from our tutorials page.<br>Kind regards Andreas Loew</p></blockquote><p>恭喜你成功收到TexturePacker的序列号了。尽情享用它吧！</p>]]></content>
      
      
      
        <tags>
            
            <tag> TexturePacker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cocos2dx学习笔记——节点与层的父子坐标区别</title>
      <link href="/posts/d0d3ce00/"/>
      <url>/posts/d0d3ce00/</url>
      
        <content type="html"><![CDATA[<p>在cocos2d中，我们一切ui的基础——节点的坐标系起始坐标依赖于父节点的坐标。当我们在一个node对象中使用addChild方法后，子节点的坐标是依赖于父节点。<br>也就是说如下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> parent = Node::create();</span><br><span class="line">parent-&gt;setPosition(Vec2(<span class="number">10</span>,<span class="number">20</span>));</span><br><span class="line">addChild(parent);</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> child = Node::create();</span><br><span class="line">child-&gt;setPosition(Vec2(<span class="number">5</span>,<span class="number">10</span>));</span><br><span class="line">parent-&gt;addChild(child);</span><br></pre></td></tr></table></figure><p>child个人坐标系的位置是(5,10),然而因为是parent的子节点。所以child的世界坐标系位置应该加上父节点的坐标，也就是(5+10,10+20)。<br>通过这个原理我们就能很方便的控制子节点与父节点的坐标关系。</p><p>而其中layer和一般的节点不同。虽然layer继承于node，可以成为另一个node的子节点，但是当layer成为一个node的子节点后。其坐标起始点并不会改变。因为在源码中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Layer::init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Director * director = Director::getInstance();</span><br><span class="line">    setContentSize(director-&gt;getWinSize());</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>规定了layer必须占满屏幕。所以不管父节点的坐标。layer必定占满整个屏幕。因此想通过父节点的坐标来控制子layer的坐标是办不到的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> cocos2dx </tag>
            
            <tag> 父子关系 </tag>
            
            <tag> 游戏开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cocos2dx学习笔记——CCLog无法使用的问题</title>
      <link href="/posts/a79c8a43/"/>
      <url>/posts/a79c8a43/</url>
      
        <content type="html"><![CDATA[<p>在cocos2dx中我们拥有多种调试输出日志的方法：</p><ul><li>CCLog</li><li>CCLOG</li><li>log<br>然而在实际使用中会报错，如：</li></ul><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">错误<span class="number">46</span><span class="built_in">error</span> <span class="name">LNK2019</span>: 无法解析的外部符号 <span class="string">&quot;__declspec(dllimport) void __cdecl cocos2d::CCLog(char const *,...)&quot;</span> (__imp_?CCLog@cocos2d@@YAXPBDZZ)，该符号在函数 <span class="string">&quot;public: bool __thiscall XMLParser::initWithFile(char const *)&quot;</span> (?initWithFile@XMLParser@@QAE_NPBD@Z) 中被引用<span class="name">G</span>:\Study\Cocos\gfxz\proj.win32\XMLParser.obj</span><br></pre></td></tr></table></figure><p>我们来看一下为什么。<br>首先CCLOG是一个宏指令。定义如下：<br><code>#define CCLOG(format, ...)      cocos2d::log(format, ##__VA_ARGS__)</code><br><strong>也就是说CCLOG与log等价。</strong></p><p>而CCLog是一个独立的函数。在CCDeprecated.h中可以看到：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** use log() instead */</span></span><br><span class="line"><span class="function">CC_DEPRECATED_ATTRIBUTE <span class="keyword">void</span> CC_DLL <span class="title">CCLog</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * pszFormat, ...)</span> <span class="title">CC_FORMAT_PRINTF</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>Cocos在注释中已经声明了<strong>使用log命令来代替</strong>使用。</p><p>我们来研究一下这条命令。<br><code>CC_DEPRECATED_ATTRIBUTE</code>是一条宏语句。他的定义如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__GNUC__) &amp;&amp; ((__GNUC__ &gt;= 4) || ((__GNUC__ == 3) &amp;&amp; (__GNUC_MINOR__ &gt;= 1)))</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> CC_DEPRECATED_ATTRIBUTE __attribute__((deprecated))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> _MSC_VER &gt;= 1400 <span class="comment">//vs 2005 or higher</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> CC_DEPRECATED_ATTRIBUTE __declspec(deprecated) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> CC_DEPRECATED_ATTRIBUTE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> </span></span><br></pre></td></tr></table></figure><p>在vs2005以上版本使用<code>__declspec</code>约定方式调用后面的函数。</p><blockquote><p>__declspec主要是用于说明DLL的引出函数的,在某些情况下用__declspec(dllexport)在DLL中生命引出函数,比用传统的DEF文件方便一些.在普通程序中也可以用__declspec(dllimport)说明函数是位于另一个DLL中的导出函数。</p></blockquote><p>显示声明该函数是在另一个dll中而新版本cocos默认不引入该dll（被否定）因此会报错<code>LNK2019</code>。该错误常见于没有在项目中引入相关的dll。解决方案是引入相关dll或直接引入完整的源码文件（不建议）。</p><p>建议的解决方案：在新版cocos2d中使用log指令代替CCLog指令</p>]]></content>
      
      
      
        <tags>
            
            <tag> cocos2dx </tag>
            
            <tag> 游戏开发 </tag>
            
            <tag> CCLog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新型钓鱼网站骗术</title>
      <link href="/posts/900c706f/"/>
      <url>/posts/900c706f/</url>
      
        <content type="html"><![CDATA[<p>今天玩儿游戏。又日常看见钓鱼网站。打进去研究了一下。差点吓坏我。这个钓鱼网站做的厉害。现在我就来揭露一下这种钓鱼网站的原理。<br>首先这种网站是一个仿照正规官网域名的假域名。比如QQ写为OO。不注意的话很容易上当，界面直接复制官网的css然后修改敏感信息比如登陆框。然后要求你登陆。通过获取你登陆时候的输入传输表单到他们服务器的后台数据库中进行记录。然后返回一个成功登陆的响应。当然为了让用户能自主登陆会伪造一些虚假信息比如抽奖啊领福利啊之类的<br>当然这不是我今天要说的内容。因为以上的只是传统的骗术。有一定上网经验的人都能发现，并不上当，所以这种方法的成功率并不高。<br>今天我发现一种新的网站。他们不抄袭界面。而是使用了<code>frame框架</code>。什么是<code>frame框架</code>？就是在这个frame中相当于一个独立的浏览器窗口。一切的点击、跳转行为都在这个frame中而不会刷新网页。简单的说。进行跳转不会影响外部的界面。在frame中点击链接并不会改变整个窗口的url指向。那么当这个frame指向了一个游戏的官网呢？<br>这是一个社会工程学上的问题。当你看到一个网页上已经登陆，显示的是正确的个人信息的时候。你潜意识的会认为这是一个正常的网页，而非钓鱼网站。因为钓鱼网站是无法直接获取你的个人信息的。<br>那么问题来了。假如这个frame的连接指向的是一个正规的网站呢？当你通过这个网站发送的信息呢？数据会传到哪里？答案是钓鱼网站。因为js传输表单的时候默认的相对路径是浏览器窗口url为标准的。在frame中的操作是正规的，也的确是正常的官方网站。但是数据却是传到钓鱼网站的。<br>就算我一开始知道是钓鱼网站。我都差点上当。何况是普通用户。可见这种钓鱼方式的可怕。希望网民在上网浏览的时候能够保持一定的警戒心。不要随意打开陌生网站。</p><p>该网站链接：<a href="http://qq.mhoap.com/">http://qq.mhoap.com/</a>(请注意这个不是一个正规的网站，也随时可能失效。一切敏感操作请不要通过该网站的连接进行)</p>]]></content>
      
      
      
        <tags>
            
            <tag> 钓鱼网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cocos2dx学习笔记——C++的一些约定</title>
      <link href="/posts/74057083/"/>
      <url>/posts/74057083/</url>
      
        <content type="html"><![CDATA[<p>关于C++使用的时候，为了防止出现头文件相互嵌套的问题，有两点原则：</p><blockquote><p>第一个原则应该是，如果<strong>可以不包含头文件，那就不要包含了。这时候前置声明可以解决问题</strong>。如果使用的仅仅是一个类的指针，没有使用这个类的具体对象（非指针），也没有访问到类的具体成员，那么前置声明就可以了。因为指针这一数据类型的大小是特定的，编译器可以获知。</p><p>第二个原则应该是，<strong>尽量在CPP文件中包含头文件，而非在头文件中</strong>。假设类A的一个成员是是一个指向类B的指针，在类A的头文件中使用了类B的前置声明并便宜成功，那么在A的实现中我们需要访问B的具体成员，因此需要包含头文件，那么我们应该在类A的实现部分（CPP文件）包含类B的头文件而非声明部分(H文件)。</p></blockquote><p>简单的说就是最好在声明中包含头文件。在头文件包含前置声明。为了防止头文件相互依赖相互引用出现的空内存现象。</p><p>参考资料：*<a href="http://www.cnblogs.com/MuyouSome/p/3388242.html">http://www.cnblogs.com/MuyouSome/p/3388242.html</a>*</p>]]></content>
      
      
      
        <tags>
            
            <tag> cocos2dx </tag>
            
            <tag> 游戏开发 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cocos2dx学习笔记——引擎版本号的选择</title>
      <link href="/posts/1ba44de6/"/>
      <url>/posts/1ba44de6/</url>
      
        <content type="html"><![CDATA[<p>Cocos2d作为一款开源游戏引擎来说。是非常好的一款引擎。但是不得不说。他的学习成本比较高。为什么说他的学习成本比较高呢？因为其各个版本间的兼容性很差，架构迭代很快。早年我学使用unity。仅仅在unity4到unity5之间经历了一次大的api更新。然而小版本之间兼容性非常强。一个代码能够很容易在各个小版本之间交叉使用。然而Cocos2d并不能。Cocos2d之间API更新非常快。同样是3.X版本。我照着3.4的教程写着3.10的基础代码。居然还能出现一些很神奇的bug。这点是我非常反对的。调试与翻源码翻了3小时以上的时间后我选择了放弃。<br>新版本与旧版本差异大。导致市面上的教程都处于一个落后的阶段。新的教程很难跟上引擎的更新速度。其学习基本处于和大多数缺少完善文档，缺少视频和文字教程的开源项目一样基本完全靠程序员个人的素质与逻辑能力。这无疑对新手来说是非常不友好的。<br>因此我建议下载引擎的时候最好不要选择最新版本的游戏引擎。最好是找到一个适合自己或自己感兴趣的教程。去下载配套的引擎版本。在熟悉了以后再去跟进新的版本进行学习。这样才会比较好。</p>]]></content>
      
      
      
        <tags>
            
            <tag> cocos2dx </tag>
            
            <tag> 游戏开发 </tag>
            
            <tag> 版本号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cocos2dx学习笔记——CSLoader创建FileNode的报错问题</title>
      <link href="/posts/531c197b/"/>
      <url>/posts/531c197b/</url>
      
        <content type="html"><![CDATA[<p>使用<code>CSLoader::createNode(&quot;IndexScene.csb&quot;);</code>创建节点时发生错误。原因在于文件节点。其结构如下：</p><ul><li>Scene<ul><li>FileNode<ul><li>Background</li><li>Button</li></ul></li></ul></li></ul><p>出现错误。<br>原因可能为无法解析文件节点的问题<br>临时解决方案：不使用文件节点进行嵌套。简化csb文件结构。</p>]]></content>
      
      
      
        <tags>
            
            <tag> cocos2dx </tag>
            
            <tag> 游戏开发 </tag>
            
            <tag> CSLoader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cocos2dx学习笔记——cocos-ext头文件编译问题</title>
      <link href="/posts/990c5d7a/"/>
      <url>/posts/990c5d7a/</url>
      
        <content type="html"><![CDATA[<p>开始学习的过程中遇到一个问题。就是跟着教程学习使用如何使用TableView的时候，为使用当时引入了一个名为<code>cocos-ext.h</code>的头文件而产生了大量的报错。我当时很诧异因为我一切步骤都是按照教程的步骤来的。后来我发现了原因所在。因为我为了更好的研究代码使用的是cocos2d的源码生成的项目。而不是使用预编译的版本。而环境搭建时对于基本头文件的路径有所优化，而源码中仍旧使用的是老版本的路径方式。所以解决方案如下：<br>不断循环编译。在编译报告中点开关于<code>无法打开源文件extensions\...</code>的报错项目。将其改为如<code>#include &quot;ExtensionExport.h&quot;</code>这样的格式。再重新生成直到没有报错为止。</p>]]></content>
      
      
      
        <tags>
            
            <tag> cocos2dx </tag>
            
            <tag> 游戏开发 </tag>
            
            <tag> extensions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git使用方法简明教程 - 个人篇</title>
      <link href="/posts/44a80e28/"/>
      <url>/posts/44a80e28/</url>
      
        <content type="html"><![CDATA[<h2 id="git使用"><a href="#git使用" class="headerlink" title="git使用"></a>git使用</h2><h3 id="什么是git"><a href="#什么是git" class="headerlink" title="什么是git"></a>什么是git</h3><p>git就是一个管理你项目代码，监控你代码的变更记录的一款软件。</p><h3 id="下载git"><a href="#下载git" class="headerlink" title="下载git"></a>下载git</h3><p>在git官网上下载，推荐是带有gui的版本。下载地址自行百度</p><h3 id="Bash-和-GUI"><a href="#Bash-和-GUI" class="headerlink" title="Bash 和 GUI"></a>Bash 和 GUI</h3><p>下载安装完毕后右键菜单会多出来两项。分别为git bash和git gui。bash为git的命令行版本，gui为git的gui版本。在一个文件夹下右键选择其中之一。就是在当前文件下打开该工具<br>PS: git bash 也可以当做普通的命令行来使用</p><h3 id="项目的创建与删除"><a href="#项目的创建与删除" class="headerlink" title="项目的创建与删除"></a>项目的创建与删除</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><p>在项目文件的根目录下右键，选中git bash。输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><p>完成git文件创建，会在该目录下创建一个隐藏的文件夹 <code>.git</code><br>该文件夹就是管理你代码的监控文件，文件夹总大小略大于你所有文本文件总大小</p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>文件夹设置为<strong>显示隐藏的项目</strong>，把<code>.git</code>文件夹删除就可以完成git项目的删除</p><h2 id="代码管理"><a href="#代码管理" class="headerlink" title="代码管理"></a>代码管理</h2><p>代码管理对于新手来说并不建议使用bash版本的git。因为过于复杂。一般bash用于处理gui版本无法处理的一些复杂的git管理操作。因此这里使用gui版本进行。<br>对于个人使用。一个简单的主分支即可。主分支一般默认起名叫master。我会在之后的团队协作使用git的教程中详细说明分支的相关内容。</p><h3 id="代码提交-commit"><a href="#代码提交-commit" class="headerlink" title="代码提交 commit"></a>代码提交 commit</h3><p>当代码与之前版本不同时，git把有过改动的文件列出来。点击缓存改动。将改动的文件添加到将要提交的队列。在提交描述处填写该次提交改动的描述，点击提交完成代码的提交。<br>注意，此处的提交是指提交到本地的git项目中。并不是提交到网上的代码仓库。当然也可以不提交到网上。<br><strong>描述格式</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">描述详情</span><br><span class="line"></span><br><span class="line">描述细节1</span><br><span class="line">描述细节2</span><br></pre></td></tr></table></figure><p><strong>个人用的推荐的描述格式</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">XXX功能</span><br><span class="line"></span><br><span class="line">ADD XXX功能</span><br><span class="line">UPDATE 优化了XXX的逻辑</span><br><span class="line">DELETE 删除冗余代码</span><br><span class="line">FIXED 修复了不能XXX的BUG</span><br></pre></td></tr></table></figure><h3 id="代码上传-push"><a href="#代码上传-push" class="headerlink" title="代码上传 push"></a>代码上传 push</h3><p>代码上传是指将git项目提交带网络上的代码仓库中<br>上传必须知道三个东西:</p><ul><li>git仓库的地址</li><li>git仓库的个人账号</li><li>git仓库的个人密码</li></ul><p>在git gui中直接点击上传即可。在目标版本库中填入仓库的地址。然后上传的过程中会一一询问账号和密码。正确填写完成上传。</p><h3 id="代码克隆-clone"><a href="#代码克隆-clone" class="headerlink" title="代码克隆 clone"></a>代码克隆 clone</h3><p>代码克隆很简单。一局代码完事</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> 项目的地址</span><br></pre></td></tr></table></figure><h3 id="历史记录-history"><a href="#历史记录-history" class="headerlink" title="历史记录 history"></a>历史记录 history</h3><p>git gui左上角版本库中点击图示master分支(或所有分支)的历史完成查看</p><h3 id="忽略文件-gitignore"><a href="#忽略文件-gitignore" class="headerlink" title="忽略文件 .gitignore"></a>忽略文件 .gitignore</h3><p>在项目的根目录创建.gitignore，可以忽略该文件的改动。不添加到git跟踪中格式支持通配符。一般用于忽略ide或者二进制打包生成的文件。<br>注释使用#<br><strong>examples</strong>:<br>.idea/<br>node_modules/<br>*.tmp</p><h2 id="使用github-for-windows进行简易处理"><a href="#使用github-for-windows进行简易处理" class="headerlink" title="使用github for windows进行简易处理"></a>使用github for windows进行简易处理</h2><p>github 官网提供了一个面向github的gui简易版本，可以帮助用户很方便的进行代码的管理，支持的基本操作有：</p><ul><li>代码clone</li><li>添加项目</li><li>创建项目</li><li>.gitignore管理</li><li>remote远程管理</li><li>分支切换</li><li>代码提交</li><li>代码上传</li><li>代码同步</li><li>pull请求</li><li>分支比较</li><li>历史查看</li><li>…</li></ul><h2 id="常用的一些代码仓库"><a href="#常用的一些代码仓库" class="headerlink" title="常用的一些代码仓库"></a>常用的一些代码仓库</h2><p>这里推荐一些流行的网络代码管理的提交平台，通过网络平台可以更好的分享代码，团队合作</p><h4 id="国外"><a href="#国外" class="headerlink" title="国外:"></a>国外:</h4><ul><li>github</li><li>google code(墙)</li><li>bitbucket</li><li>gitlab</li></ul><h4 id="国内"><a href="#国内" class="headerlink" title="国内:"></a>国内:</h4><ul><li>oschina</li><li>code</li><li>GitCafe</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pomelo框架制作游戏初探(二) - 登陆模块</title>
      <link href="/posts/fa08ab46/"/>
      <url>/posts/fa08ab46/</url>
      
        <content type="html"><![CDATA[<p>好的那么接上篇<a href="/posts/2d40853/">pomelo框架制作游戏初探（一）</a><br>上篇初步介绍了pomelo框架的环境搭建与基本使用。那么现在开始来正式做一个项目吧，本次我想要做的项目是我自己根据Minecraft来的灵感想要做的一款沙盒类游戏，这里主要记录服务端与服务端交互的逻辑部分。</p><h2 id="主界面"><a href="#主界面" class="headerlink" title="主界面"></a>主界面</h2><p><img src="/images/pomelo/login.jpg"></p><h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><ul><li>/game-server #服务端代码</li><li>/shared #共用逻辑</li><li>/web-server #前端代码</li></ul><h2 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>在pomelo框架下。服务端是基于一个JSON文件来实现服务端各个部分的数据交互的。该文件位于<code>/game-server/config/servers.json</code>。  </p><p><strong>servers.json</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;development&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;connector&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;connector-server-1&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;port&quot;</span>: <span class="number">3150</span>,</span><br><span class="line">                <span class="attr">&quot;clientHost&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;clientPort&quot;</span>: <span class="number">3010</span>,</span><br><span class="line">                <span class="attr">&quot;frontend&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;production&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;connector&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;connector-server-1&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;port&quot;</span>: <span class="number">3150</span>,</span><br><span class="line">                <span class="attr">&quot;clientHost&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;clientPort&quot;</span>: <span class="number">3010</span>,</span><br><span class="line">                <span class="attr">&quot;frontend&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，有development和production两个参数分别表示开发环境和生产环境，来实现本地调试与正式运行相分离。下属为服务器的分类，常见的有connector服务器，chat服务器，gate服务器，area服务器等等，标识各种业务功能，如gate服务器负责负载均衡，将用户分配到不同的服务器处理。服务器分类下是一个数组。数组中每一个对象就是一个服务器的具体配置，配置的参数为:</p><ul><li>id #服务器的唯一标识</li><li>host #服务器的ip地址</li><li>port #服务器的连接端口号</li><li>clientHost #面向客户端的ip，可不填</li><li>clientPort #面向客户端的端口号，可不填</li><li>frontend #客户端是否可见，当该值为true时clientHost与clientPort有效。默认为false</li><li>…</li></ul><p>现在我想要添加一个gate服务器，来负责将连接的用户分配一个connector服务器来达到负载均衡的目的。那么我在<code>servers.json</code>的相应的地方加入这么一行参数：<br><code>&quot;gate&quot;: [&#123;&quot;id&quot;: &quot;gate-server-1&quot;,&quot;host&quot;: &quot;127.0.0.1&quot;,&quot;clientPort&quot;: 3014,&quot;frontend&quot;: true&#125;]</code><br><a href="#%E6%B7%BB%E5%8A%A0%E6%9C%8D%E5%8A%A1%E5%99%A8">如何添加服务器&gt;&gt;</a></p><h3 id="添加服务器"><a href="#添加服务器" class="headerlink" title="添加服务器"></a>添加服务器</h3><p>对于pomelo来说，添加服务器很简单。如果代码按照规范写的话只需要修改<code>servers.json</code>配置文件即可。注意如果是要添加一个新的服务器类型的话需要在<code>/game-server/config/adminServers.json</code>中添加配置。否则直接修改<code>servers.json</code>配置文件会报错。如本例中添加了一个gate服务器类型：</p><p><strong>adminServers.json</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;connector&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;agarxhqb98rpajloaxn34ga8xrunpagkjwlaw3ruxnpaagl29w4rxn&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;gate&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;agarxhqb98rpajloaxn34ga8xrunpagkjwlaw3ruxnpaagl29w4rxn&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h2><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>pomelo 框架提供了对客户端的API接口。这里暂时只讨论web端的API</p><ul><li>pomelo.init(params, cb) #初始化</li><li>pomelo.request(route, msg, cb) #客户端请求</li><li>pomelo.notify(route, msg) #客户端无回调请求</li><li>pomelo.on(route, cb) #客户端响应</li><li>pomelo.disconnect() #断开连接</li></ul><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>当打开网页时直接调用该代码。向gate服务器请求登陆</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">pomelo.init(&#123;</span><br><span class="line">    host: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    port: <span class="number">3014</span>,</span><br><span class="line">    log: <span class="literal">true</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//发送请求</span></span><br><span class="line">    pomelo.request(<span class="string">&quot;gate.gateHandler.queryEntry&quot;</span>, &#123;<span class="attr">uid</span>: <span class="number">1</span>&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        alert(<span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">        pomelo.disconnect();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化pomelo连接后，向服务器的<code>gate.gateHandler.queryEntry</code>请求数据，传递参数为<code>&#123;uid: 1&#125;</code>。</p><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>** /game-server/app/servers/gate/handler/gateHandler.js <strong>修改代码如下</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Code = <span class="built_in">require</span>(<span class="string">&#x27;../../../../../shared/code&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">app</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Handler(app);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Handler = <span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.app = app;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接请求</span></span><br><span class="line">Handler.prototype.queryEntry = <span class="function"><span class="keyword">function</span>(<span class="params">msg, session, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> uid = msg.uid;<span class="comment">//用户唯一标识</span></span><br><span class="line">    <span class="keyword">if</span> (!uid) &#123;</span><br><span class="line">        next(<span class="literal">null</span>, &#123;<span class="attr">code</span>: Code.FAIL&#125;);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> connectors = <span class="built_in">this</span>.app.getServersByType(<span class="string">&#x27;connector&#x27;</span>);<span class="comment">//获取服务器列表</span></span><br><span class="line">    <span class="keyword">if</span> (!connectors || connectors.length === <span class="number">0</span>) &#123;</span><br><span class="line">        next(<span class="literal">null</span>, &#123;<span class="attr">code</span>: Code.GATE.FA_NO_SERVER_AVAILABLE&#125;);<span class="comment">//没有可用的服务器</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> res = connectors[<span class="number">0</span>];<span class="comment">//分配服务器</span></span><br><span class="line">    next(<span class="literal">null</span>, &#123;<span class="attr">code</span>: Code.OK, <span class="attr">host</span>: res.host, <span class="attr">port</span>: res.clientPort&#125;);<span class="comment">//将分配数据传递给下层</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中code是一个客户端与服务端共用的数据集合。位于shared文件夹内<br><strong>/shared/code.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    OK: <span class="number">200</span>,</span><br><span class="line">    FAIL: <span class="number">500</span>,</span><br><span class="line"></span><br><span class="line">    ENTRY: &#123;</span><br><span class="line">        FA_TOKEN_INVALID: <span class="number">1001</span>,</span><br><span class="line">        FA_TOKEN_EXPIRE: <span class="number">1002</span>,</span><br><span class="line">        FA_USER_NOT_EXIST: <span class="number">1003</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    GATE: &#123;</span><br><span class="line">        FA_NO_SERVER_AVAILABLE: <span class="number">2001</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="尝试连接"><a href="#尝试连接" class="headerlink" title="尝试连接"></a>尝试连接</h3><p>当出现下图提示则说明连接正常。向gate服务器请求连接。gate服务器向用户分配了一个可用的连接服务器的IP与端口号<br><img src="/images/pomelo/gateRequest.jpg"></p><h2 id="客户端处理登陆请求"><a href="#客户端处理登陆请求" class="headerlink" title="客户端处理登陆请求"></a>客户端处理登陆请求</h2><p>好了。基本的请求分配服务器已经完成了。但是我们不能直接这么用。我们需要一个用户管理器去验证用户的账号密码，管理角色信息等等。这一部分和普通的网页是一致的。因此完全可以放在前端代码中写。<code>web-server</code>是基于express写的web服务器。这里直接在其中添加对账号与密码的验证。因为与pomelo框架无关所以不多累述。直接放出代码<br><strong>/web-server/app.js</strong> 添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//登陆</span></span><br><span class="line">app.post(<span class="string">&#x27;/login&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> msg = req.body;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> username = msg.username;</span><br><span class="line">    <span class="keyword">var</span> pwd = msg.password;</span><br><span class="line">    <span class="keyword">if</span> (!username || !pwd) &#123;</span><br><span class="line">        res.send(&#123;<span class="attr">code</span>: <span class="number">500</span>&#125;);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    userDao.getUserByName(username, <span class="function"><span class="keyword">function</span>(<span class="params">err, user</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err || !user) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;username not exist!&#x27;</span>);</span><br><span class="line">            res.send(&#123;<span class="attr">code</span>: <span class="number">500</span>&#125;);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pwd !== user.password) &#123;</span><br><span class="line">            <span class="comment">// TODO code</span></span><br><span class="line">            <span class="comment">// password is wrong</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;password incorrect!&#x27;</span>);</span><br><span class="line">            res.send(&#123;<span class="attr">code</span>: <span class="number">501</span>&#125;);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(username + <span class="string">&#x27; login!&#x27;</span>);</span><br><span class="line">        res.send(&#123;<span class="attr">code</span>: <span class="number">200</span>, <span class="attr">token</span>: Token.create(user.id, <span class="built_in">Date</span>.now(), secret), <span class="attr">uid</span>: user.id&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//注册</span></span><br><span class="line">app.post(<span class="string">&#x27;/register&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//console.log(&#x27;req.params&#x27;);</span></span><br><span class="line">    <span class="keyword">var</span> msg = req.body;</span><br><span class="line">    <span class="keyword">if</span> (!msg.name || !msg.password) &#123;</span><br><span class="line">        res.send(&#123;<span class="attr">code</span>: <span class="number">500</span>&#125;);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    userDao.createUser(msg.name, msg.password, <span class="string">&#x27;&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, user</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err || !user) &#123;</span><br><span class="line">            <span class="built_in">console</span>.error(err);</span><br><span class="line">            <span class="keyword">if</span> (err &amp;&amp; err.code === <span class="number">1062</span>) &#123;</span><br><span class="line">                res.send(&#123;<span class="attr">code</span>: <span class="number">501</span>&#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.send(&#123;<span class="attr">code</span>: <span class="number">500</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;A new user was created! --&#x27;</span> + msg.name);</span><br><span class="line">            res.send(&#123;<span class="attr">code</span>: <span class="number">200</span>, <span class="attr">token</span>: Token.create(user.id, <span class="built_in">Date</span>.now(), secret), <span class="attr">uid</span>: user.id&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其中 <strong>userDao</strong> 是数据库用户管理对象。根据自己数据库来编写，用户从数据库中存取用户数据</p>]]></content>
      
      
      
        <tags>
            
            <tag> pomelo </tag>
            
            <tag> 游戏开发 </tag>
            
            <tag> WhiteWord </tag>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pomelo框架制作游戏初探(一)</title>
      <link href="/posts/2d40853/"/>
      <url>/posts/2d40853/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很早就关注过NodeJS的高性能服务端开发。所以很早就想要用NodeJS作为后台服务器来开发一款网络游戏。<br>自己写过原生的游戏服务端然而性能并不高。本地测试就会占用很大一部分资源，可以预见的是原生开发的难度远远大于基于框架开发。毕竟框架虽然需要一定的学习成本但是毕竟框架是无数程序员不断优化的成果。写出来的东西一定是好过自己单干的。<br>因此在一定的市场调查（其实就是推度娘）过后我选中了网易开发的pomelo框架。有完整的DEMO，和完善的文档（顺便吐个槽，国人开发的东西API文档居然全是用的英文）</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://github.com/NetEase/pomelo/wiki/%E5%AE%89%E8%A3%85pomelo">此处为官网WIKI</a></p><h3 id="windows环境"><a href="#windows环境" class="headerlink" title="windows环境"></a>windows环境</h3><ul><li><a href="http://nodejs.org/download/">NodeJS</a></li><li><a href="https://www.python.org/">python</a>(2.5&lt;version&lt;3.0)</li><li>VC++ 编译器，包含在Visual Studio 2010中（VC++ 2010 Express亦可）。对于windows8的用户，需要安装Microsoft Visual Studio C++ 2012。<h3 id="Mac-OS环境"><a href="#Mac-OS环境" class="headerlink" title="Mac OS环境"></a>Mac OS环境</h3></li><li><a href="http://nodejs.org/download/">NodeJS</a></li><li><a href="https://developer.apple.com/downloads/index.action?q=xcode">Xcode Command Line Tools</a>或者<a href="https://developer.apple.com/xcode/">Xcode</a>的完整包</li><li>make工具</li></ul><h3 id="pomelo"><a href="#pomelo" class="headerlink" title="pomelo"></a>pomelo</h3><p>npm 安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install pomelo -g</span><br></pre></td></tr></table></figure><p>git 安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/NetEase/pomelo.git</span><br><span class="line">$ <span class="built_in">cd</span> pomelo</span><br><span class="line">$ npm install -g</span><br></pre></td></tr></table></figure><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir HelloWorld</span><br><span class="line">$ <span class="built_in">cd</span> HelloWorld</span><br><span class="line">$ pomelo init</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pomelo init ./HelloWorld</span><br></pre></td></tr></table></figure><p>两者等价</p><p>然后进入HelloWorld文件夹，安装依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sh npm-install.sh</span><br></pre></td></tr></table></figure><p>npm-install.sh的逻辑就是分别进入该项目的两个主要文件夹game-server和web-server<br>使用npm install命令安装文件依赖</p><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><p>启动项目需要分别进入两个主要文件夹<br>启动game-server服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> game-server</span><br><span class="line">$ pomelo start</span><br></pre></td></tr></table></figure><p>启动web-server服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> web-server</span><br><span class="line">$ node app </span><br></pre></td></tr></table></figure><p>node [appName]是NodeJS启动传统NodeJS应用的方法，至于pomelo start的作用尚不明确。暂时无需理会</p><h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><p>根据启动web-server的提示打开 <a href="http://127.0.0.1:3001/">http://127.0.0.1:3001/</a> 。点击按钮发生产生响应。则说明服务器正常。否则则说明服务器不连通。可以通过<a href="http://nodejs.netease.com/">Pomelo Club</a>咨询排除错误<br><img src="https://github.com/NetEase/pomelo/wiki/images/helloworld_test_snapshot.png"></p><h3 id="关闭项目"><a href="#关闭项目" class="headerlink" title="关闭项目"></a>关闭项目</h3><p>官方给出的关闭方法是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> game-server</span><br><span class="line">$ pomelo stop<span class="comment">#正常关闭</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> game-server</span><br><span class="line">$ pomelo <span class="built_in">kill</span><span class="comment">#强制关闭</span></span><br></pre></td></tr></table></figure><p>然而我发现其实用Ctrl + C 也可以实现关闭服务器的作用，可以通过命令 <code>pomelo list</code> 查看到服务器已经被关闭。可能与pomelo kill命令同理</p>]]></content>
      
      
      
        <tags>
            
            <tag> pomelo </tag>
            
            <tag> 游戏开发 </tag>
            
            <tag> WhiteWord </tag>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
